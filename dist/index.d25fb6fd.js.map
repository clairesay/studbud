{"mappings":"kBAAMA,EAAUC,SAASC,eAAe,YACzBD,SAASE,iBAAiB,eAyBnCC,EAAiBH,SAASC,eAAe,wBAC3CG,GAAgB,EACpBL,EAAQM,iBAAiB,SAAS,WACX,GAAjBD,GACFD,EAAeG,UAAUC,IAAI,UAC7BH,GAAgB,GACU,GAAjBA,IACTD,EAAeG,UAAUE,OAAO,UAChCJ,GAAgB,MAgCpB,MAAAK,EAEIC,YAAYC,EAAIC,EAAMC,EAAaC,EAASC,EAAQC,EAAgBC,EAAiBC,EAAkBC,EAASC,GAE9GC,KAAKV,GAAKA,EACVU,KAAKT,KAAOA,EACZS,KAAKR,YAAcA,EACnBQ,KAAKP,QAAUA,EACfO,KAAKN,OAASA,EACdM,KAAKL,eAAiBA,EACtBK,KAAKJ,gBAAkBA,EACvBI,KAAKH,iBAAmBA,EACxBG,KAAKF,QAAUA,EAEfE,KAAKD,WAAaA,EAIpBE,iBACEC,EAASC,KAAKH,MAGPA,KAAKV,GAGdc,WAAWd,GACMY,EAASG,QAAO,SAASC,UAC/BA,EAAQhB,IAAMA,KAyCzBiB,WAAWC,OACLC,EAAO9B,SAAS+B,cAAc,WAC9BC,EAAahC,SAAS+B,cAAc,QACpCE,EAAQjC,SAAS+B,cAAc,MAC/BlB,EAAcb,SAAS+B,cAAc,KACrCG,EAAclC,SAAS+B,cAAc,OACjCZ,EAAUnB,SAAS+B,cAAc,MACjCI,EAAUnC,SAAS+B,cAAc,QAErCK,EAAWpC,SAAS+B,cAAc,KAClCK,EAAS9B,UAAUC,IAAI,QACvB6B,EAASC,UAAAA,8YAGbP,EAAKxB,UAAUC,IAAI,QACnBuB,EAAKQ,aAAa,KAAM,KAAMT,GAC9BG,EAAW1B,UAAUC,IAAI,OACzByB,EAAW1B,UAAUC,IAAI,WACzB2B,EAAY5B,UAAUC,IAAI,gBAC1B4B,EAAQ7B,UAAUC,IAAI,QACtB4B,EAAQ7B,UAAUC,IAAI,OACtB0B,EAAMM,YAAclB,KAAKT,KACzBC,EAAY0B,YAAclB,KAAKR,YAC/BmB,EAAWO,YAAclB,KAAKP,QAC9BK,EAAQoB,YAAclB,KAAKF,QAC3BgB,EAAQI,YAAclB,KAAKJ,gBAAkBI,KAAKH,iBAGlDgB,EAAYM,YAAYrB,GACxBe,EAAYM,YAAYL,GAGxBL,EAAKU,YAAYR,GACjBF,EAAKU,YAAYP,GACjBH,EAAKU,YAAY3B,GACjBiB,EAAKU,YAAYJ,GACjBN,EAAKU,YAAYN,OAGbO,EAAgBzC,SAAS0C,uBAAuB,SACjC,SAAfrB,KAAKN,OACP0B,EAAc,GAAGD,YAAYV,GACL,eAAfT,KAAKN,OACd0B,EAAc,GAAGD,YAAYV,GACL,QAAfT,KAAKN,QACd0B,EAAc,GAAGD,YAAYV,GAE/Ba,KAKW3C,SAAS+B,cAAc,cAYpCa,EAAaC,EAAMC,EAAUC,EAAiBC,EAAaC,EAAYC,EAAoBC,EAAqBC,EAAsBC,EATtI9B,EAAAA,GAYmBvB,SAASC,eAAe,sBAK9BI,iBAAiB,SAAS,SAASiD,GAClDA,EAAMC,iBACNX,EAAczC,EAAeD,iBAAiB,cAC9CsD,QAAQC,IAAIb,GAEZc,OAASnC,EAASoC,OAClBb,EAAWF,EAAY,GAAGgB,MAC1Bb,EAAkBH,EAAY,GAAGgB,MACjCZ,EAAcJ,EAAY,GAAGgB,UACzBC,EAAW1D,EAAe2D,cAAc,uBAC5Cb,EAAaY,EAASD,MAUQ,GAA1BhB,EAAY,GAAGmB,QACjBb,EAAqBN,EAAY,GAAGgB,MACD,GAA1BhB,EAAY,GAAGmB,QACxBb,EAAqBN,EAAY,GAAGgB,MACD,GAA1BhB,EAAY,GAAGmB,UACxBb,EAAqBN,EAAY,GAAGgB,OAGtCT,EAAsBP,EAAY,GAAGgB,MACrCR,EAAuBR,EAAY,GAAGgB,MACtCP,EAAcT,EAAY,GAAGgB,MAQZ,QAGjBf,EAAAA,IAAWpC,EAAKiD,OAAQZ,EAAUC,EAAiBC,EAAaC,EAAYC,EAAoBC,EAAqBC,EAAsBC,EAH1H,SAWb9B,EAASoC,OAAS,EACpBpC,EAASG,QAAO,SAASC,GACnBA,EAAQhB,IAAM+C,OAChBb,EAAKpB,WAAWiC,QAEhBb,EAAKjB,WAAWiB,EAAKvB,cAKzBuB,EAAKjB,WAAWiB,EAAKvB,WAOvBlB,GAAgB,EAChBD,EAAeG,UAAUE,OAAO,UAChCL,EAAe6D,QAEfR,QAAQC,IAAIlC,YAOR0C,EAAgBjE,SAASC,eAAe,uBAC1CiE,GAAkB,EACJlE,SAASC,eAAe,cAGhCI,iBAAiB,SAAS,WACX,GAAnB6D,GACFD,EAAc3D,UAAUC,IAAI,UAC5B2D,GAAkB,GACU,GAAnBA,IACTD,EAAc3D,UAAUE,OAAO,UAC/B0D,GAAkB,MAoFtB,SAAAvB,QACKb,EAAO9B,SAASE,iBAAiB,SAEtCsD,QAAQC,IAAI3B,EAAK6B,QAEjB7B,EAAKqC,SAAQ,SAASC,EAAQC,GAC1BD,EAAO/D,iBAAiB,SAAS,WAE/BmD,QAAQC,IAAI,SACS,GAAjBrD,GACFD,EAAeG,UAAUC,IAAI,UAC7BH,GAAgB,GACU,GAAjBA,IACTD,EAAeG,UAAUE,OAAO,UAChCJ,GAAgB,SA7FGJ,SAASC,eAAe,qBAChCI,iBAAiB,SAAS,SAASiD,GACpDA,EAAMC,qBAGFe,EAAStE,SAAS+B,cAAc,OACpCuC,EAAOhE,UAAUC,IAAI,cACjB0B,EAAQjC,SAAS+B,cAAc,OACnCE,EAAM3B,UAAUC,IAAI,aAChBgE,EAAavE,SAAS+B,cAAc,SACxCwC,EAAWjE,UAAUC,IAAI,mBAGrBiE,EAAkBP,EAAc/D,iBAAiB,SAAS,GAC9DqE,EAAWX,MAAQY,EAAgBZ,UAC/Ba,EAAQzE,SAAS+B,cAAc,MACnC0C,EAAMnE,UAAUC,IAAI,SACpBkE,EAAMlC,YAAc,MAChBmC,EAAQ1E,SAAS+B,cAAc,OACnC2C,EAAMpE,UAAUC,IAAI,SAEpB0B,EAAMO,YAAY+B,GAClBtC,EAAMO,YAAYiC,GAClBH,EAAO9B,YAAYP,GACnBqC,EAAO9B,YAAYkC,OACfC,EAAQ3E,SAASC,eAAe,SACpC0E,EAAMnC,YAAY8B,GAElBK,EAAMC,SAAAA,CACJC,IAAK,EACLC,KAAMH,EAAMI,YACZC,SAAU,WAGZd,GAAkB,EAClBD,EAAcD,QACdC,EAAc3D,UAAUE,OAAO,cAI3ByE,EAAWjF,SAASE,iBAAiB,UACzC+E,EAAWA,EAASA,EAAStB,OAAS,OASlCuB,SAPcD,EAOLtD,CACbwD,MAAO,SACPC,UAAW,IAEXC,cAAe,IACXC,WAAY,aACZC,YAAa,cACbC,eAAe,EACfC,MAAO,SAAUC,OACXjB,EAAQzE,SAASE,iBAAiB,UACtCwE,EAAQ1E,SAASE,iBAAiB,UAChCuE,EAAMN,SAAQ,SAAeC,EAAQC,GACnCsB,OAAS,UACAC,EAAI,EAAGA,EAAIlB,EAAML,GAAOnE,iBAAiB,SAASyD,OAAQiC,IACG,GAA9DlB,EAAML,GAAOnE,iBAAiB,SAAS0F,GAAGtF,UAAUqD,SACpDgC,QAAU,GAMlBnC,QAAQC,IAAI,eAAiBkC,QAC7BlB,EAAMJ,GAAO9B,YAAcoD,gBA0BvChD","sources":["./public/js/script.js"],"sourcesContent":["const newTask = document.getElementById('new-task');\r\nvar editTask = document.querySelectorAll('.card');\r\n\r\n// STACK OVERFLOW https://stackoverflow.com/questions/4880381/check-whether-html-element-has-scrollbars\r\n\r\n// RESIZING CARD WIDTH BASED ON OVERFLOW PROPERTIES TO ACCOUNT FOR SCROLLBAR\r\nfunction cardWidth() {\r\n  editTask.forEach(function(element) {\r\n    var cardContainer = element.parentElement\r\n    var hasVerticalScrollbar = cardContainer.scrollHeight > cardContainer.clientHeight;\r\n    if (hasVerticalScrollbar) {\r\n      element.style.width = 'auto';\r\n      element.style.maxWidth = '90%'; \r\n    } else {\r\n      element.style.width = 'auto';\r\n      cardContainer.style.paddingRight = '36px';\r\n    }\r\n  })\r\n}\r\n\r\n\r\n// function updateVar() {\r\n//   editTask = document.querySelectorAll('.card');\r\n//   console.log(editTask)\r\n// }\r\n// CREATE A NEW TASK\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nvar overlayToggle = false;\r\nnewTask.addEventListener('click', function() {\r\n  if (overlayToggle == false) {\r\n    createTaskForm.classList.add('active')\r\n    overlayToggle = true;\r\n  } else if (overlayToggle == true) {\r\n    createTaskForm.classList.remove('active')\r\n    overlayToggle = false;\r\n  }\r\n} )\r\n// EDIT A TASK\r\n// editTask.forEach(function(elem) {\r\n//   elem.addEventListener('click', function() {\r\n//     updateVar()\r\n//     console.log('click')\r\n//     if (overlayToggle == false) {\r\n//       createTaskForm.classList.add('active')\r\n//       overlayToggle = true;\r\n//     } else if (overlayToggle == true) {\r\n//       createTaskForm.classList.remove('active')\r\n//       overlayToggle = false;\r\n//     }\r\n//   })\r\n// })\r\n\r\n//// A TEST ////\r\n// function rip() {\r\n//   updateVar()\r\n//   console.log('click')\r\n//   if (overlayToggle == false) {\r\n//     createTaskForm.classList.add('active')\r\n//     overlayToggle = true;\r\n//   } else if (overlayToggle == true) {\r\n//     createTaskForm.classList.remove('active')\r\n//     overlayToggle = false;\r\n//   }\r\n// }\r\n\r\n// declaring a class called Task - this ordains the structure for all the elements to go into the class\r\nclass Task {\r\n    // this is what it's made of\r\n    constructor(id, name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate, saveStatus) {\r\n    // constructor(id, name, description, dueDate, priorityRating, estimatedTime, completionStatus, saveStatus) {\r\n      this.id = id;\r\n      this.name = name;\r\n      this.description = description;\r\n      this.subject = subject;\r\n      this.status = status;\r\n      this.priorityRating = priorityRating;\r\n      this.estimatedTimeHr = estimatedTimeHr;\r\n      this.estimatedTimeMin = estimatedTimeMin;\r\n      this.dueDate = dueDate;\r\n      // this.completionStatus = completionStatus;\r\n      this.saveStatus = saveStatus;\r\n    }\r\n  \r\n    // this adds tasks to the array taskList\r\n    addTask() {\r\n      taskList.push(this);\r\n      // returns its index\r\n      // return taskList.indexOf(this)\r\n      return this.id\r\n    }\r\n\r\n    updateTask(id) {\r\n      var myObject = taskList.filter(function(element) {\r\n        return element.id == id;\r\n      })\r\n    }\r\n  //////////////////////////////////////////////////////////////\r\n    // this prints the last task that was added to the array taskList\r\n    // n represents the index of the element that was just added\r\n    // printTask(n) {\r\n    //   var printTask = document.createElement('p');\r\n    //   var taskNode = document.createTextNode(\r\n    //     'Task: ' + this.name +\r\n    //     ' \\nDescription: ' + this.description + \r\n    //     ' \\nDue Date: ' + this.dueDate + \r\n    //     ' \\nPriority Rating: ' + this.priorityRating + \r\n    //     ' \\nEstimated Time to Completion: ' + this.estimatedTime\r\n    //     // ' \\nCompletion Status: ' + this.completionStatus\r\n    //   );\r\n    //   // adding text to the p tag\r\n    //   printTask.appendChild(taskNode);\r\n  \r\n    //   // creating a delete button\r\n    //   taskDelete = document.createElement('button')\r\n    //   taskDelete.innerHTML = 'Delete Task'\r\n    //   taskDelete.className = 'delete-button'\r\n  \r\n    //   taskDelete.addEventListener('click', function() {\r\n    //     // removing the item from the task list array\r\n    //     taskList[n].saveStatus = 'deleted'\r\n    //     ////////// need to check position of this element in array after refreshing\r\n  \r\n    //     console.log(taskList)\r\n    //     // removing this from the display too\r\n    //     printTask.remove()\r\n    //   })\r\n  \r\n    //   // adding delete button to the p tag\r\n    //   printTask.appendChild(taskDelete)\r\n  \r\n    //   // adding the task to the display\r\n    //   // taskDisplay.appendChild(printTask)\r\n    // }\r\n//////////////////////////////////////////////////////////////////////////\r\n    createCard(n) {\r\n      var card = document.createElement('article');\r\n      var subjectTag = document.createElement('span'),\r\n          title = document.createElement('h3'),\r\n          description = document.createElement('p'),\r\n          timeDetails = document.createElement('div'),\r\n              dueDate = document.createElement('h4'),\r\n              timeTag = document.createElement('span'),\r\n          \r\n          editIcon = document.createElement('a')\r\n          editIcon.classList.add('edit') \r\n          editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n      card.classList.add('card')\r\n      card.setAttribute('id', 't-'+ n)\r\n      subjectTag.classList.add('tag')\r\n      subjectTag.classList.add('subject')\r\n      timeDetails.classList.add('time-details')\r\n      timeTag.classList.add('time')\r\n      timeTag.classList.add('tag')\r\n      title.textContent = this.name;\r\n      description.textContent = this.description;\r\n      subjectTag.textContent = this.subject;\r\n      dueDate.textContent = this.dueDate;\r\n      timeTag.textContent = this.estimatedTimeHr + this.estimatedTimeMin;\r\n\r\n      // appending time details to time div\r\n      timeDetails.appendChild(dueDate)\r\n      timeDetails.appendChild(timeTag)\r\n\r\n      // appending everything to whole div\r\n      card.appendChild(subjectTag)\r\n      card.appendChild(title)\r\n      card.appendChild(description)\r\n      card.appendChild(editIcon)\r\n      card.appendChild(timeDetails)\r\n\r\n      // appending card to column\r\n      var cardContainer = document.getElementsByClassName('cards')\r\n      if (this.status == 'ready') {\r\n        cardContainer[0].appendChild(card)\r\n      } else if (this.status == 'in-progress') {\r\n        cardContainer[1].appendChild(card)\r\n      } else if (this.status == 'done') {\r\n        cardContainer[2].appendChild(card)\r\n      }\r\n      reupdate()\r\n    }\r\n}\r\n  \r\n// initialising task delete button\r\nvar taskDelete = document.createElement('button')\r\n\r\n// creating an array that will be populated with tasks\r\nvar taskList = [];\r\n\r\n// accessing the full form to create tasks\r\n// var taskForm = document.getElementById('task-form');\r\n\r\n// article to display tasks\r\n// var taskDisplay = document.getElementById('task-display');\r\n\r\n// initialising variables\r\nvar taskDetails, task, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus;\r\n\r\n// selecting the submit button for the form\r\nvar taskSubmitButton = document.getElementById('create-task-submit');\r\n\r\n// something to populate tasks with on the page\r\n\r\n// on submit:\r\ntaskSubmitButton.addEventListener('click', function(event) {\r\n  event.preventDefault()\r\n  taskDetails = createTaskForm.querySelectorAll('form input');\r\n  console.log(taskDetails)\r\n  // get all of the user input in the input fields\r\n  taskID = taskList.length\r\n  taskName = taskDetails[0].value;\r\n  taskDescription = taskDetails[1].value;\r\n  taskSubject = taskDetails[2].value;\r\n  var statuses = createTaskForm.querySelector('select[name=status]');\r\n  taskStatus = statuses.value;\r\n  // console.log('taskstatusis:' + taskStatus)\r\n  // for (let i = 0; i < statuses.length; i ++) {\r\n  //   if (statuses[i].selected == 'selected') {\r\n  //     taskStatus = statuses[i].value\r\n  //   }\r\n  // }\r\n\r\n\r\n  // checking the radios \r\n  if (taskDetails[3].checked == true) {\r\n    taskPriorityRating = taskDetails[3].value\r\n  } else if (taskDetails[4].checked == true) {\r\n    taskPriorityRating = taskDetails[4].value\r\n  } else if (taskDetails[5].checked == true) {\r\n    taskPriorityRating = taskDetails[5].value\r\n  }\r\n\r\n  taskEstimatedTimeHr = taskDetails[6].value;\r\n  taskEstimatedTimeMin = taskDetails[7].value;\r\n  taskDueDate = taskDetails[8].value;\r\n  // checking the radios\r\n  // if (taskDetails[7].checked == true) {\r\n  //   taskCompletionStatus = taskDetails[7].value;\r\n  // } else if (taskDetails[8].checked == true) {\r\n  //   taskCompletionStatus = taskDetails[8].value;\r\n  // }\r\n\r\n  taskSaveStatus = 'saved';\r\n\r\n  // create a new task using the task class\r\n  task = new Task(taskID, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus)\r\n  // task = new Task(taskID, taskName, taskDescription, taskDueDate, taskPriorityRating, taskEstimatedTime, taskCompletionStatus, taskSaveStatus)\r\n\r\n  // add the task to the task list (repo)\r\n\r\n  // task.printTask(task.addTask());\r\n\r\n  // create new card with task\r\n  if (taskList.length > 0) {\r\n    taskList.filter(function(element) {\r\n      if (element.id == taskID) {\r\n        task.updateTask(taskID)\r\n      } else {\r\n        task.createCard(task.addTask());\r\n      }\r\n\r\n    })\r\n  } else {\r\n    task.createCard(task.addTask());\r\n  }\r\n\r\n\r\n\r\n\r\n  // exit form\r\n  overlayToggle = false;\r\n  createTaskForm.classList.remove('active')\r\n  createTaskForm.reset();\r\n  // print to check\r\n  console.log(taskList)\r\n})\r\n  \r\n  \r\n// getting values of the card for editing\r\n\r\n// //////////////// ADD COLUMN /////////////////////// //\r\nconst addColumnForm = document.getElementById('add-column-form')\r\nvar newColumnToggle = false;\r\nconst newColumn = document.getElementById('new-column');\r\n\r\n// adding an event listener to bring up the form\r\nnewColumn.addEventListener('click', function() {\r\n  if (newColumnToggle == false) {\r\n    addColumnForm.classList.add('active')\r\n    newColumnToggle = true\r\n  } else if (newColumnToggle == true) {\r\n    addColumnForm.classList.remove('active')\r\n    newColumnToggle = false\r\n  }\r\n})\r\n\r\n// adding an event listener for submitting the column\r\nconst columnSubmitButton = document.getElementById('add-column-submit')\r\ncolumnSubmitButton.addEventListener('click', function(event) {\r\n  event.preventDefault();\r\n\r\n  // creating the column\r\n  let column = document.createElement('div')\r\n  column.classList.add('column')\r\n  let title = document.createElement('div')\r\n  title.classList.add('title')\r\n  let columnName = document.createElement('input')\r\n  columnName.classList.add('column-name')\r\n\r\n  // giving it the name provided by the user\r\n  let columnNameValue = addColumnForm.querySelectorAll('input')[0]\r\n  columnName.value = columnNameValue.value\r\n  let total = document.createElement('h3')\r\n  total.classList.add('total')\r\n  total.textContent = 0;\r\n  let cards = document.createElement('div')\r\n  cards.classList.add('cards')\r\n\r\n  title.appendChild(columnName)\r\n  title.appendChild(total)\r\n  column.appendChild(title)\r\n  column.appendChild(cards)\r\n  let tasks = document.getElementById('tasks')\r\n  tasks.appendChild(column)\r\n  // smooth scroll to the new column\r\n  tasks.scrollTo({\r\n    top: 0,\r\n    left: tasks.clientWidth,\r\n    behavior: 'smooth'\r\n  })\r\n  // close the form\r\n  newColumnToggle = false;\r\n  addColumnForm.reset()\r\n  addColumnForm.classList.remove('active')\r\n\r\n  // IDEALLY REFRESH COUNTER\r\n  // counter(total, cards)\r\n  var newCards = document.querySelectorAll('.cards')\r\n  newCards = newCards[newCards.length - 1]\r\n   \r\n  createNewSortable(newCards);\r\n  // IDEALLY ADD CONTAINER TO SORTABLE\r\n  // sortable.addContainer(newColumn)\r\n\r\n})\r\n// console.log(pizza)\r\nfunction createNewSortable(element) {\r\n  new Sortable(element, {\r\n  group: 'nested',\r\n  animation: 200,\r\n  // fallbackOnBody: true,\r\n  swapThreshold: 0.65,\r\n      ghostClass: 'ghost-card',\r\n      chosenClass: 'chosen-card',\r\n      forceFallback: true,\r\n      onEnd: function (evt) {\r\n        var total = document.querySelectorAll('.total'),\r\n        cards = document.querySelectorAll('.cards')\r\n          total.forEach(function count(object, index) {\r\n            counta = 0;\r\n            for (let i = 0; i < cards[index].querySelectorAll('.card').length; i ++) {\r\n                if (cards[index].querySelectorAll('.card')[i].classList.length == 1) {\r\n                    counta += 1\r\n                }\r\n            }\r\n            // if (cards[index].classList.contains('draggable-container--over')) {\r\n            //     counta += 1;\r\n            // }\r\n            console.log('counter is :' + counta)\r\n            total[index].textContent = counta;\r\n        })\r\n          ////\r\n      }\r\n    })\r\n}\r\n\r\nfunction reupdate() {\r\n var card = document.querySelectorAll('.edit')\r\n//  alert(card.length)\r\nconsole.log(card.length)\r\n// editIcon = document.querySelectorAll('.edit')[0]\r\ncard.forEach(function(object, index) {\r\n    object.addEventListener('click', function() {\r\n      // updateVar()\r\n      console.log('click')\r\n      if (overlayToggle == false) {\r\n        createTaskForm.classList.add('active')\r\n        overlayToggle = true;\r\n      } else if (overlayToggle == true) {\r\n        createTaskForm.classList.remove('active')\r\n        overlayToggle = false;\r\n      }\r\n    })\r\n})\r\n}\r\nreupdate()\r\n\r\n\r\n"],"names":["$e19da54cefdb92cfcc179546114023c9$var$newTask","document","getElementById","querySelectorAll","$e19da54cefdb92cfcc179546114023c9$var$createTaskForm","$e19da54cefdb92cfcc179546114023c9$var$overlayToggle","addEventListener","classList","add","remove","$e19da54cefdb92cfcc179546114023c9$var$Task","constructor","id","name","description","subject","status","priorityRating","estimatedTimeHr","estimatedTimeMin","dueDate","saveStatus","this","addTask","$e19da54cefdb92cfcc179546114023c9$var$taskList","push","updateTask","filter","element","createCard","n","card","createElement","subjectTag","title","timeDetails","timeTag","editIcon","innerHTML","setAttribute","textContent","appendChild","cardContainer","getElementsByClassName","$e19da54cefdb92cfcc179546114023c9$var$reupdate","$e19da54cefdb92cfcc179546114023c9$var$taskDetails","$e19da54cefdb92cfcc179546114023c9$var$task","$e19da54cefdb92cfcc179546114023c9$var$taskName","$e19da54cefdb92cfcc179546114023c9$var$taskDescription","$e19da54cefdb92cfcc179546114023c9$var$taskSubject","$e19da54cefdb92cfcc179546114023c9$var$taskStatus","$e19da54cefdb92cfcc179546114023c9$var$taskPriorityRating","$e19da54cefdb92cfcc179546114023c9$var$taskEstimatedTimeHr","$e19da54cefdb92cfcc179546114023c9$var$taskEstimatedTimeMin","$e19da54cefdb92cfcc179546114023c9$var$taskDueDate","event","preventDefault","console","log","taskID","length","value","statuses","querySelector","checked","reset","$e19da54cefdb92cfcc179546114023c9$var$addColumnForm","$e19da54cefdb92cfcc179546114023c9$var$newColumnToggle","forEach","object","index","column","columnName","columnNameValue","total","cards","tasks","scrollTo","top","left","clientWidth","behavior","newCards","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","forceFallback","onEnd","evt","counta","i"],"version":3,"file":"index.d25fb6fd.js.map"}