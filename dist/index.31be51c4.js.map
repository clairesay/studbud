{"mappings":"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","sources":["./public/js/script.js"],"sourcesContent":["const newTask = document.getElementById('new-task');\r\nvar editTask = document.querySelectorAll('.card');\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nfunction updateColumnNames() {\r\n  var columnNames = document.querySelectorAll('.column-name')\r\n  var statuses = createTaskForm.querySelector('select[name=status]');\r\n  statuses.innerHTML = ''\r\n  columnNames.forEach(function(object) {\r\n    var newOption = document.createElement('option')\r\n    newOption.textContent = object.value\r\n    newOption.value = object.value\r\n    statuses.appendChild(newOption)\r\n  })\r\n}\r\nupdateColumnNames()\r\n\r\n// STACK OVERFLOW https://stackoverflow.com/questions/4880381/check-whether-html-element-has-scrollbars\r\n\r\n// RESIZING CARD WIDTH BASED ON OVERFLOW PROPERTIES TO ACCOUNT FOR SCROLLBAR\r\nfunction cardWidth() {\r\n  editTask.forEach(function(element) {\r\n    var cardContainer = element.parentElement\r\n    var hasVerticalScrollbar = cardContainer.scrollHeight > cardContainer.clientHeight;\r\n    if (hasVerticalScrollbar) {\r\n      element.style.width = 'auto';\r\n      element.style.maxWidth = '90%'; \r\n    } else {\r\n      element.style.width = 'auto';\r\n      cardContainer.style.paddingRight = '36px';\r\n    }\r\n  })\r\n}\r\n\r\n// CREATE A NEW TASK\r\n\r\nvar overlayToggle = false;\r\nnewTask.addEventListener('click', openTaskForm)\r\nfunction openTaskForm(type) {\r\n  console.log('task-form-opened')\r\n    if (type == 'update') {\r\n      createTaskForm.querySelector('h1').textContent = 'Edit an existing task'\r\n      createTaskForm.classList.add('update')\r\n\r\n    } else {\r\n      createTaskForm.querySelector('h1').textContent = 'Create a new task'\r\n      createTaskForm.classList.remove('update')\r\n    }\r\n    if (overlayToggle == false) {\r\n      // check if its an update form if so, reword, and show corresponding buttons :)\r\n      createTaskForm.classList.add('active')\r\n      overlayToggle = true;\r\n      // reupdate()\r\n    } else if (overlayToggle == true) {\r\n      // createTaskForm.classList.remove('update')\r\n      createTaskForm.classList.remove('active')\r\n      createTaskForm.reset()\r\n      overlayToggle = false;\r\n      // reupdate()\r\n    }\r\n}\r\nvar objectValue;\r\nfunction reupdate() {\r\n  console.log('reupdate')\r\n  var card = document.querySelectorAll('.edit')\r\n  console.log('there are ' + card.length + ' cards left')\r\n  card.forEach(function(object, index) {\r\n    object.removeEventListener('click', addAutoFill)\r\n      \r\n    objectValue = object\r\n    object.addEventListener('click', addAutoFill)\r\n  })\r\n }\r\n\r\nfunction addAutoFill() {\r\n  console.log('click')\r\n  autoFill(objectValue)\r\n}\r\n\r\nfunction autoFill(object) {\r\n  console.log('autofill')\r\n  var objectId = object.parentElement.id;\r\n  objectId = objectId.replace('t-', '')\r\n\r\n  for (let i = 0; i < taskList.length; i ++) {\r\n    var thisTask = taskList[i]\r\n    if (thisTask.id == objectId) {\r\n      var taskDetails = createTaskForm.querySelectorAll('form input');\r\n     \r\n      // taskName\r\n      taskDetails[0].value = thisTask.name\r\n      // taskDescription\r\n      taskDetails[1].value = thisTask.description\r\n      // taskSubject \r\n      taskDetails[2].value = thisTask.subject\r\n      //status SELECT THE STATUS\r\n\r\n      var statuses = createTaskForm.querySelector('select[name=status]');\r\n      // statuses.value = thisTask.status\r\n      // console.log(object.parentElement.parentElement.parentElement.query)\r\n      statuses.value = object.parentElement.parentElement.parentElement.querySelector('div.title input.column-name').value\r\n      // 3 is low\r\n      // 4 is mid\r\n      // 5 is high\r\n      if (thisTask.priorityRating == 'Low') {\r\n        taskDetails[3].checked = true\r\n      } else if (thisTask.priorityRating == 'Mid') {\r\n        taskDetails[4].checked = true\r\n      } else if (thisTask.priorityRating == 'High') {\r\n        taskDetails[5].checked = true\r\n      }\r\n      // name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate, saveStatus\r\n      // taskEstimatedTimeHr\r\n      taskDetails[6].value = thisTask.estimatedTimeHr\r\n      // taskEstimatedTimeMin\r\n      taskDetails[7].value = thisTask.estimatedTimeMin\r\n      // taskDueDate\r\n      taskDetails[8].value = thisTask.dueDate\r\n      taskSaveButton.value = objectId\r\n      openTaskForm('update')\r\n\r\n    }\r\n  }\r\n}\r\n\r\n// declaring a class called Task - this ordains the structure for all the elements to go into the class\r\nclass Task {\r\n    // this is what it's made of\r\n    constructor(id, name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate, saveStatus) {\r\n    // constructor(id, name, description, dueDate, priorityRating, estimatedTime, completionStatus, saveStatus) {\r\n      this.id = id;\r\n      this.name = name;\r\n      this.description = description;\r\n      this.subject = subject;\r\n      this.status = status;\r\n      this.priorityRating = priorityRating;\r\n      this.estimatedTimeHr = estimatedTimeHr;\r\n      this.estimatedTimeMin = estimatedTimeMin;\r\n      this.dueDate = dueDate;\r\n\r\n      this.saveStatus = saveStatus;\r\n    }\r\n  \r\n    // this adds tasks to the array taskList\r\n    addTask() {\r\n      taskList.push(this);\r\n      // returns its index\r\n      // return taskList.indexOf(this)\r\n      return this.id\r\n    }\r\n\r\n    updateTask(id) {\r\n      var myObject = taskList.filter(function(element) {\r\n        return element.id == id;\r\n      })\r\n    }\r\n  \r\n    createCard(n) {\r\n      var card = document.createElement('article');\r\n      var subjectTag = document.createElement('span'),\r\n          title = document.createElement('h3'),\r\n          description = document.createElement('p'),\r\n          timeDetails = document.createElement('div'),\r\n              dueDate = document.createElement('h4'),\r\n              timeTag = document.createElement('span'),\r\n          \r\n          editIcon = document.createElement('a')\r\n          editIcon.classList.add('edit') \r\n          editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n      card.classList.add('card')\r\n      card.setAttribute('id', 't-'+ n)\r\n      subjectTag.classList.add('tag')\r\n      subjectTag.classList.add('subject')\r\n      timeDetails.classList.add('time-details')\r\n      timeTag.classList.add('time')\r\n      timeTag.classList.add('tag')\r\n      title.textContent = this.name;\r\n      description.textContent = this.description;\r\n      subjectTag.textContent = this.subject;\r\n      dueDate.textContent = this.dueDate;\r\n      timeTag.textContent = this.estimatedTimeHr + this.estimatedTimeMin;\r\n\r\n      // appending time details to time div\r\n      timeDetails.appendChild(dueDate)\r\n      timeDetails.appendChild(timeTag)\r\n\r\n      // appending everything to whole div\r\n      card.appendChild(subjectTag)\r\n      card.appendChild(title)\r\n      card.appendChild(description)\r\n      card.appendChild(editIcon)\r\n      card.appendChild(timeDetails)\r\n\r\n      // appending card to column\r\n\r\n      var columnNames = document.querySelectorAll('.column-name')\r\n      var cardContainers = document.querySelectorAll('.cards')\r\n      var currentStatus = this.status\r\n      columnNames.forEach(function setColumn(object, index) {\r\n        if (object.value == currentStatus) {\r\n          cardContainers[index].appendChild(card)\r\n        }\r\n      })\r\n      // if (this.status == 'ready') {\r\n      //   cardContainer[0].appendChild(card)\r\n      // } else if (this.status == 'in-progress') {\r\n      //   cardContainer[1].appendChild(card)\r\n      // } else if (this.status == 'done') {\r\n      //   cardContainer[2].appendChild(card)\r\n      // }\r\n      // reupdate()\r\n    }\r\n}\r\n  \r\n// initialising task delete button\r\n// var taskDelete = document.createElement('button')\r\n\r\n// creating an array that will be populated with tasks\r\nvar taskList = [];\r\n\r\n// accessing the full form to create tasks\r\n// var taskForm = document.getElementById('task-form');\r\n\r\n// article to display tasks\r\n// var taskDisplay = document.getElementById('task-display');\r\n\r\n\r\n// selecting the submit button for the form\r\nvar taskSubmitButton = document.getElementById('create-task-submit');\r\nvar taskSaveButton = document.getElementById('edit-task-save');\r\nvar taskCancelButton = document.getElementById('edit-task-cancel');\r\nvar taskDeleteButton = document.getElementById('edit-task-delete');\r\ntaskDeleteButton.addEventListener('click', function(event) {\r\n    var id = parseInt(taskSaveButton.value)\r\n    // console.log('we are in the save button. the id is '+ id)\r\n    // if (id) {\r\n    taskID = id\r\n    for (let i = 0; i < taskList.length; i ++) {\r\n      var oldTask = taskList[i]\r\n      if (oldTask.id == id) {\r\n        taskList.splice(taskList.indexOf(oldTask), 1)\r\n        var oldCard = document.getElementById('t-' + id)\r\n        oldCard.remove();\r\n        taskSaveButton.value = ''\r\n      }\r\n    }\r\n    overlayToggle = false;\r\n    createTaskForm.classList.remove('active')\r\n    createTaskForm.reset();\r\n    counter()\r\n    reupdate()\r\n})\r\ntaskCancelButton.addEventListener('click', function(event) {\r\n  event.preventDefault()\r\n  overlayToggle = false;\r\n  createTaskForm.classList.remove('active')\r\n  createTaskForm.reset();\r\n  reupdate()\r\n})\r\ntaskSaveButton.addEventListener('click', function(event) {\r\n\r\n  event.preventDefault()\r\n  var taskDetails, task, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus;\r\n  // taskDetailer(taskSaveButton.value)\r\n  /////////////////////////////\r\n  // initialising variables\r\n  taskDetails = createTaskForm.querySelectorAll('form input');\r\n\r\n  var id = parseInt(taskSaveButton.value)\r\n  // console.log('we are in the save button. the id is '+ id)\r\n  // if (id) {\r\n  taskID = id\r\n  for (let i = 0; i < taskList.length; i ++) {\r\n    var oldTask = taskList[i]\r\n    if (oldTask.id == id) {\r\n      taskList.splice(taskList.indexOf(oldTask), 1)\r\n      var oldCard = document.getElementById('t-' + id)\r\n      oldCard.remove();\r\n      taskSaveButton.value = ''\r\n    }\r\n  }\r\n  \r\n  // get all of the user input in the input fields\r\n\r\n  taskName = taskDetails[0].value;\r\n  taskDescription = taskDetails[1].value;\r\n  taskSubject = taskDetails[2].value;\r\n  var statuses = createTaskForm.querySelector('select[name=status]');\r\n  taskStatus = statuses.value;\r\n\r\n  // checking the radios \r\n  if (taskDetails[3].checked == true) {\r\n    taskPriorityRating = taskDetails[3].value\r\n  } else if (taskDetails[4].checked == true) {\r\n    taskPriorityRating = taskDetails[4].value\r\n  } else if (taskDetails[5].checked == true) {\r\n    taskPriorityRating = taskDetails[5].value\r\n  }\r\n\r\n  taskEstimatedTimeHr = taskDetails[6].value;\r\n  taskEstimatedTimeMin = taskDetails[7].value;\r\n  taskDueDate = taskDetails[8].value;\r\n  /////////////////////////////\r\n  task = new Task(taskID, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus)\r\n  task.createCard(task.addTask());\r\n  overlayToggle = false;\r\n  createTaskForm.classList.remove('active')\r\n  createTaskForm.reset();\r\n  counter()\r\n  reupdate()\r\n})\r\n// something to populate tasks with on the page\r\n\r\n// on submit:\r\ntaskSubmitButton.addEventListener('click', function(event) {\r\n  event.preventDefault()\r\n  var taskDetails, task, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus;\r\n\r\n  // taskDetailer()\r\n  taskSaveStatus = 'saved';\r\n\r\n  /////////////////////////////\r\n    // initialising variables\r\n    taskDetails = createTaskForm.querySelectorAll('form input');\r\n    taskID = taskList.length\r\n    // get all of the user input in the input fields\r\n  \r\n    taskName = taskDetails[0].value;\r\n    taskDescription = taskDetails[1].value;\r\n    taskSubject = taskDetails[2].value;\r\n    var statuses = createTaskForm.querySelector('select[name=status]');\r\n    taskStatus = statuses.value;\r\n  \r\n    // checking the radios \r\n    if (taskDetails[3].checked == true) {\r\n      taskPriorityRating = taskDetails[3].value\r\n    } else if (taskDetails[4].checked == true) {\r\n      taskPriorityRating = taskDetails[4].value\r\n    } else if (taskDetails[5].checked == true) {\r\n      taskPriorityRating = taskDetails[5].value\r\n    }\r\n  \r\n    taskEstimatedTimeHr = taskDetails[6].value;\r\n    taskEstimatedTimeMin = taskDetails[7].value;\r\n    taskDueDate = taskDetails[8].value;\r\n  /////////////////////////////\r\n  // create a new task using the task class\r\n  task = new Task(taskID, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus)\r\n  // task = new Task(taskID, taskName, taskDescription, taskDueDate, taskPriorityRating, taskEstimatedTime, taskCompletionStatus, taskSaveStatus)\r\n\r\n  // add the task to the task list (repo)\r\n\r\n  // task.printTask(task.addTask());\r\n  task.createCard(task.addTask());\r\n  // create new card with task\r\n  // exit form\r\n  overlayToggle = false;\r\n  createTaskForm.classList.remove('active')\r\n  createTaskForm.reset();\r\n  // print to check\r\n\r\n  counter()\r\n  reupdate()\r\n})\r\n\r\n// getting values of the card for editing\r\n\r\n// //////////////////////////////////////////// ADD COLUMN //////////////////////////////////////////////// //\r\nconst addColumnForm = document.getElementById('add-column-form')\r\nvar newColumnToggle = false;\r\nconst newColumn = document.getElementById('new-column');\r\n\r\n// adding an event listener to bring up the form\r\nnewColumn.addEventListener('click', function() {\r\n  if (newColumnToggle == false) {\r\n    addColumnForm.classList.add('active')\r\n    newColumnToggle = true\r\n  } else if (newColumnToggle == true) {\r\n    addColumnForm.classList.remove('active')\r\n    newColumnToggle = false\r\n  }\r\n})\r\n\r\n// adding an event listener for submitting the column\r\nconst columnSubmitButton = document.getElementById('add-column-submit')\r\ncolumnSubmitButton.addEventListener('click', function(event) {\r\n  event.preventDefault();\r\n\r\n  // creating the column\r\n  let column = document.createElement('div')\r\n  column.classList.add('column')\r\n  let title = document.createElement('div')\r\n  title.classList.add('title')\r\n  let columnName = document.createElement('input')\r\n  columnName.classList.add('column-name')\r\n\r\n  // giving it the name provided by the user\r\n  let columnNameValue = addColumnForm.querySelectorAll('input')[0]\r\n  columnName.value = columnNameValue.value\r\n  let total = document.createElement('h3')\r\n  total.classList.add('total')\r\n  total.textContent = 0;\r\n  let cards = document.createElement('div')\r\n  cards.classList.add('cards')\r\n\r\n  title.appendChild(columnName)\r\n  title.appendChild(total)\r\n  column.appendChild(title)\r\n  column.appendChild(cards)\r\n  let tasks = document.getElementById('tasks')\r\n  tasks.appendChild(column)\r\n  // smooth scroll to the new column\r\n  tasks.scrollTo({\r\n    top: 0,\r\n    left: tasks.clientWidth,\r\n    behavior: 'smooth'\r\n  })\r\n  updateColumnNames()\r\n  // close the form\r\n  newColumnToggle = false;\r\n  addColumnForm.reset()\r\n  addColumnForm.classList.remove('active')\r\n\r\n  var newCards = document.querySelectorAll('.cards')\r\n  newCards = newCards[newCards.length - 1]\r\n  createNewSortable(newCards);\r\n})\r\n\r\nfunction createNewSortable(element) {\r\n  new Sortable(element, {\r\n  group: 'nested',\r\n  animation: 200,\r\n  swapThreshold: 0.65,\r\n      ghostClass: 'ghost-card',\r\n      chosenClass: 'chosen-card',\r\n      forceFallback: true,\r\n      onEnd: function (evt) {\r\n        // console.log(evt.to)\r\n        counter()\r\n\r\n      }\r\n    })\r\n}\r\n\r\nfunction counter() {\r\n  var total = document.querySelectorAll('.total'),\r\n  cards = document.querySelectorAll('.cards')\r\n    total.forEach(function count(object, index) {\r\n      counta = 0;\r\n      for (let i = 0; i < cards[index].querySelectorAll('.card').length; i ++) {\r\n          if (cards[index].querySelectorAll('.card')[i].classList.length == 1) {\r\n              counta += 1\r\n          }\r\n      }\r\n      total[index].textContent = counta;\r\n  })\r\n}"],"names":["$e19da54cefdb92cfcc179546114023c9$var$newTask","document","getElementById","querySelectorAll","$e19da54cefdb92cfcc179546114023c9$var$createTaskForm","$e19da54cefdb92cfcc179546114023c9$var$updateColumnNames","columnNames","statuses","querySelector","innerHTML","forEach","object","newOption","createElement","textContent","value","appendChild","$e19da54cefdb92cfcc179546114023c9$var$objectValue","$e19da54cefdb92cfcc179546114023c9$var$overlayToggle","$e19da54cefdb92cfcc179546114023c9$var$openTaskForm","type","console","log","classList","add","remove","reset","$e19da54cefdb92cfcc179546114023c9$var$reupdate","card","length","index","removeEventListener","$e19da54cefdb92cfcc179546114023c9$var$addAutoFill","addEventListener","objectId","parentElement","id","replace","i","$e19da54cefdb92cfcc179546114023c9$var$taskList","thisTask","taskDetails","name","description","subject","priorityRating","checked","estimatedTimeHr","estimatedTimeMin","dueDate","$e19da54cefdb92cfcc179546114023c9$var$taskSaveButton","$e19da54cefdb92cfcc179546114023c9$var$autoFill","$e19da54cefdb92cfcc179546114023c9$var$Task","constructor","status","saveStatus","this","addTask","push","updateTask","filter","element","createCard","n","subjectTag","title","timeDetails","timeTag","editIcon","setAttribute","cardContainers","currentStatus","$e19da54cefdb92cfcc179546114023c9$var$taskSubmitButton","$e19da54cefdb92cfcc179546114023c9$var$taskCancelButton","event","parseInt","taskID","oldTask","splice","indexOf","$e19da54cefdb92cfcc179546114023c9$var$counter","preventDefault","task","taskName","taskDescription","taskSubject","taskStatus","taskPriorityRating","taskEstimatedTimeHr","taskEstimatedTimeMin","taskDueDate","taskSaveStatus","$e19da54cefdb92cfcc179546114023c9$var$addColumnForm","$e19da54cefdb92cfcc179546114023c9$var$newColumnToggle","total","cards","counta","column","columnName","columnNameValue","tasks","scrollTo","top","left","clientWidth","behavior","newCards","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","forceFallback","onEnd","evt"],"version":3,"file":"index.31be51c4.js.map"}