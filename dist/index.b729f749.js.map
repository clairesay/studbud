{"mappings":"kBAEMA,EAAAA,IAAaC,KAAK,QAAA,CACpBC,SAAAA,CAAW,cAIfC,OAAOC,OAASJ,MAEZK,EAAAA,CAAAA,CAEIC,OAAQ,8EACRC,MAAO,4BACPC,OAAQ,cACRC,UAAW,eAGXH,OAAQ,mFACRC,MAAO,iBACPC,OAAQ,OACRC,UAAW,aAGXH,OAAQ,mFACRC,MAAO,aACPC,OAAQ,iBACRC,UAAW,qBAIbC,EAAcC,SAASC,cAAc,cACvCC,EAAiBH,EAAYE,cAAc,eACzCE,EAAoBJ,EAAYE,cAAc,eAC9CG,EAAiBL,EAAYE,cAAc,aAC3CI,EAAaN,EAAYE,cAAc,SACvCK,EAAgBP,EAAYE,cAAc,gBAoB5CM,EAuEAC,EA1FAC,EAAaV,EAAYE,cAAc,eAM3C,SAAAS,IACQrB,EAAOsB,OACPF,EAAWG,UAAAA,2MAIJvB,EAAOwB,UACdJ,EAAWG,UAAAA,oMASnB,SAAAE,IAEIpB,EAAMqB,SAAQ,SAAUC,EAAMC,OACtBC,EAAelB,SAASmB,cAAc,MACtCC,EAAWpB,SAASmB,cAAc,OAClCvB,EAAQI,SAASmB,cAAc,MAC/BtB,EAASG,SAASmB,cAAc,MAGpCC,EAASC,aAAa,MAAOL,EAAKlB,WAClCF,EAAM0B,YAAcN,EAAKpB,MACzBC,EAAOyB,YAAcN,EAAKnB,OAG1BD,EAAM2B,YAAY1B,GAClBqB,EAAaK,YAAYH,GACzBF,EAAaK,YAAY3B,GACzBO,EAAkBoB,YAAYL,GAG9BA,EAAaM,iBAAiB,SAAS,WAAcC,EAAUR,SAEnEV,EAASR,EAAY2B,iBAAiB,MAgD1C,SAAAD,EAAmBE,EAAGC,GAEdD,GAAKjC,EAAMmC,SACXrB,EAAemB,EAAI,EACnBC,EAAO,WAGXrB,EAAOoB,GAAGG,UAAUC,IAAI,UAExBxB,EAAOQ,SAAQ,SAAUiB,EAAOf,GACxBA,GAASU,GACTK,EAAMF,UAAUG,OAAO,aAI/BzB,EAAemB,MAEXO,EAAcxC,EAAMiC,GAEpBQ,EAAmBnC,SAASoC,eAAe,WAC3CC,EAAkBF,EAAiBlC,cAAc,OACjDqC,EAAeH,EAAiBlC,cAAc,YAC9CsC,EAAgBJ,EAAiBlC,cAAc,aAGnDC,EAAeU,UAAAA,gBAA8BsB,EAAYvC,OAAAA,sBACzD0C,EAAgBhB,aAAa,MAAOa,EAAYpC,WAChDwC,EAAahB,YAAcY,EAAYtC,MACvC2C,EAAcjB,YAAcY,EAAYrC,OAGxCR,EAAOM,OAAAA,CACH6C,KAAM,QACN5C,MAAOsC,EAAYtC,MACnB6C,QAAAA,CAAAA,CAEQC,IAAKR,EAAYvC,UAMjB,WAARiC,IACA7B,EAAYsB,aAAa,SAAU,SAEnChC,EAAOsD,QAEXjC,IA1IJD,EAAWe,iBAAiB,SAAS,WACjCnC,EAAOuD,aACPlC,OA2CJI,IAGAV,EAAeoB,iBAAiB,SAAS,eACjCqB,EAGAA,EADgB,GAAhBrC,EACYd,EAAMmC,OAAS,EAEfrB,EAAe,EAE/BiB,EAAUoB,MAGdxC,EAAWmB,iBAAiB,SAAS,eAC7BqB,EAGAA,EADArC,GAAgBd,EAAMmC,OAAS,EACnB,EAEArB,EAAe,EAE/BiB,EAAUoB,MAIdvC,EAAckB,iBAAiB,SAAS,eAE/BsB,EAAIpD,EAAMmC,OAAS,EAAGiB,EAAI,EAAGA,IAAAA,KAE1BC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IAEpCK,EAAiBzD,EAAMoD,GAC3BpD,EAAMoD,GAAKpD,EAAMqD,GACjBrD,EAAMqD,GAAKI,EAIfhD,EAAkBS,UAAY,GAC9BE,IAEAW,EAAU,MAuDdA,EAAU,EAAG,WAGbpC,EAAO+D,GAAG,WAAW,KACjBrD,EAAYsB,aAAa,SAAU,YAGvChC,EAAO+D,GAAG,SAAS,KACfrD,EAAYsB,aAAa,SAAU,WAGvChC,EAAO+D,GAAG,SAAS,KACf3B,EAAUjB,EAAe,GACzBT,EAAYsB,aAAa,SAAU","sources":["./public/js/music.js"],"sourcesContent":["// Change \"{}\" to your options:\r\n// https://github.com/sampotts/plyr/#options\r\nconst player = new Plyr('audio', {\r\n    controls: ['progress']\r\n});\r\n\r\n// Expose player so it can be used from the console\r\nwindow.player = player;\r\n\r\nvar songs = [\r\n    {\r\n        source: 'https://cdn.plyr.io/static/demo/Kishi_Bashi_-_It_All_Began_With_a_Burst.mp3',\r\n        title: 'It All Began with a Burst',\r\n        artist: 'Kishi Bashi',\r\n        album_art: 'eagles.jpg'\r\n    },\r\n    {\r\n        source: 'https://cdns-preview-d.dzcdn.net/stream/c-deda7fa9316d9e9e880d2c6207e92260-8.mp3',\r\n        title: 'Deezer Preview',\r\n        artist: 'Deez',\r\n        album_art: 'fmac.jpg'\r\n    },\r\n    {\r\n        source: 'https://cdns-preview-0.dzcdn.net/stream/c-02585dc790f2904c4e870cb3bcecfcf3-8.mp3',\r\n        title: '19th Floor',\r\n        artist: 'Bobby Richards',\r\n        album_art: 'eagles.jpg'\r\n    },\r\n]\r\n\r\nconst musicPlayer = document.querySelector('#music')\r\nvar audioContainer = musicPlayer.querySelector('audio')\r\nconst playlistContainer = musicPlayer.querySelector('ul.playlist')\r\nconst previousButton = musicPlayer.querySelector('#previous')\r\nconst nextButton = musicPlayer.querySelector('#next')\r\nconst shuffleButton = musicPlayer.querySelector('#shuffle')\r\nvar playButton = musicPlayer.querySelector('#play-pause')\r\nplayButton.addEventListener('click', function() {\r\n    player.togglePlay()\r\n    buttonIcon()\r\n})\r\n\r\nfunction buttonIcon() {\r\n    if (player.paused) {\r\n        playButton.innerHTML = `                      <svg width=\"17\" height=\"21\" viewBox=\"0 0 17 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M0 0V21L17 10.5L0 0Z\" fill=\"#303030\"/>\r\n        </svg>\r\n        `\r\n    } else if (player.playing) {\r\n        playButton.innerHTML = `    <svg width=\"18\" height=\"22\" viewBox=\"0 0 18 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M0 21.5H6V0.5H0V21.5ZM12 0.5V21.5H18V0.5H12Z\" fill=\"#303030\"/>\r\n    </svg>`\r\n    }\r\n}\r\n\r\nvar tracks;\r\n    // musicStatic = true;\r\n// autopopulating the playlist based on the music available\r\nfunction addMusic() {\r\n    // for each of the songs, create a list item and populate with semantic elements\r\n    songs.forEach(function (song, index) {\r\n        let songListItem = document.createElement('li'),\r\n            albumArt = document.createElement('img'),\r\n            title = document.createElement('h3'),\r\n            artist = document.createElement('h4');\r\n\r\n        // set the source based on the object\r\n        albumArt.setAttribute('src', song.album_art)\r\n        title.textContent = song.title\r\n        artist.textContent = song.artist\r\n\r\n        // append each element to the list item, and then the list to the container\r\n        title.appendChild(artist)\r\n        songListItem.appendChild(albumArt)\r\n        songListItem.appendChild(title)\r\n        playlistContainer.appendChild(songListItem)\r\n\r\n        // add event listener\r\n        songListItem.addEventListener('click', function () { playTrack(index) })\r\n    })\r\n    tracks = musicPlayer.querySelectorAll('li')\r\n}\r\naddMusic()\r\n\r\n// if the user clicks previous butotn \r\npreviousButton.addEventListener('click', function () {\r\n    let songIndex;\r\n    // set the song index to one below, or the last song in the list if the user is at index 0\r\n    if (currentIndex == 0) {\r\n        songIndex = songs.length - 1\r\n    } else {\r\n        songIndex = currentIndex - 1\r\n    }\r\n    playTrack(songIndex)\r\n})\r\n\r\nnextButton.addEventListener('click', function () {\r\n    let songIndex;\r\n    // set the song index to one above, or the first song in the list if the user is at the last song\r\n    if (currentIndex == songs.length - 1) {\r\n        songIndex = 0\r\n    } else {\r\n        songIndex = currentIndex + 1\r\n    }\r\n    playTrack(songIndex)\r\n})\r\n\r\n// if hitting shuffle, this randomises the song array's order.\r\nshuffleButton.addEventListener('click', function () {\r\n    // shuffling array src: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    for (i = songs.length - 1; i > 0; i --) {\r\n        // generate random number\r\n        var j = Math.floor(Math.random() * (i + 1))\r\n        // assign the current item to a random\r\n        var temporaryValue = songs[i]\r\n        songs[i] = songs[j]\r\n        songs[j] = temporaryValue\r\n    }\r\n\r\n    // re-populate the playlist\r\n    playlistContainer.innerHTML = ''\r\n    addMusic()\r\n    // play the first song\r\n    playTrack(0)\r\n})\r\n\r\nvar currentIndex;\r\n// function to play a track\r\nfunction playTrack(n, mode) {\r\n    // if we are at the end of the playlist, stop playing. \r\n    if (n == songs.length) {\r\n        currentIndex = n = 0\r\n        mode = 'initial'\r\n    }\r\n    // adding the appropriate style to the item that is currently playing\r\n    tracks[n].classList.add('active')\r\n    // and removing that class to absolutely everything else\r\n    tracks.forEach(function (track, index) {\r\n        if (index != n) {\r\n            track.classList.remove('active')\r\n        }\r\n    })\r\n    // updating global variable\r\n    currentIndex = n\r\n    // get the current song object\r\n    let currentSong = songs[n]\r\n    // selecting all the current elements\r\n    let currentContainer = document.getElementById('current'),\r\n        currentAlbumArt = currentContainer.querySelector('img'),\r\n        currentTitle = currentContainer.querySelector('h1.title'),\r\n        currentArtist = currentContainer.querySelector('h3.artist')\r\n\r\n    // populate the current container with the appropriate elements\r\n    audioContainer.innerHTML = `<source src=\"` + currentSong.source + `\" type=\"audio/mp3\">`\r\n    currentAlbumArt.setAttribute('src', currentSong.album_art)\r\n    currentTitle.textContent = currentSong.title\r\n    currentArtist.textContent = currentSong.artist\r\n\r\n    // replace the player's source and play\r\n    player.source = {\r\n        type: 'audio',\r\n        title: currentSong.title,\r\n        sources: [\r\n            {\r\n                src: currentSong.source,\r\n            }\r\n        ],\r\n\r\n    };\r\n    // if we are initialising, don't play any music, otherwise, play and set static status to false\r\n    if (mode != 'initial') {\r\n        musicPlayer.setAttribute('static', 'false')\r\n        // musicStatic = false;\r\n        player.play();\r\n    }\r\n    buttonIcon()\r\n\r\n}\r\nplayTrack(0, 'initial')\r\n\r\n// events https://github.com/sampotts/plyr#events\r\nplayer.on('playing', () => {\r\n    musicPlayer.setAttribute('static', 'false')\r\n    // musicStatic = false\r\n})\r\nplayer.on('pause', () => {\r\n    musicPlayer.setAttribute('static', 'true')\r\n    // musicStatic = true\r\n})\r\nplayer.on('ended', () => {\r\n    playTrack(currentIndex + 1)\r\n    musicPlayer.setAttribute('static', 'true')\r\n    // musicStatic = true\r\n});\r\n\r\n\r\n    // if music paused, when user shrinks the container, it goes into standby mode\r\n    // otherwise, if the music continues to play, it goes into peek mode.\r\n    // if the user is in peek mode and pauses it, the music player should remain in peek mode until\r\n    // it is opened and actually paused by the user. \r\n\r\n\r\n"],"names":["$a8b34d36d494f1f42a7ad29c46ad706b$var$player","Plyr","controls","window","player","$a8b34d36d494f1f42a7ad29c46ad706b$var$songs","source","title","artist","album_art","$a8b34d36d494f1f42a7ad29c46ad706b$var$musicPlayer","document","querySelector","$a8b34d36d494f1f42a7ad29c46ad706b$var$audioContainer","$a8b34d36d494f1f42a7ad29c46ad706b$var$playlistContainer","$a8b34d36d494f1f42a7ad29c46ad706b$var$previousButton","$a8b34d36d494f1f42a7ad29c46ad706b$var$nextButton","$a8b34d36d494f1f42a7ad29c46ad706b$var$shuffleButton","$a8b34d36d494f1f42a7ad29c46ad706b$var$tracks","$a8b34d36d494f1f42a7ad29c46ad706b$var$currentIndex","$a8b34d36d494f1f42a7ad29c46ad706b$var$playButton","$a8b34d36d494f1f42a7ad29c46ad706b$var$buttonIcon","paused","innerHTML","playing","$a8b34d36d494f1f42a7ad29c46ad706b$var$addMusic","forEach","song","index","songListItem","createElement","albumArt","setAttribute","textContent","appendChild","addEventListener","$a8b34d36d494f1f42a7ad29c46ad706b$var$playTrack","querySelectorAll","n","mode","length","classList","add","track","remove","currentSong","currentContainer","getElementById","currentAlbumArt","currentTitle","currentArtist","type","sources","src","play","togglePlay","songIndex","i","j","Math","floor","random","temporaryValue","on"],"version":3,"file":"index.b729f749.js.map"}