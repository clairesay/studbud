{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@parcel/scope-hoisting/lib/prelude.js","./public/js/task.js","./public/js/kanban.js","./public/js/task-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","var $parcel$modules = {};\nvar $parcel$bundles = {};\n\nif (parcelRequire == null) {\n  parcelRequire = function(name) {\n    // Execute the bundle wrapper function if there is one registered.\n    if (name in $parcel$bundles) {\n      let wrapper = $parcel$bundles[name];\n      delete $parcel$bundles[name];\n      wrapper();\n    }\n\n    if (name in $parcel$modules) {\n      return $parcel$modules[name];\n    }\n\n    // Try the node require function if it exists.\n    // Do not use `require` to prevent Webpack from trying to bundle this call\n    if (typeof module !== 'undefined' && typeof module.require === 'function') {\n      return module.require(name);\n    }\n\n    var err = new Error(\"Cannot find module '\" + name + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, exports) {\n    $parcel$modules[id] = exports;\n  };\n\n  parcelRequire.registerBundle = function registerBundle(id, fn) {\n    $parcel$bundles[id] = fn;\n    $parcel$modules[id] = {};\n  };\n\n  $parcel$global[parcelRequireName] = parcelRequire;\n}\n","// declaring a class called Task - this ordains the structure for all the elements to go into the class\r\nclass Task {\r\n    \r\n    // this is what it's made of\r\n    constructor(id, name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate, taskList) {\r\n\r\n        this.months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.subject = subject;\r\n        this.status = status;\r\n        this.priorityRating = priorityRating;\r\n        this.estimatedTimeHr = estimatedTimeHr;\r\n        this.estimatedTimeMin = estimatedTimeMin;\r\n        this.dueDate = dueDate;\r\n\r\n        this.taskList = taskList\r\n    }\r\n\r\n    // this adds tasks to the array taskList\r\n    addTask() {\r\n        this.taskList.push(this);\r\n        return this.id\r\n    }\r\n\r\n    // making sure the column 'deletable' status is updated when a new card is added.\r\n    updateColumnDelete() {\r\n        let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n        allDeleteColumnButtons.forEach( function(button) {\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = button.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n    \r\n            if (columns.length > 3 && cards.length == 0) {\r\n                button.classList.remove('disabled')\r\n            } else if (columns.length <= 3 || cards.length > 0) {\r\n                button.classList.add('disabled')\r\n            }\r\n        })\r\n    }\r\n\r\n    // this creates a new card and applies it to the kanban board\r\n    createCard(n) {\r\n        // initialising new elements\r\n        let card = document.createElement('article'),\r\n            subjectTag = document.createElement('span'),\r\n            title = document.createElement('h3'),\r\n            description = document.createElement('p'),\r\n            timeDetails = document.createElement('div'),\r\n            dueDate = document.createElement('h4'),\r\n            timeTag = document.createElement('span'),\r\n            editIcon = document.createElement('a'),\r\n            timeIcon = document.createElement('div'),\r\n            line = document.createElement('HR');\r\n\r\n        // setting classes and attributes\r\n        editIcon.classList.add('edit')\r\n        editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n\r\n        // time icon has been replaced with a priority rating\r\n        timeIcon.style.width = '12px'\r\n        timeIcon.style.height = '12px'\r\n        timeIcon.style.borderRadius = '12px'\r\n        if (this.priorityRating == 'Low') {\r\n            timeIcon.style.backgroundColor = '#70B815'\r\n        } else if (this.priorityRating == 'Mid') {\r\n            timeIcon.style.backgroundColor = '#E5C44C'\r\n        } else if (this.priorityRating == 'High') {\r\n            timeIcon.style.backgroundColor = '#F59273'\r\n        }\r\n        // timeIcon.innerHTML = `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        // <path d=\"M9.99 3.05176e-05C4.47 3.05176e-05 0 4.48003 0 10C0 15.52 4.47 20 9.99 20C15.52 20 20 15.52 20 10C20 4.48003 15.52 3.05176e-05 9.99 3.05176e-05ZM10 18C5.58 18 2 14.42 2 10C2 5.58003 5.58 2.00003 10 2.00003C14.42 2.00003 18 5.58003 18 10C18 14.42 14.42 18 10 18Z\" fill=\"#909090\"/>\r\n        // <path d=\"M10.5 5.00003H9V11L14.25 14.15L15 12.92L10.5 10.25V5.00003Z\" fill=\"#909090\"/>\r\n        // </svg>`\r\n        card.classList.add('card')\r\n        card.setAttribute('id', 't-' + n)\r\n        subjectTag.classList.add('tag')\r\n        subjectTag.classList.add('subject')\r\n        timeDetails.classList.add('time-details')\r\n        timeTag.classList.add('time')\r\n        timeTag.classList.add('tag')\r\n\r\n        // setting values\r\n        title.textContent = this.name;\r\n        description.textContent = this.description;\r\n        subjectTag.textContent = this.subject;\r\n        if (this.subject.length == 0) {\r\n            subjectTag.style.border = 'none';\r\n        }\r\n\r\n        if (this.dueDate.length != 0) {\r\n            let dueDateElements = this.dueDate.split('-')\r\n            let month = this.months[parseInt(dueDateElements[1]) - 1]\r\n            let day = dueDateElements[2]\r\n            dueDate.textContent = 'Due ' + day + ' ' + month\r\n        } else {\r\n            dueDate.textContent = ''\r\n        }\r\n\r\n\r\n        // concatenating hour and minute estimated time durations\r\n        if (this.estimatedTimeHr > 0 && this.estimatedTimeMin > 0) {\r\n            timeTag.textContent = this.estimatedTimeHr + ' HR ' + this.estimatedTimeMin + ' MIN';\r\n        } else if (this.estimatedTimeHr == 0 && this.estimatedTimeMin > 0) {\r\n            timeTag.textContent = this.estimatedTimeMin + ' MIN';\r\n        } else if (this.estimatedTimeHr > 0 && this.estimatedTimeMin == 0) {\r\n            timeTag.textContent = this.estimatedTimeHr + ' HR';\r\n        } else {\r\n            timeTag.textContent = '∞'\r\n        }\r\n\r\n\r\n        // appending time details to time div\r\n        timeDetails.appendChild(timeIcon)\r\n        timeDetails.appendChild(dueDate)\r\n        timeDetails.appendChild(timeTag)\r\n\r\n        // appending everything to whole div\r\n        card.appendChild(subjectTag)\r\n        card.appendChild(title)\r\n        card.appendChild(description)\r\n        card.appendChild(line)\r\n        card.appendChild(timeDetails)\r\n        card.appendChild(editIcon)\r\n\r\n        // appending card to column\r\n        let columnNames = document.querySelectorAll('.column-name')\r\n        let cardContainers = document.querySelectorAll('.cards')\r\n        let currentStatus = this.status\r\n        columnNames.forEach(function setColumn(object, index) {\r\n            if (object.value == currentStatus) {\r\n                cardContainers[index].appendChild(card)\r\n            }\r\n        })\r\n\r\n        this.updateColumnDelete();\r\n    }\r\n}\r\n\r\nexport default Task","// counts how many cards are in a kanban column\r\nexport function countCards() {\r\n    let total = document.querySelectorAll('.total'),\r\n        cardContainers = document.querySelectorAll('.cards'),\r\n        columns = document.querySelectorAll('.column'),\r\n        cards = document.getElementsByClassName('card')\r\n\r\n    // const emptyStateMessage = document.getElementById('empty-state-message')\r\n        \r\n    // // if there are no cards, add an empty state\r\n    // if (cards.length == 0) {\r\n    //     columns[0].appendChild(emptyStateMessage)\r\n    //     emptyStateMessage.style.display = 'flex';\r\n    // } else {\r\n    //     emptyStateMessage.style.display = 'none';\r\n    // }\r\n\r\n    // writing the total number of cards at the head of each column\r\n    total.forEach(function count(object, index) {\r\n        let cardCount = 0;\r\n        for (let i = 0; i < cardContainers[index].querySelectorAll('.card').length; i ++) {\r\n            if (cardContainers[index].querySelectorAll('.card')[i].classList.length == 1) {\r\n                cardCount += 1\r\n            }\r\n        }\r\n        total[index].textContent = cardCount;\r\n    })\r\n}\r\ncountCards()\r\n\r\n// Setting sortable functionality to the cards with the sortable.js library\r\nexport function sortability() {\r\n    let cardContainers = document.querySelectorAll('.cards')\r\n    console.log('number of cardContainers is' + cardContainers.length)\r\n    cardContainers.forEach(function(element) {\r\n        new Sortable(element, {\r\n            group: 'nested',\r\n            animation: 200,\r\n            swapThreshold: 0.65,\r\n            ghostClass: 'ghost-card',\r\n            chosenClass: 'chosen-card',\r\n            dragClass: \"sortable-drag\",\r\n            forceFallback: true,\r\n            onStart: function (/**Event*/evt) {\r\n                let itemEl = evt.item;\r\n                itemEl.style.cursor = 'grabbing'\r\n\r\n                let body = document.getElementsByTagName('body')[0]\r\n                body.style.cursor = 'grabbing'\r\n                evt.oldIndex;  // element index within parent\r\n            },\r\n            onEnd: function (evt) {\r\n\r\n                let itemEl = evt.item;\r\n                itemEl.style.cursor = 'grab'\r\n                let body = document.getElementsByTagName('body')[0]\r\n                body.style.cursor = 'initial'\r\n\r\n                countCards()\r\n                // ADD COLUMN DELETE UPDATE\r\n                let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n                allDeleteColumnButtons.forEach( function(button) {\r\n                    let columns = document.getElementsByClassName('column')\r\n                    let column = button.parentElement.parentElement\r\n                    let cards = column.querySelectorAll('.card')\r\n                    \r\n                    if (columns.length > 3 && cards.length == 0) {\r\n                        button.classList.remove('disabled')\r\n                    } else if (columns.length <= 3) {\r\n                        button.classList.add('disabled') \r\n                    } else if (cards.length > 0) {\r\n                        button.classList.add('disabled')\r\n                        \r\n                    }\r\n                })\r\n            },\r\n        });\r\n    })\r\n}\r\nsortability()\r\n\r\n// setting sortable functionality to the columns with the sortable.js library\r\nvar deviceSize\r\n////////// MEDIA QUERIES https://www.w3schools.com/howto/howto_js_media_queries.asp ///////////////\r\nfunction mediaQuery(x) {\r\n    if (x.matches) { // If media query matches\r\n      deviceSize = 'mobile'\r\n    } else {\r\n      deviceSize = 'desktop'\r\n    }\r\n}\r\n\r\nvar x = window.matchMedia(\"(max-width: 700px)\")\r\nmediaQuery(x) // Call listener function at run time\r\nx.addEventListener('change', mediaQuery) // Attach listener function on state changes\r\n\r\nvar tasks = document.getElementById('tasks')\r\nif (deviceSize == 'mobile') {\r\n\r\n} else {\r\n    new Sortable(tasks, {\r\n        animation: 150,\r\n        swapThreshold: 0.8,\r\n        ghostClass: 'ghost-column',\r\n        chosenClass: 'chosen-column',\r\n        dragClass: \"sortable-drag\",\r\n        forceFallback: true\r\n    });\r\n}\r\n","import Task from './task'\r\nimport * as kanban from './kanban'\r\n\r\nvar subjectsList = []\r\n// subject should not duplicate\r\n\r\n// var tags = document.querySelector('input[name=subject]')\r\n// // TAGIFYING\r\n// var tagify1 = new Tagify(tags, {\r\n//     maxTags           : 1,\r\n//     mode : \"select\",\r\n//     whitelist: subjectsList,\r\n//     dropdown : {\r\n//         classname     : \"color-blue\",\r\n//         enabled       : 0,              // show the dropdown immediately on focus\r\n//         maxItems      : 5,\r\n//         position      : \"text\",         // place the dropdown near the typed text\r\n//         closeOnSelect : false,          // keep the dropdown open after selecting a suggestion\r\n//         highlightFirst: true\r\n//     }\r\n// })\r\n\r\n// function to generate a random colour\r\n// https://yaireo.github.io/tagify/#section-mix\r\nfunction getRandomColor(){\r\n    function rand(min, max) {\r\n        return min + Math.random() * (max - min);\r\n    }\r\n\r\n    var h = rand(1, 360)|0,\r\n        s = rand(40, 70)|0,\r\n        l = rand(65, 72)|0;\r\n\r\n    return 'hsl(' + h + ',' + s + '%,' + l + '%)';\r\n}\r\n\r\n// opening or closing the task form and changing its type\r\nfunction toggleTaskForm(type) {\r\n    // check if its an update form if so, reword, and show corresponding buttons :)\r\n    if (type == 'update') {\r\n        createTaskForm.querySelector('h1').textContent = 'Edit task'\r\n        createTaskForm.classList.add('update')\r\n    } else {\r\n        createTaskForm.querySelector('h1').textContent = 'Create new task'\r\n        createTaskForm.classList.remove('update')\r\n    }\r\n\r\n    if (formVisible == false) {\r\n        createTaskForm.classList.add('active')\r\n        formVisible = true;\r\n        modalBackground.style.display = 'flex'\r\n    } else if (formVisible == true) {\r\n        createTaskForm.classList.remove('active')\r\n        formVisible = false;\r\n        modalBackground.style.display = 'none'\r\n        createTaskForm.reset()\r\n        taskSaveButton.value = ''\r\n\r\n        kanban.countCards()\r\n        kanban.sortability()\r\n    }\r\n}\r\n\r\n// adding event listeners to edit buttons \r\nfunction reupdate() {\r\n    // each card has an edit button that allows users to reaccess and update task details\r\n    let editButtons = document.querySelectorAll('.edit')\r\n    editButtons.forEach(function (editButton) {\r\n\r\n        // if there hasn't been a listener previously attached, attach one\r\n        if (editButton.getAttribute('listener') !== 'true') {\r\n            editButton.addEventListener('click', addAutoFill)\r\n            editButton.setAttribute('listener', 'true')\r\n        }\r\n        function addAutoFill() {\r\n            autoFillTaskDetails(editButton)\r\n        }\r\n    })\r\n}\r\n\r\n// autopopulates the form with existing task data previously inputted by user\r\nfunction autoFillTaskDetails(object) {\r\n    let objectId = object.parentElement.id;\r\n    objectId = objectId.replace('t-', '')\r\n\r\n    // for each element in the task list already\r\n    taskList.forEach(function(task) {\r\n\r\n        let thisTask = task\r\n        if (thisTask.id == objectId) {\r\n            let taskDetails = createTaskForm.querySelectorAll('form input');\r\n            let textArea = createTaskForm.querySelector('textarea')\r\n            // taskName\r\n            taskDetails[0].value = thisTask.name\r\n            // taskDescription\r\n            textArea.value = thisTask.description\r\n            // taskDetails[].value = thisTask.description\r\n            // taskSubject \r\n            taskDetails[1].value = thisTask.subject\r\n\r\n            // taskStatus\r\n            let statuses = createTaskForm.querySelector('select[name=status]');\r\n            statuses.value = object.parentElement.parentElement.parentElement.querySelector('div.title input.column-name').value\r\n\r\n            // taskPriorityRating\r\n            if (thisTask.priorityRating == 'Low') {\r\n                taskDetails[2].checked = true\r\n            } else if (thisTask.priorityRating == 'Mid') {\r\n                taskDetails[3].checked = true\r\n            } else if (thisTask.priorityRating == 'High') {\r\n                taskDetails[4].checked = true\r\n            }\r\n            \r\n            // taskEstimatedTimeHr\r\n            taskDetails[5].value = thisTask.estimatedTimeHr\r\n            // taskEstimatedTimeMin\r\n            taskDetails[6].value = thisTask.estimatedTimeMin\r\n            // taskDueDate\r\n            taskDetails[7].value = thisTask.dueDate\r\n\r\n            taskSaveButton.value = thisTask.id\r\n            toggleTaskForm('update')\r\n        }\r\n    })\r\n}\r\n\r\n// getting all of the task details inputted by the user\r\nfunction getTaskDetails(taskDetails) {\r\n    let name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate;\r\n\r\n    name = taskDetails[0].value;\r\n    let textArea = createTaskForm.querySelector('textarea')\r\n    description = textArea.value\r\n    // description = taskDetails[1].value;\r\n    subject = taskDetails[1].value;\r\n    \r\n    let statuses = createTaskForm.querySelector('select[name=status]');\r\n    status = statuses.value;\r\n\r\n    // checking the radios \r\n    if (taskDetails[2].checked == true) {\r\n        priorityRating = taskDetails[2].value\r\n    } else if (taskDetails[3].checked == true) {\r\n        priorityRating = taskDetails[3].value\r\n    } else if (taskDetails[4].checked == true) {\r\n        priorityRating = taskDetails[4].value\r\n    }\r\n\r\n    estimatedTimeHr = taskDetails[5].value;\r\n    estimatedTimeMin = taskDetails[6].value;\r\n    dueDate = taskDetails[7].value;\r\n\r\n    return {name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate}\r\n}\r\n\r\n///////\r\nvar taskList = []\r\nconst newTask = document.getElementById('new-task');\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nconst modalBackground = document.getElementById('modal-background')\r\nvar formVisible = false;\r\n\r\n// create a new task\r\nnewTask.addEventListener('click', toggleTaskForm)\r\n\r\n// adding event listeners to the form buttons.\r\nconst taskSaveButton = document.getElementById('task-save')\r\nconst taskCancelButton = document.getElementById('edit-task-cancel');\r\nconst taskCloseButton = taskCancelButton.nextElementSibling;\r\nconst taskDeleteButton = document.getElementById('edit-task-delete');\r\n\r\n// deleting a task\r\ntaskDeleteButton.addEventListener('click', function () {\r\n    let id = parseInt(taskSaveButton.value)\r\n\r\n    for (let i = 0; i < taskList.length; i++) {\r\n        let oldTask = taskList[i]\r\n        if (oldTask.id == id) {\r\n            taskList.splice(taskList.indexOf(oldTask), 1)\r\n            let oldCard = document.getElementById('t-' + id)\r\n            oldCard.remove();\r\n        }\r\n    }\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\n\r\n// cancelling the creation of a task or button\r\ntaskCancelButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\ntaskCloseButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\n\r\n// saving a new task or updating\r\ntaskSaveButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n\r\n    // depends whether we are updating or creating a task\r\n    let taskID;\r\n    if (createTaskForm.classList.contains('update')) {\r\n        taskID = parseInt(taskSaveButton.value)\r\n        for (let i = 0; i < taskList.length; i++) {\r\n            var oldTask = taskList[i]\r\n            if (oldTask.id == taskID) {\r\n                taskList.splice(taskList.indexOf(oldTask), 1)\r\n                let oldCard = document.getElementById('t-' + taskID)\r\n                oldCard.remove();\r\n                taskSaveButton.value = ''\r\n            }\r\n        }\r\n    } else {\r\n        taskID = Date.now()\r\n    }\r\n\r\n    // initialising variables\r\n    let taskDetails = createTaskForm.querySelectorAll('form input');\r\n    // get all of the user input in the input fields\r\n    let task = getTaskDetails(taskDetails)\r\n    \r\n    // create a new task using the task class\r\n    let newTask = new Task(taskID, task.name, task.description, task.subject, task.status, task.priorityRating, task.estimatedTimeHr, task.estimatedTimeMin, task.dueDate, taskList)\r\n    // append to taskList and create new card with task\r\n    newTask.createCard(newTask.addTask());\r\n\r\n    // append subject to subject list\r\n    subjectsList.push(task.subject)\r\n\r\n    // close the form and add event listeners to any new items\r\n    console.log(subjectsList)\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\n\r\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$export","e","n","v","Object","defineProperty","get","enumerable","$parcel$modules","$parcel$bundles","parcelRequire","name","wrapper","module","require","err","Error","code","register","id","exports","registerBundle","fn","parcelRequireName","$02b9e2c5d0bd51a4eedd6b8bd9d15b20$export$default","constructor","description","subject","status","priorityRating","estimatedTimeHr","estimatedTimeMin","dueDate","taskList","this","months","addTask","push","updateColumnDelete","document","querySelectorAll","forEach","button","columns","getElementsByClassName","cards","parentElement","length","classList","remove","add","createCard","card","createElement","subjectTag","title","timeDetails","timeTag","editIcon","timeIcon","line","innerHTML","style","width","height","borderRadius","backgroundColor","setAttribute","textContent","border","dueDateElements","split","month","parseInt","day","appendChild","columnNames","cardContainers","currentStatus","object","index","value","$6d9e305e14d7bdf2393ec8188bda1b8e$var$deviceSize","$6d9e305e14d7bdf2393ec8188bda1b8e$export$countCards","total","cardCount","i","$6d9e305e14d7bdf2393ec8188bda1b8e$export$sortability","console","log","element","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","dragClass","forceFallback","onStart","evt","item","cursor","getElementsByTagName","oldIndex","onEnd","$6d9e305e14d7bdf2393ec8188bda1b8e$var$mediaQuery","x","matches","$6d9e305e14d7bdf2393ec8188bda1b8e$var$x","matchMedia","addEventListener","$6d9e305e14d7bdf2393ec8188bda1b8e$var$tasks","getElementById","$57ecf8e20857430314e333011d0feca6$var$subjectsList","$57ecf8e20857430314e333011d0feca6$var$toggleTaskForm","type","$57ecf8e20857430314e333011d0feca6$var$createTaskForm","querySelector","$57ecf8e20857430314e333011d0feca6$var$formVisible","$57ecf8e20857430314e333011d0feca6$var$modalBackground","display","reset","$57ecf8e20857430314e333011d0feca6$var$taskSaveButton","$57ecf8e20857430314e333011d0feca6$var$reupdate","editButton","getAttribute","objectId","replace","$57ecf8e20857430314e333011d0feca6$var$taskList","task","thisTask","taskDetails","textArea","checked","$57ecf8e20857430314e333011d0feca6$var$autoFillTaskDetails","$57ecf8e20857430314e333011d0feca6$var$newTask","$57ecf8e20857430314e333011d0feca6$var$taskCancelButton","$57ecf8e20857430314e333011d0feca6$var$taskCloseButton","nextElementSibling","oldTask","splice","indexOf","event","taskID","preventDefault","contains","Date","now","$57ecf8e20857430314e333011d0feca6$var$getTaskDetails","newTask"],"version":3,"file":"index.27ecd52a.js.map"}