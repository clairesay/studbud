{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@parcel/scope-hoisting/lib/prelude.js","./public/js/task.js","./public/js/kanban.js","./public/js/task-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","var $parcel$modules = {};\nvar $parcel$bundles = {};\n\nif (parcelRequire == null) {\n  parcelRequire = function(name) {\n    // Execute the bundle wrapper function if there is one registered.\n    if (name in $parcel$bundles) {\n      let wrapper = $parcel$bundles[name];\n      delete $parcel$bundles[name];\n      wrapper();\n    }\n\n    if (name in $parcel$modules) {\n      return $parcel$modules[name];\n    }\n\n    // Try the node require function if it exists.\n    // Do not use `require` to prevent Webpack from trying to bundle this call\n    if (typeof module !== 'undefined' && typeof module.require === 'function') {\n      return module.require(name);\n    }\n\n    var err = new Error(\"Cannot find module '\" + name + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, exports) {\n    $parcel$modules[id] = exports;\n  };\n\n  parcelRequire.registerBundle = function registerBundle(id, fn) {\n    $parcel$bundles[id] = fn;\n    $parcel$modules[id] = {};\n  };\n\n  $parcel$global[parcelRequireName] = parcelRequire;\n}\n","const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n// declaring a class called Task - this ordains the structure for all the elements to go into the class\r\nclass Task {\r\n    \r\n    // this is what it's made of\r\n    constructor(id, name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate, taskList) {\r\n\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.subject = subject;\r\n        this.status = status;\r\n        this.priorityRating = priorityRating;\r\n        this.estimatedTimeHr = estimatedTimeHr;\r\n        this.estimatedTimeMin = estimatedTimeMin;\r\n        this.dueDate = dueDate;\r\n\r\n        // array of tasks\r\n        this.taskList = taskList\r\n    }\r\n\r\n    // this adds tasks to the array taskList\r\n    addTask() {\r\n        this.taskList.push(this);\r\n        return this.id\r\n    }\r\n\r\n    // this creates a new card and applies it to the kanban board\r\n    createCard(n) {\r\n        // initialising new elements\r\n        let card = document.createElement('article'),\r\n            subjectTag = document.createElement('span'),\r\n            title = document.createElement('h3'),\r\n            description = document.createElement('p'),\r\n            informationDiv = document.createElement('div'),\r\n            timeDetails = document.createElement('div'),\r\n            dueDate = document.createElement('h4'),\r\n            timeTag = document.createElement('span'),\r\n            editIcon = document.createElement('a'),\r\n            timeIcon = document.createElement('div'),\r\n            line = document.createElement('HR');\r\n\r\n        // setting classes and attributes\r\n        editIcon.classList.add('edit')\r\n        editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n\r\n        // time icon has been replaced with a priority rating - the priority is ranked in traffic light colors from green to red\r\n        timeIcon.style.width = '12px'\r\n        timeIcon.style.height = '12px'\r\n        timeIcon.style.borderRadius = '12px'\r\n        if (this.priorityRating == 'Low') {\r\n            timeIcon.style.backgroundColor = '#70B815'\r\n        } else if (this.priorityRating == 'Mid') {\r\n            timeIcon.style.backgroundColor = '#E5C44C'\r\n        } else if (this.priorityRating == 'High') {\r\n            timeIcon.style.backgroundColor = '#F59273'\r\n        }\r\n        \r\n        // setting relevant attributes\r\n        card.classList.add('card')\r\n        card.setAttribute('id', 't-' + n)\r\n        subjectTag.classList.add('tag')\r\n        subjectTag.classList.add('subject')\r\n        timeDetails.classList.add('time-details')\r\n        timeTag.classList.add('time')\r\n        timeTag.classList.add('tag')\r\n\r\n        // setting values\r\n        title.textContent = this.name;\r\n        description.textContent = this.description;\r\n        subjectTag.textContent = this.subject;\r\n\r\n        // if there is a due date, reformat for display on the cards\r\n        if (this.dueDate.length != 0) {\r\n            let dueDateElements = this.dueDate.split('-')\r\n            let month = months[parseInt(dueDateElements[1]) - 1]\r\n            let day = dueDateElements[2]\r\n            dueDate.textContent = 'Due ' + day + ' ' + month\r\n        } else {\r\n            dueDate.textContent = 'No due date'\r\n        }\r\n\r\n        // concatenating hour and minute estimated time durations\r\n        if (this.estimatedTimeHr > 0 && this.estimatedTimeMin > 0) {\r\n            timeTag.textContent = this.estimatedTimeHr + ' HR ' + this.estimatedTimeMin + ' MIN';\r\n        } else if (this.estimatedTimeHr == 0 && this.estimatedTimeMin > 0) {\r\n            timeTag.textContent = this.estimatedTimeMin + ' MIN';\r\n        } else if (this.estimatedTimeHr > 0 && this.estimatedTimeMin == 0) {\r\n            timeTag.textContent = this.estimatedTimeHr + ' HR';\r\n        } else {\r\n            timeTag.textContent = '∞'\r\n        }\r\n\r\n        // appending time details to time div\r\n        timeDetails.appendChild(timeIcon)\r\n        timeDetails.appendChild(dueDate)\r\n        timeDetails.appendChild(timeTag)\r\n\r\n        // appending everything to whole div\r\n        // if (this.subject.length != 0) {\r\n            card.appendChild(subjectTag)\r\n        // }\r\n        \r\n        informationDiv.appendChild(title)\r\n        informationDiv.appendChild(description)\r\n        // card.appendChild(title)\r\n        // card.appendChild(description)\r\n        card.appendChild(informationDiv)\r\n        card.appendChild(line)\r\n        card.appendChild(timeDetails)\r\n        card.appendChild(editIcon)\r\n\r\n        // appending card to column\r\n        let columnNames = document.querySelectorAll('.column-name')\r\n        let cardContainers = document.querySelectorAll('.cards')\r\n        let currentStatus = this.status\r\n        columnNames.forEach(function setColumn(object, index) {\r\n            if (object.value == currentStatus) {\r\n                cardContainers[index].appendChild(card)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default Task","// counts how many cards are in a kanban column\r\nexport function countCards() {\r\n    let total = document.querySelectorAll('.total'),\r\n        cardContainers = document.querySelectorAll('.cards'),\r\n        columns = document.querySelectorAll('.column'),\r\n        cards = document.getElementsByClassName('card');\r\n\r\n    let emptyStateMessage = document.getElementById('empty-state-tasks');\r\n    // if there are no cards, add an empty state message, otherwise remove it.\r\n    if (cards.length == 0) {\r\n        cardContainers[0].appendChild(emptyStateMessage)\r\n        emptyStateMessage.style.display = 'flex';\r\n    } else {\r\n        columns[0].appendChild(emptyStateMessage)\r\n        emptyStateMessage.style.display = 'none';\r\n    }\r\n\r\n    // writing the total number of cards at the head of each column\r\n    total.forEach(function count(object, index) {\r\n        let cardCount = 0;\r\n        for (let i = 0; i < cardContainers[index].querySelectorAll('.card').length; i ++) {\r\n            if (cardContainers[index].querySelectorAll('.card')[i].classList.length == 1) {\r\n                cardCount += 1\r\n            }\r\n        }\r\n        total[index].textContent = cardCount;\r\n    })\r\n}\r\ncountCards()\r\n\r\n// Setting sortable functionality to the cards with the sortable.js library\r\nexport function sortability() {\r\n    // applying sortability to the children of each .cards container\r\n    let cardContainers = document.querySelectorAll('.cards')\r\n    cardContainers.forEach(function(element) {\r\n        new Sortable(element, {\r\n            group: 'nested',\r\n            animation: 200,\r\n            swapThreshold: 0.65,\r\n            ghostClass: 'ghost-card',\r\n            chosenClass: 'chosen-card',\r\n            dragClass: \"sortable-drag\",\r\n            filter: '.filtered', // 'filtered' class is not draggable\r\n            forceFallback: true,\r\n\r\n            onStart: function (evt) {\r\n                // setting the cursor to grabbing while user is holding card\r\n                let itemEl = evt.item;\r\n                itemEl.style.cursor = 'grabbing'\r\n\r\n                let body = document.getElementsByTagName('body')[0]\r\n                body.style.cursor = 'grabbing'\r\n            },\r\n\r\n            onEnd: function (evt) {\r\n                // setting the cursor to grab \r\n                let itemEl = evt.item;\r\n                itemEl.style.cursor = 'grab'\r\n                \r\n                // reset cursor to normal arrow\r\n                let body = document.getElementsByTagName('body')[0]\r\n                body.style.cursor = 'initial'\r\n\r\n                // recount all the cards in each column and update their totals\r\n                countCards()\r\n\r\n                // set enabled/disabled status to each of the buttons after the reallocation happened\r\n                let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n                allDeleteColumnButtons.forEach( function(button) {\r\n                    let columns = document.getElementsByClassName('column')\r\n                    let column = button.parentElement.parentElement\r\n                    let cards = column.querySelectorAll('.card')\r\n                    \r\n                    // ensuring there are mroe than 3 columns and no cards within the column\r\n                    if (columns.length > 3 && cards.length == 0) {\r\n                        button.classList.remove('disabled')\r\n                    } else if (columns.length <= 3) {\r\n                        button.classList.add('disabled') \r\n                    } else if (cards.length > 0) {\r\n                        button.classList.add('disabled')\r\n                    }\r\n                })\r\n            },\r\n        });\r\n    })\r\n}\r\n\r\nsortability()","import Task from './task'\r\nimport * as kanban from './kanban'\r\n\r\nvar subjectList = []\r\n\r\n// suggested subjects should not be duplicated\r\nfunction updateSubjectList() {\r\n    // check the task list for each subject\r\n    taskList.forEach(function(task) {\r\n        let taskSubject = task.subject.trim().toUpperCase()\r\n        let duplicate = false\r\n        // if the subject already exists in the subjectlist, its a duplicate so don't push\r\n        for (i in subjectList) {\r\n            if (subjectList[i] == taskSubject) {\r\n                duplicate = true\r\n            }\r\n        }\r\n        // otherwise, it's a unique subject, save to datalist --> user be recommended subjects they have already inputted when creating new tasks\r\n        if (duplicate == false) {\r\n            subjectList.push(taskSubject)\r\n        }\r\n    })\r\n\r\n    // actually setting the options in the subjectlist\r\n    let subjectOptions = document.querySelector('datalist#subject')\r\n    subjectOptions.innerHTML = ''\r\n    subjectList.forEach(function(subject) {\r\n        let option = document.createElement('option')\r\n        option.textContent = subject\r\n        subjectOptions.appendChild(option)\r\n    })\r\n}\r\n\r\n// opening or closing the task form and changing its type\r\nfunction toggleTaskForm(type) {\r\n    // clearing validate text and resetting required status\r\n    validateText.innerHTML = ''\r\n    createTaskForm.querySelector('input').removeAttribute('required')\r\n\r\n    // check if its an update form if so, reword, and show corresponding buttons :)\r\n    if (type == 'update') {\r\n        createTaskForm.querySelector('h1').textContent = 'Edit task'\r\n        createTaskForm.classList.add('update')\r\n    } else {\r\n        createTaskForm.querySelector('h1').textContent = 'Create new task'\r\n        createTaskForm.classList.remove('update')\r\n    }\r\n\r\n    // check if we're closing or opening the form\r\n    if (formVisible == false) {\r\n        createTaskForm.classList.add('active')\r\n        formVisible = true;\r\n        modalBackground.style.display = 'flex'\r\n    } else if (formVisible == true) {\r\n        createTaskForm.classList.remove('active')\r\n        formVisible = false;\r\n        modalBackground.style.display = 'none'\r\n        createTaskForm.reset()\r\n        taskSaveButton.value = ''\r\n\r\n        kanban.countCards()\r\n        kanban.sortability()\r\n    }\r\n}\r\n\r\n// adding event listeners to edit buttons \r\nfunction reupdate() {\r\n    // each card has an edit button that allows users to reaccess and update task details\r\n    let editButtons = document.querySelectorAll('.edit')\r\n    editButtons.forEach(function (editButton) {\r\n\r\n        // if there hasn't been a listener previously attached, attach one\r\n        if (editButton.getAttribute('listener') !== 'true') {\r\n            editButton.addEventListener('click', addAutoFill)\r\n            editButton.setAttribute('listener', 'true')\r\n        }\r\n        function addAutoFill() {\r\n            autoFillTaskDetails(editButton)\r\n        }\r\n    })\r\n}\r\n\r\n// autopopulates the form with existing task data previously inputted by user\r\nfunction autoFillTaskDetails(object) {\r\n    let objectId = object.parentElement.id;\r\n    objectId = objectId.replace('t-', '')\r\n\r\n    // for each element in the task list already\r\n    taskList.forEach(function(task) {\r\n        let thisTask = task\r\n        if (thisTask.id == objectId) {\r\n            let taskDetails = createTaskForm.querySelectorAll('form input');\r\n            let textArea = createTaskForm.querySelector('textarea')\r\n            // taskName\r\n            taskDetails[0].value = thisTask.name\r\n            // taskDescription\r\n            textArea.value = thisTask.description\r\n            // taskSubject \r\n            taskDetails[1].value = thisTask.subject\r\n\r\n            // taskStatus\r\n            let statuses = createTaskForm.querySelector('select[name=status]');\r\n            statuses.value = object.parentElement.parentElement.parentElement.querySelector('div.title input.column-name').value\r\n\r\n            // taskPriorityRating\r\n            if (thisTask.priorityRating == 'Low') {\r\n                taskDetails[2].checked = true\r\n            } else if (thisTask.priorityRating == 'Mid') {\r\n                taskDetails[3].checked = true\r\n            } else if (thisTask.priorityRating == 'High') {\r\n                taskDetails[4].checked = true\r\n            }\r\n            \r\n            // taskEstimatedTimeHr\r\n            taskDetails[5].value = thisTask.estimatedTimeHr\r\n            // taskEstimatedTimeMin\r\n            taskDetails[6].value = thisTask.estimatedTimeMin\r\n            // taskDueDate\r\n            taskDetails[7].value = thisTask.dueDate\r\n\r\n            taskSaveButton.value = thisTask.id\r\n            toggleTaskForm('update')\r\n        }\r\n    })\r\n}\r\n\r\n//updating disabled/enabled status for all buttons\r\nfunction enableButtons() {\r\n    let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n    allDeleteColumnButtons.forEach( function(button) {\r\n        let columns = document.getElementsByClassName('column')\r\n        let column = button.parentElement.parentElement\r\n        let cards = column.querySelectorAll('.card')\r\n        // checking for more than 3 columns and no cards within column\r\n        if (columns.length > 3 && cards.length == 0) {\r\n            button.classList.remove('disabled')\r\n        } else if (columns.length <= 3 || cards.length > 0) {\r\n            button.classList.add('disabled')\r\n        }\r\n    })\r\n}\r\n\r\n// getting all of the task details inputted by the user\r\nfunction getTaskDetails(taskDetails) {\r\n    let name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate;\r\n\r\n    name = taskDetails[0].value;\r\n    let textArea = createTaskForm.querySelector('textarea')\r\n    description = textArea.value\r\n    subject = taskDetails[1].value;\r\n    \r\n    let statuses = createTaskForm.querySelector('select[name=status]');\r\n    status = statuses.value;\r\n\r\n    // checking the radios \r\n    if (taskDetails[2].checked == true) {\r\n        priorityRating = taskDetails[2].value\r\n    } else if (taskDetails[3].checked == true) {\r\n        priorityRating = taskDetails[3].value\r\n    } else if (taskDetails[4].checked == true) {\r\n        priorityRating = taskDetails[4].value\r\n    }\r\n\r\n    // estimated time\r\n    estimatedTimeHr = taskDetails[5].value;\r\n    estimatedTimeMin = taskDetails[6].value;\r\n    dueDate = taskDetails[7].value;\r\n\r\n    // return all input values from the form\r\n    return {name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate}\r\n}\r\n\r\n// selecting relevant elements\r\nvar taskList = []\r\nconst newTask = document.getElementById('new-task');\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nconst modalBackground = document.getElementById('modal-background')\r\nvar formVisible = false;\r\n\r\n// create a new task\r\nnewTask.addEventListener('click', toggleTaskForm)\r\n\r\n// adding event listeners to the form buttons.\r\nconst taskSaveButton = document.getElementById('task-save')\r\nconst taskCancelButton = document.getElementById('edit-task-cancel');\r\nconst taskCloseButton = taskCancelButton.nextElementSibling;\r\nconst taskDeleteButton = document.getElementById('edit-task-delete');\r\n\r\n// cancelling the creation of a task without saving\r\ntaskCancelButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\ntaskCloseButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\n\r\n// deleting a task\r\ntaskDeleteButton.addEventListener('click', function () {\r\n    let id = parseInt(taskSaveButton.value)\r\n    // iterate through existing elements in the task list and remove the match\r\n    for (let i = 0; i < taskList.length; i++) {\r\n        let oldTask = taskList[i]\r\n        if (oldTask.id == id) {\r\n            taskList.splice(taskList.indexOf(oldTask), 1)\r\n            let oldCard = document.getElementById('t-' + id)\r\n            oldCard.remove();\r\n        }\r\n    }\r\n    // reset form and other functionality\r\n    toggleTaskForm()\r\n    reupdate()\r\n    enableButtons()\r\n    updateSubjectList()\r\n})\r\n\r\nvar validateText = createTaskForm.querySelector('.validate-message')\r\n// saving a new task or updating\r\ntaskSaveButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n\r\n    // initialising variables\r\n    let taskDetails = createTaskForm.querySelectorAll('form input');\r\n    // get all of the user input in the input fields\r\n    let task = getTaskDetails(taskDetails)\r\n\r\n    // if there isn't at least a task name included in the form input, prevent form submission - ask for user to input name\r\n    if (task.name == '') {\r\n        taskDetails[0].setAttribute('required', 'true')\r\n        validateText.innerHTML = 'Please enter a task name to save this task.'\r\n    } else {\r\n        // depends whether we are updating or creating a task\r\n        // if updating, replace old content at the same ID \r\n        let taskID;\r\n        if (createTaskForm.classList.contains('update')) {\r\n            taskID = parseInt(taskSaveButton.value)\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                var oldTask = taskList[i]\r\n                if (oldTask.id == taskID) {\r\n                    taskList.splice(taskList.indexOf(oldTask), 1)\r\n                    let oldCard = document.getElementById('t-' + taskID)\r\n                    oldCard.remove();\r\n                    taskSaveButton.value = ''\r\n                }\r\n            }\r\n        // otherwise, create a new ID\r\n        } else {\r\n            taskID = Date.now()\r\n        }\r\n        // create a new task using the task class\r\n        let newTask = new Task(taskID, task.name, task.description, task.subject, task.status, task.priorityRating, task.estimatedTimeHr, task.estimatedTimeMin, task.dueDate, taskList)\r\n        // append to taskList and create new card with task\r\n        newTask.createCard(newTask.addTask());\r\n\r\n        // close the form and add event listeners to any new items\r\n        toggleTaskForm()\r\n        reupdate()\r\n        enableButtons()\r\n        // update subjects\r\n        updateSubjectList()\r\n    }\r\n})\r\n\r\n// if user chooses to create new task through CTA in empty state message, open form like user clicked on top right hand CTA\r\nvar emptyStateButton = document.querySelector('#empty-state-tasks button')\r\nemptyStateButton.addEventListener('click', function() {\r\n    if (deviceSize != 'desktop') {\r\n        // counter click for the 'buttons container dropdown'\r\n        document.querySelector('#task-buttons button.icon').click()\r\n    }\r\n    newTask.click()\r\n})"],"names":["$parcel$global","globalThis","self","window","global","$parcel$export","e","n","v","Object","defineProperty","get","enumerable","$parcel$modules","$parcel$bundles","parcelRequire","name","wrapper","module","require","err","Error","code","register","id","exports","registerBundle","fn","parcelRequireName","$02b9e2c5d0bd51a4eedd6b8bd9d15b20$var$months","$02b9e2c5d0bd51a4eedd6b8bd9d15b20$export$default","constructor","description","subject","status","priorityRating","estimatedTimeHr","estimatedTimeMin","dueDate","taskList","this","addTask","push","createCard","card","document","createElement","subjectTag","title","informationDiv","timeDetails","timeTag","editIcon","timeIcon","line","classList","add","innerHTML","style","width","height","borderRadius","backgroundColor","setAttribute","textContent","length","dueDateElements","split","month","parseInt","day","appendChild","columnNames","querySelectorAll","cardContainers","currentStatus","forEach","object","index","value","$6d9e305e14d7bdf2393ec8188bda1b8e$export$countCards","total","columns","cards","getElementsByClassName","emptyStateMessage","getElementById","display","cardCount","i","$6d9e305e14d7bdf2393ec8188bda1b8e$export$sortability","element","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","dragClass","filter","forceFallback","onStart","evt","item","cursor","getElementsByTagName","onEnd","button","parentElement","remove","$57ecf8e20857430314e333011d0feca6$var$subjectList","$57ecf8e20857430314e333011d0feca6$var$updateSubjectList","$57ecf8e20857430314e333011d0feca6$var$taskList","task","taskSubject","trim","toUpperCase","duplicate","subjectOptions","querySelector","option","$57ecf8e20857430314e333011d0feca6$var$toggleTaskForm","type","$57ecf8e20857430314e333011d0feca6$var$validateText","$57ecf8e20857430314e333011d0feca6$var$createTaskForm","removeAttribute","$57ecf8e20857430314e333011d0feca6$var$formVisible","$57ecf8e20857430314e333011d0feca6$var$modalBackground","reset","$57ecf8e20857430314e333011d0feca6$var$taskSaveButton","$57ecf8e20857430314e333011d0feca6$var$reupdate","editButton","getAttribute","addEventListener","objectId","replace","thisTask","taskDetails","textArea","checked","$57ecf8e20857430314e333011d0feca6$var$autoFillTaskDetails","$57ecf8e20857430314e333011d0feca6$var$enableButtons","$57ecf8e20857430314e333011d0feca6$var$newTask","$57ecf8e20857430314e333011d0feca6$var$taskCancelButton","$57ecf8e20857430314e333011d0feca6$var$taskCloseButton","nextElementSibling","$57ecf8e20857430314e333011d0feca6$var$taskDeleteButton","oldTask","splice","indexOf","event","preventDefault","$57ecf8e20857430314e333011d0feca6$var$getTaskDetails","taskID","contains","Date","now","newTask","deviceSize","click"],"version":3,"file":"index.fdc9d0ed.js.map"}