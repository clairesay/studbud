{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./public/js/column.js","./public/js/column-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","class Column {\r\n    constructor(id, name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    updateColumns() {\r\n        let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n        allDeleteColumnButtons.forEach( function(button) {\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = button.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n    \r\n            if (columns.length > 3 && cards.length == 0) {\r\n                button.classList.remove('disabled')\r\n            } else if (columns.length <= 3 || cards.length > 0) {\r\n                button.classList.add('disabled')\r\n            }\r\n        })\r\n\r\n        // REMOVING OPTIONS FROM DROPDOWN FOR STATUSES\r\n        const createTaskForm = document.getElementById('create-task-form')\r\n        // function updateColumnNames() {\r\n        let columnNames = document.querySelectorAll('.column-name')\r\n        let statuses = createTaskForm.querySelector('select[name=status]');\r\n        statuses.innerHTML = ''\r\n        columnNames.forEach(function (object) {\r\n            let newOption = document.createElement('option')\r\n            newOption.textContent = object.value\r\n            newOption.value = object.value\r\n            statuses.appendChild(newOption)\r\n        })\r\n        // }\r\n    }\r\n\r\n    editColumn(editColumnButton) {\r\n\r\n        function updateColumns() {\r\n            let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n            allDeleteColumnButtons.forEach( function(button) {\r\n                let columns = document.getElementsByClassName('column')\r\n                let column = button.parentElement.parentElement\r\n                let cards = column.querySelectorAll('.card')\r\n        \r\n                if (columns.length > 3 && cards.length == 0) {\r\n                    button.classList.remove('disabled')\r\n                } else if (columns.length <= 3 || cards.length > 0) {\r\n                    button.classList.add('disabled')\r\n                }\r\n            })\r\n    \r\n            // REMOVING OPTIONS FROM DROPDOWN FOR STATUSES\r\n            const createTaskForm = document.getElementById('create-task-form')\r\n            // function updateColumnNames() {\r\n            let columnNames = document.querySelectorAll('.column-name')\r\n            let statuses = createTaskForm.querySelector('select[name=status]');\r\n            statuses.innerHTML = ''\r\n            columnNames.forEach(function (object) {\r\n                let newOption = document.createElement('option')\r\n                newOption.textContent = object.value\r\n                newOption.value = object.value\r\n                statuses.appendChild(newOption)\r\n            })\r\n        }\r\n       \r\n        let column = editColumnButton.parentElement\r\n        let columnNameInput = column.querySelector('input.column-name')\r\n        columnNameInput.addEventListener('change', function(event) {\r\n            updateColumns()\r\n        })\r\n        columnNameInput.addEventListener('keyup', function(event) {\r\n            if (event.key === 'Enter') {\r\n                columnNameInput.blur()\r\n            }\r\n            updateColumns()\r\n        })\r\n        \r\n        editColumnButton.addEventListener('click', function() {\r\n            // columnNameInput.setAttribute('disabled', true)\r\n            columnNameInput.focus()\r\n        })\r\n\r\n        const columnEditToolTip = document.querySelector('div.tooltip#edit')\r\n        editColumnButton.addEventListener('mouseover', function() {\r\n            editColumnButton.parentElement.appendChild(columnEditToolTip)\r\n        })\r\n    }\r\n\r\n    deleteColumn(deleteColumnButton) {\r\n        // allow delete functionality for most columns as long as there are at least 3 and there are no cards in the column\r\n        deleteColumnButton.addEventListener('click', function() {\r\n            alert('new delete button clicked')\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = deleteColumnButton.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n            if (columns.length > 3 && cards.length == 0) {\r\n                column.remove()\r\n                // this.updateColumns();\r\n                /////////////\r\n                let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n                allDeleteColumnButtons.forEach( function(button) {\r\n                    let columns = document.getElementsByClassName('column')\r\n                    let column = button.parentElement.parentElement\r\n                    let cards = column.querySelectorAll('.card')\r\n            \r\n                    if (columns.length > 3 && cards.length == 0) {\r\n                        button.classList.remove('disabled')\r\n                    } else if (columns.length <= 3 || cards.length > 0) {\r\n                        button.classList.add('disabled')\r\n                    }\r\n                })\r\n        \r\n                // REMOVING OPTIONS FROM DROPDOWN FOR STATUSES\r\n                const createTaskForm = document.getElementById('create-task-form')\r\n                // function updateColumnNames() {\r\n                let columnNames = document.querySelectorAll('.column-name')\r\n                let statuses = createTaskForm.querySelector('select[name=status]');\r\n                statuses.innerHTML = ''\r\n                columnNames.forEach(function (object) {\r\n                    let newOption = document.createElement('option')\r\n                    newOption.textContent = object.value\r\n                    newOption.value = object.value\r\n                    statuses.appendChild(newOption)\r\n                })\r\n                ////////////\r\n            }\r\n        })\r\n\r\n        const columnDeleteToolTip = document.querySelector('div.tooltip#delete')\r\n        deleteColumnButton.addEventListener('mouseover', function() {\r\n            deleteColumnButton.parentElement.appendChild(columnDeleteToolTip)\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = deleteColumnButton.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n\r\n            if (columns.length > 3 && cards.length == 0) {\r\n                deleteColumnButton.classList.remove('disabled')\r\n            } else if (columns.length <= 3 || cards.length > 0) {\r\n                deleteColumnButton.classList.add('disabled')\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    createColumn() {\r\n        // creating the column\r\n        let column = document.querySelector('div.column')\r\n        column = column.cloneNode(true)\r\n\r\n        let columnName = column.querySelector('input.column-name')\r\n        columnName.value = this.name;\r\n        let editButton = column.querySelector('svg.edit-column')\r\n        let deleteButton = column.querySelector('svg.delete-column')\r\n\r\n        let total = column.querySelector('h3.total')\r\n        total.textContent = 0;\r\n        let cards = column.querySelectorAll('.card')\r\n        cards.forEach(function (card) {\r\n            card.remove()\r\n        })\r\n\r\n        // let column = document.createElement('div')\r\n        // column.classList.add('column')\r\n        // let title = document.createElement('div')\r\n        // title.classList.add('title')\r\n        // let columnName = document.createElement('input')\r\n        // columnName.classList.add('column-name')\r\n        // columnName.value = this.name\r\n\r\n        // let editButton = document.querySelector('svg.edit-column')\r\n        // editButton = editButton.cloneNode(true)\r\n        \r\n        // let deleteButton = document.querySelector('svg.delete-column')\r\n        // deleteButton = deleteButton.cloneNode(true)\r\n\r\n        // let total = document.createElement('h3')\r\n        // total.classList.add('total')\r\n        // total.textContent = 0;\r\n        // let cards = document.createElement('div')\r\n        // cards.classList.add('cards')\r\n    \r\n        // title.appendChild(columnName)\r\n\r\n        // title.appendChild(total)\r\n        // title.appendChild(editButton)\r\n\r\n        // title.appendChild(deleteButton)\r\n\r\n        // column.appendChild(title)\r\n        // column.appendChild(cards)\r\n\r\n        let tasks = document.getElementById('tasks')\r\n        tasks.appendChild(column)\r\n\r\n        this.editColumn(editButton)\r\n        this.deleteColumn(deleteButton)\r\n        this.updateColumns()\r\n\r\n        // smooth scroll to the new column\r\n        tasks.scrollTo({\r\n            top: 0,\r\n            left: tasks.clientWidth,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default Column","import Column from './column'\r\nimport * as kanbanA from './kanban'\r\n// import * as columnValidate from './column-validate'\r\n// var validator = new FormValidator('column', [{\r\n//     name: 'columnName',\r\n//     display: 'Column Name',\r\n//     rules: 'min_length[8]'\r\n//   }], function(errors, event) {\r\n//       alert('bro')\r\n//       if (errors.length > 0) {\r\n//         // Show the errors\r\n        \r\n//         var displayErrors = document.getElementById('selfRegMessage');\r\n//         var errorString = '';        \r\n//         for (var i = 0; i < errors.length; i++) {\r\n//           errorString += errors[i].message + '<br />';\r\n//         }\r\n//         displayErrors.innerHTML = errorString;\r\n//       }\r\n//   });\r\n\r\n//   console.log(validator)\r\n\r\n\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nfunction updateColumnNames() {\r\n    let columnNames = document.querySelectorAll('.column-name')\r\n    let statuses = createTaskForm.querySelector('select[name=status]');\r\n    statuses.innerHTML = ''\r\n    columnNames.forEach(function (object) {\r\n        let newOption = document.createElement('option')\r\n        newOption.textContent = object.value\r\n        newOption.value = object.value\r\n        statuses.appendChild(newOption)\r\n    })\r\n}\r\nupdateColumnNames()\r\n\r\nconst modalBackground = document.getElementById('modal-background')\r\nconst addColumnForm = document.getElementById('add-column-form')\r\nvar newColumnToggle = false;\r\nconst newColumn = document.getElementById('new-column');\r\n\r\nfunction toggleColumnForm() {\r\n    if (newColumnToggle == false) {\r\n        addColumnForm.classList.add('active')\r\n        newColumnToggle = true\r\n        modalBackground.style.display = 'flex'\r\n    } else if (newColumnToggle == true) {\r\n        addColumnForm.classList.remove('active')\r\n        addColumnForm.reset()\r\n        newColumnToggle = false\r\n        modalBackground.style.display = 'none'\r\n    }\r\n}\r\n\r\nfunction createNewSortable() {\r\n    let newCard = document.querySelectorAll('.cards')\r\n    newCard = newCard[newCard.length - 1]\r\n    new Sortable(newCard, {\r\n        group: 'nested',\r\n        animation: 200,\r\n        swapThreshold: 0.65,\r\n        ghostClass: 'ghost-card',\r\n        chosenClass: 'chosen-card',\r\n        dragClass: \"sortable-drag\",\r\n        forceFallback: true,\r\n        onEnd: function (evt) {\r\n            kanbanA.countCards()\r\n            // kanbanA.sortability()\r\n        }\r\n    })\r\n}\r\n\r\n// adding an event listener to bring up the form\r\nnewColumn.addEventListener('click', toggleColumnForm)\r\n\r\n// adding an event listener for submitting the column\r\nconst columnCancelButton = document.getElementById('add-column-cancel')\r\nconst columnCloseButton = columnCancelButton.nextElementSibling\r\n// columnCancelButton.querySelector('~ button.form-close')\r\ncolumnCancelButton.addEventListener('click', function() {\r\n    toggleColumnForm()\r\n})\r\ncolumnCloseButton.addEventListener('click', function() {\r\n    toggleColumnForm()\r\n})\r\n\r\nconst columnSubmitButton = document.getElementById('add-column-submit')\r\ncolumnSubmitButton.addEventListener('click', function (event) {\r\n    event.preventDefault();\r\n\r\n    let id = Date.now()\r\n    let name = addColumnForm.querySelector('input').value\r\n\r\n    let col = new Column(id, name)\r\n    col.createColumn()\r\n\r\n    updateColumnNames()\r\n\r\n    toggleColumnForm()\r\n\r\n    createNewSortable();\r\n    // kanbanA.sortability()\r\n})\r\n\r\n// //////////// COLUMN BUTTONS\r\nconst columnDeleteToolTip = document.querySelector('div.tooltip#delete')\r\nconst columnEditToolTip = document.querySelector('div.tooltip#edit')\r\nconst columnTitles = document.querySelectorAll('div.title')\r\ncolumnTitles.forEach(function(columnTitle) {\r\n    let editColumnButton = columnTitle.querySelector('svg.edit-column')\r\n    let deleteColumnButton = columnTitle.querySelector('svg.delete-column')\r\n    let columnNameInput = columnTitle.querySelector('input.column-name')\r\n\r\n    editColumnButton.addEventListener('click', function() {\r\n        // columnNameInput.removeAttribute('disabled')\r\n        columnNameInput.focus()\r\n    })\r\n    columnNameInput.addEventListener('change', function(event) {\r\n        updateColumnNames();\r\n        console.log('changed')\r\n    })\r\n    columnNameInput.addEventListener('keyup', function(event) {\r\n        if (event.key === 'Enter') {\r\n            columnNameInput.blur()\r\n        }\r\n        updateColumnNames();\r\n    })\r\n    editColumnButton.addEventListener('mouseover', function() {\r\n        editColumnButton.parentElement.appendChild(columnEditToolTip)\r\n    })\r\n\r\n    deleteColumnButton.addEventListener('click', function() {\r\n        // alert('original button clicked')\r\n        let columns = document.getElementsByClassName('column')\r\n        let column = columnTitle.parentElement\r\n        let cards = column.querySelectorAll('.card')\r\n        if (columns.length > 3 && cards.length == 0) {\r\n            column.remove()\r\n            updateColumnNames()\r\n        }\r\n        let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n        allDeleteColumnButtons.forEach( function(button) {\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = button.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n    \r\n            if (columns.length > 3 && cards.length == 0) {\r\n                button.classList.remove('disabled')\r\n            } else if (columns.length <= 3 || cards.length > 0) {\r\n                button.classList.add('disabled')\r\n            }\r\n        })\r\n    })\r\n\r\n    deleteColumnButton.addEventListener('mouseover', function() {\r\n        // alert('original button hovered')\r\n        let columns = document.getElementsByClassName('column')\r\n        let column = columnTitle.parentElement\r\n        let cards = column.querySelectorAll('.card')\r\n        deleteColumnButton.parentElement.appendChild(columnDeleteToolTip)\r\n        if (columns.length > 3 && cards.length == 0) {\r\n            deleteColumnButton.classList.remove('disabled')\r\n        } else if (columns.length <= 3 || cards.length > 0) {\r\n            deleteColumnButton.classList.add('disabled')\r\n        }\r\n    })\r\n})\r\n\r\n// var \r\n// let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n// allDeleteColumnButtons.forEach(function(button) {\r\n//     button.addEventListener('mouseover', function() {\r\n//         let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n//         allDeleteColumnButtons.forEach( function(button) {\r\n//             let columns = document.getElementsByClassName('column')\r\n//             let column = button.parentElement.parentElement\r\n//             let cards = column.querySelectorAll('.card')\r\n    \r\n//             if (columns.length > 3 && cards.length == 0) {\r\n//                 button.classList.remove('disabled')\r\n//             } else if (columns.length <= 3 || cards.length > 0) {\r\n//                 button.classList.add('disabled')\r\n//             }\r\n//         })\r\n//     })\r\n// })\r\n"],"names":["globalThis","self","window","global","$8b38702613a783d21a2f250d3e1ed6dd$export$default","constructor","id","name","this","updateColumns","document","querySelectorAll","forEach","button","columns","getElementsByClassName","cards","parentElement","length","classList","remove","add","createTaskForm","getElementById","columnNames","statuses","querySelector","innerHTML","object","newOption","createElement","textContent","value","appendChild","editColumn","editColumnButton","columnNameInput","addEventListener","event","key","blur","focus","columnEditToolTip","deleteColumn","deleteColumnButton","alert","column","columnDeleteToolTip","createColumn","cloneNode","editButton","deleteButton","card","tasks","scrollTo","top","left","clientWidth","behavior","$a969fc4719ba336d4874bd6e736e73f1$var$createTaskForm","$a969fc4719ba336d4874bd6e736e73f1$var$updateColumnNames","$a969fc4719ba336d4874bd6e736e73f1$var$modalBackground","$a969fc4719ba336d4874bd6e736e73f1$var$addColumnForm","$a969fc4719ba336d4874bd6e736e73f1$var$newColumnToggle","$a969fc4719ba336d4874bd6e736e73f1$var$toggleColumnForm","style","display","reset","$a969fc4719ba336d4874bd6e736e73f1$var$columnCancelButton","$a969fc4719ba336d4874bd6e736e73f1$var$columnCloseButton","nextElementSibling","preventDefault","Date","now","col","newCard","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","dragClass","forceFallback","onEnd","evt","$a969fc4719ba336d4874bd6e736e73f1$var$createNewSortable","$a969fc4719ba336d4874bd6e736e73f1$var$columnDeleteToolTip","$a969fc4719ba336d4874bd6e736e73f1$var$columnEditToolTip","columnTitle","console","log"],"version":3,"file":"index.aa8bb93a.js.map"}