{"mappings":"YAEA,SAAAA,QACQC,EAAQC,SAASC,iBAAiB,UACtCC,EAAQF,SAASC,iBAAiB,UAGlCF,EAAMI,SAAQ,SAAeC,EAAQC,GACjCC,OAAS,UACAC,EAAI,EAAGA,EAAIL,EAAMG,GAAOJ,iBAAiB,SAASO,OAAQD,IACG,GAA9DL,EAAMG,GAAOJ,iBAAiB,SAASM,GAAGE,UAAUD,SACpDF,QAAU,GAOlBP,EAAMM,GAAOK,YAAcJ,UAGnCR,IAgBYE,SAASC,iBAAiB,UAChCE,SAAQ,SAASQ,OAEfC,SAASD,EAAAA,CACfE,MAAO,SACPC,UAAW,IAEXC,cAAe,IACTC,WAAY,aACZC,YAAa,cACbC,eAAe,EACfC,MAAO,SAAUC,GAEbtB,IAEAuB,QAAQC,IAAIF,EAAIG,GAAGC,cAAcC,cAAc,+BAA+BC,OACjEN,EAAIO,eAczBC,EAAQ5B,SAAS6B,eAAe,aAChCjB,SAASgB,EAAAA,CAETd,UAAW,IAEXC,cAAe,GACfC,WAAY,eACZC,YAAa,gBACbC,eAAe","sources":["./public/js/kanban.js"],"sourcesContent":["// DRAGGABLE FUNCTIONALITY\r\n\r\nfunction counter() {\r\n    var total = document.querySelectorAll('.total'),\r\n    cards = document.querySelectorAll('.cards')\r\n\r\n\r\n    total.forEach(function count(object, index) {\r\n        counta = 0;\r\n        for (let i = 0; i < cards[index].querySelectorAll('.card').length; i ++) {\r\n            if (cards[index].querySelectorAll('.card')[i].classList.length == 1) {\r\n                counta += 1\r\n            }\r\n        }\r\n        // if (cards[index].classList.contains('draggable-container--over')) {\r\n        //     counta += 1;\r\n        // }\r\n        // console.log('counter is :' + counta)\r\n        total[index].textContent = counta;\r\n    })\r\n}\r\ncounter()\r\n// function createNewSortable(element) {\r\n//     new Sortable(element, {\r\n// \t\tgroup: 'nested',\r\n// \t\tanimation: 200,\r\n// \t\t// fallbackOnBody: true,\r\n// \t\tswapThreshold: 0.65,\r\n//         ghostClass: 'ghost-card',\r\n//         chosenClass: 'chosen-card',\r\n//         forceFallback: true,\r\n//         onEnd: function (evt) {\r\n//             counter(total, cards)\r\n//             var itemEl = evt.item;\r\n//         }\r\n//       })\r\n// }\r\nvar cards = document.querySelectorAll('.cards')\r\ncards.forEach(function(element) {\r\n    // var sortable = Sortable.create(element)\r\n    new Sortable(element, {\r\n\t\tgroup: 'nested',\r\n\t\tanimation: 200,\r\n\t\t// fallbackOnBody: true,\r\n\t\tswapThreshold: 0.65,\r\n        ghostClass: 'ghost-card',\r\n        chosenClass: 'chosen-card',\r\n        forceFallback: true,\r\n        onEnd: function (evt) {\r\n            // console.log(total.length)\r\n            counter()\r\n            // var newColumn = evt.to.parentElement.querySelector('div.title input.column-name').value\r\n            console.log(evt.to.parentElement.querySelector('div.title input.column-name').value)\r\n            var itemEl = evt.item;  // dragged HTMLElement\r\n            // evt.to;    // target list\r\n            // evt.from;  // previous list\r\n            // evt.oldIndex;  // element's old index within old parent\r\n            // evt.newIndex;  // element's new index within new parent\r\n            // evt.oldDraggableIndex; // element's old index within old parent, only counting draggable elements\r\n            // evt.newDraggableIndex; // element's new index within new parent, only counting draggable elements\r\n            // evt.clone // the clone element\r\n            // evt.pullMode;  // when item is in another sortable: `\"clone\"` if cloning, `true` if moving\r\n        },\r\n    \r\n\t});\r\n\r\n})\r\nvar tasks = document.getElementById('tasks')\r\nnew Sortable(tasks, {\r\n    // group: 'nested',\r\n    animation: 150,\r\n    // fallbackOnBody: true,\r\n    swapThreshold: 0.8,\r\n    ghostClass: 'ghost-column',\r\n    chosenClass: 'chosen-column',\r\n    forceFallback: true\r\n});\r\n// var sortable = Sortable.create(el);\r\n// var sortable;\r\n// // function createDraggability() {\r\n// sortable = new Draggable.Sortable(\r\n//     document.querySelectorAll('.cards'), {\r\n//         draggable: 'article.card',\r\n//         autoScroll: 1\r\n//     },\r\n\r\n// )\r\n// sortable.on('sortable:start', () => {\r\n//     console.log('sortable:start')\r\n\r\n// })\r\n// sortable.on('sortable:sort', () => {\r\n//     console.log('sortable:sort')\r\n// })\r\n// sortable.on('sortable:sorted', () => {\r\n//     console.log('sortable:sorted')\r\n// })\r\n\r\n// sortable.on('sortable:stop', () => {\r\n//     console.log('sortable:stop')\r\n//     counter(total, cards)\r\n//     // cardWidth()\r\n// })\r\n\r\n    // editIcon.addEventListener('click', function(event) {\r\n    //     updateVar()\r\n    //     alert('yo')\r\n    //     console.log('clicked')\r\n    //     if (overlayToggle == false) {\r\n    //       createTaskForm.classList.add('active')\r\n    //       overlayToggle = true;\r\n    //     } else if (overlayToggle == true) {\r\n    //       createTaskForm.classList.remove('active')\r\n    //       overlayToggle = false;\r\n    //     }\r\n    // })"],"names":["$6d9e305e14d7bdf2393ec8188bda1b8e$var$counter","total","document","querySelectorAll","cards","forEach","object","index","counta","i","length","classList","textContent","element","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","forceFallback","onEnd","evt","console","log","to","parentElement","querySelector","value","item","$6d9e305e14d7bdf2393ec8188bda1b8e$var$tasks","getElementById"],"version":3,"file":"index.c4336c62.js.map"}