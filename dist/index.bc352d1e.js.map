{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./public/js/group-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","// import Group from './group'\r\nimport * as countTiles from './count-tiles'\r\n\r\nclass Group {\r\n    constructor(id, name) {\r\n        this.id = id;\r\n        this.name = name;\r\n        // this.cards = [];\r\n    }\r\n\r\n    addGroup() { \r\n        groupList.push(this)\r\n        localStorage.setItem('groupList', JSON.stringify(groupList))\r\n    }\r\n\r\n    createGroup() {\r\n        // creating the group\r\n        let group = document.querySelector('div.group')\r\n        group = group.cloneNode(true)\r\n\r\n        let groupName = group.querySelector('input.group-name')\r\n\r\n        groupName.value = this.name;\r\n        groupName.removeAttribute('disabled')\r\n\r\n        let groupLink = group.querySelector('h3.open-link')\r\n        groupLink.setAttribute('listener', 'false')\r\n\r\n        let editButton = group.querySelector('svg.edit-group')\r\n        editButton.classList.remove('first')\r\n        let deleteButton = group.querySelector('svg.delete-group')\r\n        deleteButton.classList.remove('first')\r\n\r\n        let tiles = group.querySelectorAll('.tile')\r\n        tiles.forEach(function (tile) {\r\n            tile.remove()\r\n        })\r\n \r\n\r\n        let content = document.getElementById('content')\r\n        content.appendChild(group)\r\n\r\n        // smooth scroll to the new column\r\n        group.scrollTo({\r\n            top: content.clientHeight,\r\n            left: 0,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nvar groupList = []\r\n// begin by updating how many tiles there are in the groups\r\ncountTiles.countTiles()\r\n\r\nconst createContentForm = document.getElementById('create-content-form')\r\n// updating the group names that a card can be organised in, if any change happens to the group names\r\nfunction updateGroupNames() {\r\n    let groupNames = document.querySelectorAll('.group-name')\r\n    let groups = createContentForm.querySelector('select[name=group]');\r\n    groups.innerHTML = ''\r\n    // for all of the group names, we'll want to update the select options\r\n    groupNames.forEach(function (object) {\r\n        let newOption = document.createElement('option')\r\n        newOption.textContent = object.value\r\n        newOption.value = object.value\r\n        groups.appendChild(newOption)\r\n    })\r\n}\r\nupdateGroupNames()\r\n\r\n\r\nconst modalBackground = document.getElementById('modal-background')\r\nconst addGroupForm = document.getElementById('add-group-form')\r\nvar newGroupToggle = false;\r\nconst newGroup = document.getElementById('new-group');\r\n// opening/closing the 'add a new group' form\r\nfunction toggleGroupForm() {\r\n    validateText.innerHTML = ''\r\n    if (newGroupToggle == false) {\r\n        addGroupForm.classList.add('active')\r\n        newGroupToggle = true\r\n        modalBackground.style.display = 'flex'\r\n    } else if (newGroupToggle == true) {\r\n        addGroupForm.classList.remove('active')\r\n        addGroupForm.reset()\r\n        newGroupToggle = false\r\n        modalBackground.style.display = 'none'\r\n    }\r\n}\r\n\r\n// adding an event listener to bring up the form\r\nnewGroup.addEventListener('click', toggleGroupForm)\r\n\r\n// adding event listeners to close the form without saving any input\r\nconst groupCancelButton = document.getElementById('add-group-cancel')\r\nconst groupCloseButton = groupCancelButton.nextElementSibling\r\ngroupCancelButton.addEventListener('click', function() {\r\n    toggleGroupForm()\r\n})\r\ngroupCloseButton.addEventListener('click', function() {\r\n    toggleGroupForm()\r\n})\r\n\r\n// adding an event listener for submitting the column\r\nconst groupSubmitButton = document.getElementById('add-group-submit')\r\nvar validateText = addGroupForm.querySelector('.validate-message')\r\ngroupSubmitButton.addEventListener('click', function (event) {\r\n    event.preventDefault();\r\n\r\n    // setting an id and name\r\n    let id = Date.now()\r\n    let name = addGroupForm.querySelector('input').value\r\n\r\n    if (name == '') {\r\n        validateText.innerHTML = 'Please enter a name for this group.'\r\n    } else {\r\n    // create new object in group class\r\n    let group = new Group(id, name)\r\n    group.createGroup()\r\n    group.addGroup()\r\n\r\n    // reset states\r\n    toggleGroupForm()\r\n    updateGroupNames()\r\n    countTiles.openGroupLinks()\r\n    countTiles.countTiles()\r\n    groupEditDeleteFunctionality()\r\n    }\r\n})\r\n\r\n// allow for each group's edit and delete functionality\r\nfunction groupEditDeleteFunctionality() {\r\n\r\n    const groupTitles = document.querySelectorAll('div.group-title')\r\n    groupTitles.forEach(function(groupTitle) {\r\n        let editGroupButton = groupTitle.querySelector('svg.edit-group')\r\n        let deleteGroupButton = groupTitle.querySelector('svg.delete-group')\r\n        let groupNameInput = groupTitle.querySelector('input.group-name')\r\n    \r\n        editGroupButton.addEventListener('click', function() {\r\n            groupNameInput.focus()\r\n        })\r\n        groupNameInput.addEventListener('change', function(event) {\r\n            updateGroupNames();\r\n            console.log('changed')\r\n        })\r\n        groupNameInput.addEventListener('keyup', function(event) {\r\n            if (event.key === 'Enter') {\r\n                groupNameInput.blur()\r\n            }\r\n            updateGroupNames();\r\n        })\r\n        editGroupButton.addEventListener('mouseover', function() {\r\n            let groupEditToolTip = document.querySelector('div.tooltip#edit-group')\r\n\r\n            if (groupEditToolTip === null) {\r\n                let newToolTip = document.createElement('div')\r\n                newToolTip.setAttribute('id', 'edit-group')\r\n                newToolTip.classList.add('tooltip')\r\n                newToolTip.textContent = 'Rename group'\r\n                editGroupButton.parentElement.appendChild(newToolTip)\r\n            } else {\r\n                editGroupButton.parentElement.appendChild(groupEditToolTip)\r\n            }\r\n            \r\n        })\r\n    \r\n        deleteGroupButton.addEventListener('click', function() {\r\n            let groups = document.getElementsByClassName('group')\r\n            let group = groupTitle.parentElement\r\n            let tiles = group.querySelectorAll('.tile')\r\n            if (groups.length > 1 && tiles.length == 0) {\r\n                group.remove()\r\n                updateGroupNames()\r\n            }\r\n        })\r\n    \r\n        deleteGroupButton.addEventListener('mouseover', function() {\r\n            let groups = document.getElementsByClassName('group')\r\n            let group = groupTitle.parentElement\r\n            let tiles = group.querySelectorAll('.tile')\r\n            let groupDeleteToolTip = document.querySelector('div.tooltip#delete-group')\r\n\r\n            if (groupDeleteToolTip === null) {\r\n                let newToolTip = document.createElement('div')\r\n                newToolTip.setAttribute('id', 'delete-group')\r\n                newToolTip.classList.add('tooltip')\r\n                newToolTip.textContent = 'Delete group'\r\n                deleteGroupButton.parentElement.appendChild(newToolTip)\r\n            } else {\r\n                deleteGroupButton.parentElement.appendChild(groupDeleteToolTip)\r\n            }\r\n\r\n            if (groups.length > 1 && tiles.length == 0) {\r\n                deleteGroupButton.classList.remove('disabled')\r\n            } else if (groups.length <= 1 || tiles.length > 0) {\r\n                deleteGroupButton.classList.add('disabled')\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n// ////// ON LOAD\r\n\r\n// import Content from './content'\r\n// import Group from './group'\r\n// import Task from './task'\r\n// import Column from './column'\r\n\r\n// If there are items in local storage - create groups create columns\r\n// create card for each task in column\r\n// create tile for each content in group\r\n\r\nwindow.addEventListener('load', function() {\r\n\r\n    if (localStorage.getItem('groupList') != null) {\r\n        let groups = JSON.parse(localStorage.getItem('groupList'));\r\n        groups.forEach(function(group) {\r\n            let newGroup = new Group(group.id, group.name)\r\n            newGroup.createGroup()\r\n            newGroup.addGroup()\r\n\r\n            updateGroupNames()\r\n            countTiles.openGroupLinks()\r\n            countTiles.countTiles()\r\n            groupEditDeleteFunctionality()\r\n        })\r\n    }\r\n})\r\n"],"names":["globalThis","self","window","global","$f2836ebccb8a1cfa3916bf8dece76a5e$var$Group","constructor","id","name","this","addGroup","$f2836ebccb8a1cfa3916bf8dece76a5e$var$groupList","push","localStorage","setItem","JSON","stringify","createGroup","group","document","querySelector","cloneNode","groupName","value","removeAttribute","setAttribute","classList","remove","querySelectorAll","forEach","tile","content","getElementById","appendChild","scrollTo","top","clientHeight","left","behavior","$f2836ebccb8a1cfa3916bf8dece76a5e$var$createContentForm","$f2836ebccb8a1cfa3916bf8dece76a5e$var$updateGroupNames","groupNames","groups","innerHTML","object","newOption","createElement","textContent","$f2836ebccb8a1cfa3916bf8dece76a5e$var$modalBackground","$f2836ebccb8a1cfa3916bf8dece76a5e$var$addGroupForm","$f2836ebccb8a1cfa3916bf8dece76a5e$var$newGroupToggle","$f2836ebccb8a1cfa3916bf8dece76a5e$var$toggleGroupForm","$f2836ebccb8a1cfa3916bf8dece76a5e$var$validateText","add","style","display","reset","addEventListener","$f2836ebccb8a1cfa3916bf8dece76a5e$var$groupCancelButton","$f2836ebccb8a1cfa3916bf8dece76a5e$var$groupCloseButton","nextElementSibling","$f2836ebccb8a1cfa3916bf8dece76a5e$var$groupSubmitButton","$f2836ebccb8a1cfa3916bf8dece76a5e$var$groupEditDeleteFunctionality","groupTitle","editGroupButton","deleteGroupButton","groupNameInput","focus","event","console","log","key","blur","groupEditToolTip","newToolTip","parentElement","getElementsByClassName","tiles","length","groupDeleteToolTip","preventDefault","Date","now","getItem","parse","newGroup"],"version":3,"file":"index.bc352d1e.js.map"}