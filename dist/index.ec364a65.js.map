{"mappings":"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","sources":["./public/js/script.js"],"sourcesContent":["const newTask = document.getElementById('new-task');\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nvar overlayToggle = false;\r\nnewTask.addEventListener('click', function() {\r\n  console.log('clicked')\r\n  // e.preventDefault();\r\n  if (overlayToggle == false) {\r\n    createTaskForm.classList.add('active')\r\n    overlayToggle = true;\r\n  } else if (overlayToggle == true) {\r\n    createTaskForm.classList.remove('active')\r\n    overlayToggle = false;\r\n  }\r\n\r\n\r\n} )\r\n\r\n// declaring a class called Task - this ordains the structure for all the elements to go into the class\r\nclass Task {\r\n    // this is what it's made of\r\n    constructor(id, name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate, saveStatus) {\r\n    // constructor(id, name, description, dueDate, priorityRating, estimatedTime, completionStatus, saveStatus) {\r\n      this.id = id;\r\n      this.name = name;\r\n      this.description = description;\r\n      this.subject = subject;\r\n      this.status = status;\r\n      this.priorityRating = priorityRating;\r\n      this.estimatedTimeHr = estimatedTimeHr;\r\n      this.estimatedTimeMin = estimatedTimeMin;\r\n      this.dueDate = dueDate;\r\n      // this.completionStatus = completionStatus;\r\n      this.saveStatus = saveStatus;\r\n    }\r\n  \r\n    // this adds tasks to the array taskList\r\n    addTask() {\r\n      taskList.push(this);\r\n      // returns its index\r\n      return taskList.indexOf(this)\r\n    }\r\n  //////////////////////////////////////////////////////////////\r\n    // this prints the last task that was added to the array taskList\r\n    // n represents the index of the element that was just added\r\n    // printTask(n) {\r\n    //   var printTask = document.createElement('p');\r\n    //   var taskNode = document.createTextNode(\r\n    //     'Task: ' + this.name +\r\n    //     ' \\nDescription: ' + this.description + \r\n    //     ' \\nDue Date: ' + this.dueDate + \r\n    //     ' \\nPriority Rating: ' + this.priorityRating + \r\n    //     ' \\nEstimated Time to Completion: ' + this.estimatedTime\r\n    //     // ' \\nCompletion Status: ' + this.completionStatus\r\n    //   );\r\n    //   // adding text to the p tag\r\n    //   printTask.appendChild(taskNode);\r\n  \r\n    //   // creating a delete button\r\n    //   taskDelete = document.createElement('button')\r\n    //   taskDelete.innerHTML = 'Delete Task'\r\n    //   taskDelete.className = 'delete-button'\r\n  \r\n    //   taskDelete.addEventListener('click', function() {\r\n    //     // removing the item from the task list array\r\n    //     taskList[n].saveStatus = 'deleted'\r\n    //     ////////// need to check position of this element in array after refreshing\r\n  \r\n    //     console.log(taskList)\r\n    //     // removing this from the display too\r\n    //     printTask.remove()\r\n    //   })\r\n  \r\n    //   // adding delete button to the p tag\r\n    //   printTask.appendChild(taskDelete)\r\n  \r\n    //   // adding the task to the display\r\n    //   // taskDisplay.appendChild(printTask)\r\n    // }\r\n//////////////////////////////////////////////////////////////////////////\r\n    createCard(n) {\r\n      var card = document.createElement('article');\r\n      var subjectTag = document.createElement('span'),\r\n          title = document.createElement('h3'),\r\n          description = document.createElement('p'),\r\n          timeDetails = document.createElement('div'),\r\n              dueDate = document.createElement('h4'),\r\n              timeTag = document.createElement('span'),\r\n          \r\n          editIcon = document.createElement('svg')\r\n          editIcon.classList.add('edit') \r\n          editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n          // editIcon.innerHTML = `<path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>`\r\n\r\n      card.classList.add('card')\r\n      card.setAttribute('id', 't-'+ n)\r\n      subjectTag.classList.add('tag')\r\n      subjectTag.classList.add('subject')\r\n      timeDetails.classList.add('time-details')\r\n      timeTag.classList.add('time')\r\n      timeTag.classList.add('tag')\r\n      title.textContent = this.name;\r\n      description.textContent = this.description;\r\n      subjectTag.textContent = this.subject;\r\n      // status.textContent = this.status;\r\n      dueDate.textContent = this.dueDate;\r\n      timeTag.textContent = this.estimatedTimeHr + this.estimatedTimeMin;\r\n\r\n      // appending time details to time div\r\n      timeDetails.appendChild(dueDate)\r\n      timeDetails.appendChild(timeTag)\r\n\r\n      // appending everything to whole div\r\n      card.appendChild(subjectTag)\r\n      card.appendChild(title)\r\n      card.appendChild(description)\r\n      card.appendChild(editIcon)\r\n      card.appendChild(timeDetails)\r\n\r\n      // appending card to column\r\n      var cardContainer = document.getElementsByClassName('cards')\r\n      if (this.status == 'ready') {\r\n        cardContainer[0].appendChild(card)\r\n      } else if (this.status == 'in-progress') {\r\n        cardContainer[1].appendChild(card)\r\n      } else if (this.status == 'done') {\r\n        cardContainer[2].appendChild(card)\r\n      }\r\n      // console.log(status)\r\n      // cardContainer.appendChild(card)\r\n    }\r\n  }\r\n  \r\n  // initialising task delete button\r\n  var taskDelete = document.createElement('button')\r\n  \r\n  // creating an array that will be populated with tasks\r\n  var taskList = [];\r\n  \r\n  // accessing the full form to create tasks\r\n  // var taskForm = document.getElementById('task-form');\r\n  \r\n  // article to display tasks\r\n  // var taskDisplay = document.getElementById('task-display');\r\n  \r\n  // initialising variables\r\n  var taskDetails, task, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus;\r\n  \r\n  // selecting the submit button for the form\r\n  var taskSubmitButton = document.getElementById('create-task-submit');\r\n  \r\n  // something to populate tasks with on the page\r\n  \r\n  // on submit:\r\n  taskSubmitButton.addEventListener('click', function(event) {\r\n    event.preventDefault()\r\n    taskDetails = createTaskForm.querySelectorAll('form input');\r\n    console.log(taskDetails)\r\n    // get all of the user input in the input fields\r\n    taskID = taskList.length\r\n    taskName = taskDetails[0].value;\r\n    taskDescription = taskDetails[1].value;\r\n    taskSubject = taskDetails[2].value;\r\n    var statuses = createTaskForm.querySelector('select[name=status]');\r\n    taskStatus = statuses.value;\r\n    // console.log('taskstatusis:' + taskStatus)\r\n    // for (let i = 0; i < statuses.length; i ++) {\r\n    //   if (statuses[i].selected == 'selected') {\r\n    //     taskStatus = statuses[i].value\r\n    //   }\r\n    // }\r\n\r\n  \r\n    // checking the radios \r\n    if (taskDetails[3].checked == true) {\r\n      taskPriorityRating = taskDetails[3].value\r\n    } else if (taskDetails[4].checked == true) {\r\n      taskPriorityRating = taskDetails[4].value\r\n    } else if (taskDetails[5].checked == true) {\r\n      taskPriorityRating = taskDetails[5].value\r\n    }\r\n  \r\n    taskEstimatedTimeHr = taskDetails[6].value;\r\n    taskEstimatedTimeMin = taskDetails[7].value;\r\n    taskDueDate = taskDetails[8].value;\r\n    // checking the radios\r\n    // if (taskDetails[7].checked == true) {\r\n    //   taskCompletionStatus = taskDetails[7].value;\r\n    // } else if (taskDetails[8].checked == true) {\r\n    //   taskCompletionStatus = taskDetails[8].value;\r\n    // }\r\n  \r\n    taskSaveStatus = 'saved';\r\n  \r\n    // create a new task using the task class\r\n    task = new Task(taskID, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus)\r\n    // task = new Task(taskID, taskName, taskDescription, taskDueDate, taskPriorityRating, taskEstimatedTime, taskCompletionStatus, taskSaveStatus)\r\n  \r\n    // add the task to the task list (repo)\r\n  \r\n    // task.printTask(task.addTask());\r\n\r\n    // create new card with task\r\n    task.createCard(task.addTask());\r\n\r\n    // exit form\r\n    overlayToggle = false;\r\n    createTaskForm.classList.remove('active')\r\n    createTaskForm.reset();\r\n    // print to check\r\n    console.log(taskList)\r\n  })\r\n  \r\n  \r\n// getting values of the card for editing\r\n"],"names":["$e19da54cefdb92cfcc179546114023c9$var$newTask","document","getElementById","$e19da54cefdb92cfcc179546114023c9$var$createTaskForm","$e19da54cefdb92cfcc179546114023c9$var$overlayToggle","addEventListener","console","log","classList","add","remove","$e19da54cefdb92cfcc179546114023c9$var$Task","constructor","id","name","description","subject","status","priorityRating","estimatedTimeHr","estimatedTimeMin","dueDate","saveStatus","this","addTask","$e19da54cefdb92cfcc179546114023c9$var$taskList","push","indexOf","createCard","n","card","createElement","subjectTag","title","timeDetails","timeTag","editIcon","innerHTML","setAttribute","textContent","appendChild","cardContainer","getElementsByClassName","$e19da54cefdb92cfcc179546114023c9$var$taskDetails","$e19da54cefdb92cfcc179546114023c9$var$task","$e19da54cefdb92cfcc179546114023c9$var$taskName","$e19da54cefdb92cfcc179546114023c9$var$taskDescription","$e19da54cefdb92cfcc179546114023c9$var$taskSubject","$e19da54cefdb92cfcc179546114023c9$var$taskStatus","$e19da54cefdb92cfcc179546114023c9$var$taskPriorityRating","$e19da54cefdb92cfcc179546114023c9$var$taskEstimatedTimeHr","$e19da54cefdb92cfcc179546114023c9$var$taskEstimatedTimeMin","$e19da54cefdb92cfcc179546114023c9$var$taskDueDate","event","preventDefault","querySelectorAll","taskID","length","value","statuses","querySelector","checked","reset"],"version":3,"file":"index.ec364a65.js.map"}