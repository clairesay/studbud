{"version":3,"sources":["js/task.js","js/kanban.js","js/task-form.js"],"names":["months","Task","id","name","description","subject","status","priorityRating","estimatedTimeHr","estimatedTimeMin","dueDate","taskList","push","n","card","document","createElement","subjectTag","title","informationDiv","timeDetails","timeTag","editIcon","timeIcon","line","classList","add","innerHTML","style","width","height","borderRadius","backgroundColor","setAttribute","textContent","length","dueDateElements","split","month","parseInt","day","appendChild","columnNames","querySelectorAll","cardContainers","currentStatus","forEach","setColumn","object","index","value","countCards","total","columns","cards","getElementsByClassName","emptyStateMessage","getElementById","display","count","cardCount","i","sortability","element","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","dragClass","filter","forceFallback","onStart","evt","itemEl","item","cursor","body","getElementsByTagName","onEnd","allDeleteColumnButtons","button","column","parentElement","remove","subjectList","updateSubjectList","task","taskSubject","trim","toUpperCase","duplicate","subjectOptions","querySelector","option","toggleTaskForm","type","validateText","createTaskForm","removeAttribute","formVisible","modalBackground","reset","taskSaveButton","kanban","reupdate","editButtons","editButton","getAttribute","addEventListener","addAutoFill","autoFillTaskDetails","objectId","replace","thisTask","taskDetails","textArea","statuses","checked","enableButtons","getTaskDetails","newTask","taskCancelButton","taskCloseButton","nextElementSibling","taskDeleteButton","oldTask","splice","indexOf","oldCard","scrollTop","event","preventDefault","taskID","contains","Date","now","createCard","addTask","emptyStateButton","deviceSize","click"],"mappings":"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Z,ICCjB,CAAoB,MDDhB,GAA2B0B,CCCFvD,OAAT,CDDhB,CCCkC;ADArC,ACCG,GDTJ,KCSQ0F,MAAM,GAAGhF,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;ADAP,ACCO+E,IAAAA,MAAM,CAAC7D,AFNX,WEMI,GAAqB7B,KFNf,EEMN;AACAwF,AFNA,IEMAA,OFNKlF,OEMS,CAAC8B,AFNf,CAAc7B,IAAd,CAAmB,IAAnB,CEMA,CAA2BmF,MAA3B;ADDR5C,ACEK,AFNG,GEEJ,ODEM,GDJK,CCMf,IDNoBjD,EAAZ;AEOP,AFNI,EEQL,IFNI;ACIG,SAAS4D,WAAT,GAAuB;AAC1B;AACA,ACCJ,MDDQlB,GCCCoD,WDDa,GAAGjF,ACCzB,CAAwBkF,IAAxB,EAA8B,CDDG,CAACtD,gBAAT,CAA0B,QAA1B,CAArB;AACAC,ACCA,EDDAA,SDNA,KCMc,CAACE,OAAf,CAAuB,MDNZjC,CAAX,EAAc,CCMkBkD,OAAT,EAAkB;AACrC,ACCJmC,AFPI,EEOJA,MDDQlC,MCCI,CAACrC,CDDT,CAAaoC,OAAb,ACCJ,EDD0B,CCCD,EAAzB;ADAQE,ACCRkC,AFPI,EEOJA,IDDQlC,IDNAnD,CCMK,EAAE,CDNH,EEOE,CAACgF,AFPA/E,ICKW,IDLH,CAACC,IEOxB,CAA6B,OAA7B,CFPe,CEOuBoF,AFPA,SAAvB,CAAX,KEOJ,CAAsD,UAAtD,EAH0B,CAK1B;ADFQlC,ADPJ,MCOIA,IDNAjD,KCMS,EAAE,GAFO,ADJR,GAAGF,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CADjB;ACQImD,ACER,AFVI,MCQIA,ACEJ8B,IAAI,AFRA/E,IEQI,CFRC,GAAGH,CCMK,EAAE,CCEvB,EAAsB,CDLI,CDHF,CAACC,aAAT,CAAuB,IAAvB,CAFZ;ACSIoD,ACEJ+B,AFXA,IEWAA,EDFI/B,IDNAhE,MCMU,EAAE,ACEF,CAAC0F,EFRA,GAAG/E,MCEI,ECMtB,AFR0B,CEQG,AFRFC,IEQ3B,EAAmCkB,OFRjB,CAAuB,GEQzC,AFRkB,CAHlB,EEWiD,WAAjD;ADDImC,ACEJ8B,AFZA,IEYAA,EDFI9B,IDNAlD,OCMW,CCED,CDFG,ACEFM,KFRG,GAAGV,CEQrB,CAAyBW,GDPH,ACOtB,CAA6B,EFRA,CAACV,KEQ9B,QFRqB,CAAuB,KAAvB,CAJrB;ACWIsD,ACEP,AFbG,GEUJ,GDCQA,GCED,CFRClD,KCMS,EAAE,IDNA,GAAGL,QCAI,ADAI,CAACC,aAAT,CAAuB,KAAvB,CALlB;ACYIuD,ACEJ4B,AFdA,IEcAA,EDFI5B,IDNA7D,ECMM,EAAE,GDND,CEQG,CAACoF,CFRD/E,KCDQ,GDCA,CAACC,GEQvB,CAA6B,IAA7B,EAAmCkB,GFRrB,CAAuB,IAAvB,CANd,EEcA,GAAiD,iBAAjD;ADFyB,ACGzBiE,AFfA,IEeAA,MFRI9E,OAAO,CEQG,CAACI,CFRDV,QEQd,AFRsB,CEQGsE,AFRFrE,MEQvB,CAAgC,MFRlB,CAAuB,CEQrC,KFRc,CAPd;ACaIwD,ACGP,AFhBG,GEIsB,CAc1B,EDLQA,IDLAlD,QAAQ,CCKK,EAAE,ADLJP,ICHO,IDGC,CAACC,aAAT,CAAuB,GAAvB,CARf;ACeIyD,ADfJ,MCeIA,IDNAlD,GCMO,EAAE,GDND,GAAGR,QAAQ,CAACC,ECMD0D,GAAV,EAAe,MDNb,CAAuB,KAAvB,CATf;ACgBQ,ADhBR,UAUIlD,IAAI,GAAGT,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAVX,CAFU,CAcV;ACKQ,ACEZ,MAAIqF,MDFY1B,KCED,CDFO,GAAGD,ACEN,GDFS,CAACE,CCE7B,EAA0B,CDFd;AACAD,ACERwB,AFPA7E,IEOA6E,EFPA7E,ECKQqD,MAAM,ADLN,CCKO/C,ADLNH,GEOK,CAACA,CDFP,CAAaoD,GDLrB,CAAmBnD,ECKX,CCER,AFPA,CEOyBA,AFPF,CCKO,ECE9B,CAA6B,EFP7B,KCKQ,CCER;ADAQ,ACCR2E,AFPA/E,IEOA+E,EFPA/E,MCMYwD,EDNJ,CEOG,AFPFnD,CCMO,ECCF,CDDKZ,GCCnB,EFPA,GCM2B,CAACgE,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAX,4XDtBE,CAoBV;ACGQD,ACCRwB,IAAAA,IDDQxB,IAAI,CAAClD,KAAL,CAAWiD,ACCJ,CAACjD,KDDR,ACCR,CAAsB8B,EDDM,KCC5B,GAAgC,EDDxB,ICCR;ADAK,ACCR,AFJGnC,GEAJ,GFAIA,CCdsB,ECkBnB,IAAI8E,CFJC,CAACzE,KAAT,CAAeC,GEIG,EFJlB,EEIsB,CFJC,GEIpB,EAAyB,CFJ5B;ACKImD,ACAJmB,AFJA5E,IEIA4E,EDAInB,ADJJzD,KCIS,EAAE,CDJH,CAACK,GEIK,CAACH,CFJf,CAAeK,MAAf,CCIqB4C,ACArB,CAAyBW,CFJD,CCIb,EAAe,ECA1B,CAAgC,AFJhC,QEIA;ADCQ,ACARgB,AFJA9E,IEIA8E,EFJA9E,QAAQ,CEIG,AFJFK,GEIK,EFJd,CAAeG,EEIf,UFJA,GAA8B,MAA9B;ACKQ,ACARuE,IAAAA,QDAY3B,MAAM,CCAH,CAAC/C,CDAK8C,GAAG,CAACE,ACAzB,CAAsBlB,GDAd,ICAR,GAAgC,MAAhC;ADCQiB,ACARwB,AFLA,IEKAA,IDAQxB,EDLJ,ICKU,CAAC/C,ADLNrB,GEKK,CAACgG,CDAP,CAAa1B,GCArB,GDAQ,EDLJ,CCK0B,GDLH,GCKnB,CAHkB,CAKlB,ADPR,EAAkC;AEMlC2B,AFLIjF,IEKJiF,IFLIjF,QAAQ,CAACK,CEKC,CAACsB,GFLX,CAAelB,CEKnB,GAAuB,EAAvB,SFLI,GAAiC,SAAjC;ACOI,ACARyE,AFNC,IEMDA,GFRA,GEQM,CAACtD,CDAK2B,CDNL,GCMS,CDNL,ECMQ/D,ECAnB,CFNgBR,KCMW,CAACwE,QDNjB,IAAuB,KAA3B,EAAkC,CCMtB,CAA8B,MAA9B,EAAsC,CAAtC,CAAX;AACAD,ACAR2B,AFNIlF,IEMJkF,IDAQ3B,ADNJvD,EEME,CAACuC,CDAK,CAAClC,GDND,CAACA,CCML,CAAWiD,GCAnB,AFNI,CAAe7C,ECMX,GAAoB,SAApB,CAPkB,ADCtB,CCQI,EDR6B,SAAjC;AEOP,AFNI,OAFM,MAEA,IAAI,KAAKzB,cAAL,IAAuB,MAA3B,EAAmC;ACQlC4C,ACDf,AFNW5B,EEQZ,MDDgB4B,ADPJ5B,QAAQ,CAACK,CCOK,GAVQ,CAYlB,ADTJ,CAAeI,eAAf,GAAiC,SAAjC;AACH,OA9BS,CAgCV;ACOQ,YAAIiD,sBAAsB,GAAGlE,QAAQ,CAAC4B,gBAAT,CAA0B,mBAA1B,CAA7B;AACAsC,ACFhB,QDEgBA,CCFPyB,QAAT,GAAoB,UDEkB,CAAC5D,OAAvB,CAAgC,UAASoC,MAAT,EAAiB;AAC7C,ACFhB,AFNIpE,MAAAA,IAAI,CAACW,GCQW4B,MDRhB,CCQuB,ADRR3B,GCQWX,ADR1B,CAAmB,MAAnB,CCQkC,CAACwC,sBAAT,CAAgC,QAAhC,CAAd;AACA,ACFhB,AFNIzC,MEMA6F,AFNA7F,IAAI,CAACmB,GCQWkD,GCFL,GDEW,ACFRpE,GDEWmE,ADRzB,CAAkB,IEMI,AFNtB,CCQ+B,ACFRvC,CDESyC,ADRR,OAAOvE,CAA/B,KCQyB,CAAqBuE,CCFhC,CAA0B,OAA1B,CAAlB,GDEgB;AACA,ACFhBuB,AFNI1F,EEMJ0F,IFNI1F,OEMO,CDESqC,ACFRR,EFNE,CAACrB,ECQU,ECFzB,CDE4B0D,ACFR,IFNhB,CAAqBzD,CCQS,CAACiB,CDR/B,CAAyB,CEMCiE,IFN1B,MEMgB,EAAsB,CDEd,CAAwB,OAAxB,CAAZ,CAH6C,CAK7C;ACFZ,AFPA3F,MAAAA,UAAU,CAACQ,SAAX,CAAqBC,GAArB,CAAyB,SAAzB;ACUY,ACFZ,AFPAN,MAAAA,EEOIwF,MDEYvD,GDTL,CEOG,AFPF5B,CEOGoF,EDEQ,CAAC1E,KDTxB,CCSgB,ADTMT,GCSW,ACF7B,AFPJ,CCSgB,ACFY,AFPF,ICSY4B,KAAK,CAACnB,ACFxC,IFPJ,ECSsC,ACFM,IDEU,CAA1C,CCFZ,CDEyD,CCFL;ADGpC+C,ACFZ0B,AFPJvF,MEOIuF,AFPJvF,MCSgB6D,CDTT,CAACzD,EEOM,CAACqF,CDEO,CAACrF,IDTvB,CAAkBC,GAAlB,CCSgB,ADTM,CCSW2D,ICF7B,CAA4B,AFPhC,CCSgB,CAAwB,KCFpC,EAAqC0B,GDEzB,QCFZ;ADGS,ACFTH,AFPJvF,MEOIuF,AFPJvF,KCOY,EDPL,CAACI,EEOM,CDEK,ACFJQ,IDEQoB,EDTvB,CAAkB3B,GAAlB,CCS8B,ADTR,CCSSS,ACF3B,CAAwB,GFP5B,ECSuB,ADhDb,CAyCV,GCOyC,CAAtB,ACFf,EDEwC,ACFJ,MAApC;ADGY+C,ACFf,YDEeA,MAAM,CAACzD,SAAP,CAAiBC,GAAjB,CAAqB,UAArB;AACH,ADRbR,MAAAA,KCMmB,ADNd,CAACgB,KCQa,IAAIoB,EDRvB,GCQ4B,ADRR,CCQSnB,IDRJhC,ECQF,EDRvB,CCQsC,CAAnB,EAAsB;AACzB+E,ACHhB,AFLA9E,MAAAA,MCQgB8E,CCHP6B,IFLE,CCQW,ADRV7E,CCQWT,KCHvB,GAAuB,CDGP,CAAiBC,ADRjC,GCQgB,ADRU,CCQW,IDRNtB,MCQf,KDRhB;ACSa,ACHT4G,AFLJ/F,MEKI+F,AFLJ/F,UAAU,CAACiB,QEKY,CAAC0E,EFLxB,GAAyB,KEKF,AFLOvG,CEK1B,MFLJ,CA5CU,CA8CV;ACOS,ACHR,SDVO;AAcH,ACHR,AFJG,GENJ,OFMQ,KAAKK,OAAL,CAAayB,MAAb,IAAuB,CAA3B,EAA8B;ACxCR,AC6C7B,AFJW,EEMZ,GD/CQ,ODyCQC,eAAe,GAAG,KAAK1B,OAAL,CAAa2B,KAAb,CAAmB,GAAnB,CAAtB;ACQP,ADPO,GC3CR,SD2CYC,KAAK,GAAGtC,MAAM,CAACuC,QAAQ,CAACH,eAAe,CAAC,CAAD,CAAhB,CAAR,GAA+B,CAAhC,CAAlB;ACQX,ADPW,YAAII,GAAG,GAAGJ,eAAe,CAAC,CAAD,CAAzB;AEKZ,AFJY1B,QAAAA,CEIHsG,MFJU,CAAC9E,WAAR,CEIZ,CAA6Bc,CFJK,KEIlC,EAAqC,EFJMR,GAAT,GAAe,GAAf,GAAqBF,KAA3C;ACQZwB,ACHI,AFJK,MEIDmD,CFTA,ICYG,EDPI,CEIC,GAAGjE,MAAM,CAACoC,aAAP,CAAqBlF,EAApC;AACA+G,AFJQvG,EEIRuG,MFJQvG,EEIA,GAAGuG,EFJI,CAAC/E,KEIG,CAACgF,KFJZ,EEIG,CAAiB,AFJE,IEInB,EAAuB,EAAvB,CAAX,CAFiC,CAIjC,EFNQ;AACH,OAtDS,CAwDV;AEIJvG,EAAAA,QAAQ,CAACmC,OAAT,CAAiB,UAAS0C,IAAT,EAAe;AAC5B,QAAI2B,QAAQ,GAAG3B,IAAf;AFJA,UAAI,KAAKhF,eAAL,GAAuB,CAAvB,IAA4B,KAAKC,gBAAL,GAAwB,CAAxD,EAA2D;AEK3D,AFJIY,QEIA8F,AFJA9F,OAAO,CEIC,AFJAa,CEIChC,EAAT,IAAe+G,IFJf,GAAsB,CEI1B,EAA6B,EFJEzG,eAAL,GAAuB,MAAvB,GAAgC,KAAKC,gBAArC,GAAwD,MAA9E;AEKA,AFJH,OAFD,GEMQ2G,GFJD,IAAI,IEIQ,CFJH5G,EEIM2F,aFJX,CEIyB,CAACxD,EFJF,CAAxB,IAA6B,KAAKlC,IEIvB,CAAgC,WFJd,CEIlB,CAAlB,CFJ4D,CAAzD,EAA4D;AEK/D,AFJAY,QAAAA,EEIIgG,KFJG,CAACnF,EEII,GAAGiE,MFJf,GAAsB,KEIO,AFJF1F,CEIGqF,aAAf,CAA6B,CFJtB,GAAwB,MEI/B,AFJf,CEIA,CAFyB,CAGzB;AFJH,OAFM,MAEA,IAAI,KAAKtF,eAAL,GAAuB,CAAvB,IAA4B,KAAKC,gBAAL,IAAyB,CAAzD,EAA4D;AEK/D2G,AFJA/F,MEIA+F,EFJA/F,OAAO,CAACa,CEIG,CAAC,CAAD,CAAX,CAAegB,KAAf,CFJA,EEIuBiE,CFJD,KAAK3G,EEII,CAACL,IAAhC,CAJyB,CAKzB,MFLsB,GAAuB,KAA7C;AACH,OAFM,MAEA;AEKHkH,AFJAhG,MEIAgG,EFJAhG,MEIQ,CAAC6B,AFJF,CAAChB,IEIR,GAAiBiF,IFJjB,GAAsB,CEIG,CAAC/G,CFJ1B,UEIA,CANyB,CAOzB;AFJH,OAjES,CAmEV;AEGIgH,MAAAA,WAAW,CAAC,CAAD,CAAX,CAAelE,KAAf,GAAuBiE,QAAQ,CAAC9G,OAAhC,CARyB,CAUzB;;AACA,AFLJe,MAAAA,IEKQkG,OFLG,CEKK,AFLJ7E,GEKO0D,QFLnB,CAAwB5E,KEKS,CAACuE,EFLlC,WEKmB,CAA6B,qBAA7B,CAAf;AACAwB,AFLJlG,MEKIkG,AFLJlG,QEKY,CAAC8B,EFLF,CAACT,EEKR,GAAiBO,MAAM,AFL3B,CEK4BoC,AFLJ1E,OAAxB,MEKqB,CAAqB0E,aAArB,CAAmCA,aAAnC,CAAiDU,aAAjD,CAA+D,6BAA/D,EAA8F5C,KAA/G,CAZyB,CAczB;AFNJ9B,MAAAA,WAAW,CAACqB,WAAZ,CAAwBpB,OAAxB;AEOI,AFLJP,MAAAA,IEKQqG,AFLJ,CAAC1E,OEKW,CAAClC,GFLjB,CAAiBU,UEKT,AFLR,IEKmC,KAA/B,EAAsC;AAClCmG,AFJRjG,MAAAA,EEIQiG,WAAW,CAAC,AFJN,CEIK,AFJJ3E,CEIP,CAAe8E,OAAf,EFJR,CEIiC,AFJNrG,IEInB,CFJR;AEKK,AFJLC,MAAAA,CEEI,MAEO,IAAIgG,GFJD,CAAC1E,IEIQ,CAAClC,MFJxB,CAA2BH,OEIZ,IAA2B,AFJ1C,KEIW,EAAsC;AACzCgH,AFJRtG,MAAAA,EEIQsG,EFJJ,CAAC3E,QEIc,CAAC,CAAD,CAAX,AFJR,CEIuB8E,AFJNpG,OEIT,GAAyB,IAAzB,AFJR;AEKK,AFJLL,MAAAA,CEEW,GFFP,CAAC2B,EEIM,IAAI0E,KFJf,CAAiB3F,EEIM,CAACjB,CFJxB,aEIe,IAA2B,MAA/B,EAAuC;AAC1C6G,AFJRtG,MAAAA,EEIQsG,EFJJ,CAAC3E,QEIc,CAAC,CAAD,CAAX,AFJR,CEIuB8E,AFJNnG,OEIT,GAAyB,CFJjC,GEIQ;AACH,AFJLN,MAAAA,CEjB6B,CAuBzB,EFNA,CAAC2B,WAAL,CAAiBnB,QAAjB,EA/EU,CAiFV;;AACA,UAAIoB,WAAW,GAAG3B,QAAQ,CAAC4B,gBAAT,CAA0B,cAA1B,CAAlB;AEIIyE,AFHJ,MEGIA,IFHAxE,OEGW,CAAC,CAAD,CAAX,CAAeM,GFHD,EEGd,CFHiBnC,EEGMoG,MFHE,CAACxE,CEGK,CAACnC,cFHf,CEGjB,AFH2C,CErBlB,CAyBzB,MFJiB,CAArB;AACA,UAAIqC,aAAa,GAAG,KAAKvC,MAAzB;AEII8G,AFHJ1E,MEGI0E,AFHJ1E,WEGe,AFHJ,CEGK,AFHJI,CEGG,CAAX,CAAeI,IFHnB,CEGI,AFHgB,GEGOiE,MFHEpE,EEGM,CAACtC,MFHhB,CAAmBuC,MAAnB,EAA2BC,CEG3C,CA1ByB,CA2BzB,EFJgB,EAAkC;AAClD,YAAID,MAAM,CAACE,KAAP,IAAgBL,aAApB,EAAmC;AEInCuE,AFHIxE,MEGJwE,IFHIxE,OEGO,CAAC,CAAD,CAAX,CAAeM,GFHG,CAACD,CEGnB,GAAuBkE,CFHL,CAAd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","file":"task-form.13727781.js","sourceRoot":"..\\public","sourcesContent":["const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n// declaring a class called Task - this ordains the structure for all the elements to go into the class\r\nclass Task {\r\n    \r\n    // this is what it's made of\r\n    constructor(id, name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate, taskList) {\r\n\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.subject = subject;\r\n        this.status = status;\r\n        this.priorityRating = priorityRating;\r\n        this.estimatedTimeHr = estimatedTimeHr;\r\n        this.estimatedTimeMin = estimatedTimeMin;\r\n        this.dueDate = dueDate;\r\n\r\n        // array of tasks\r\n        this.taskList = taskList\r\n    }\r\n\r\n    // this adds tasks to the array taskList\r\n    addTask() {\r\n        this.taskList.push(this);\r\n        return this.id\r\n    }\r\n\r\n    // this creates a new card and applies it to the kanban board\r\n    createCard(n) {\r\n        // initialising new elements\r\n        let card = document.createElement('article'),\r\n            subjectTag = document.createElement('span'),\r\n            title = document.createElement('h3'),\r\n            description = document.createElement('p'),\r\n            informationDiv = document.createElement('div'),\r\n            timeDetails = document.createElement('div'),\r\n            dueDate = document.createElement('h4'),\r\n            timeTag = document.createElement('span'),\r\n            editIcon = document.createElement('a'),\r\n            timeIcon = document.createElement('div'),\r\n            line = document.createElement('HR');\r\n\r\n        // setting classes and attributes\r\n        editIcon.classList.add('edit')\r\n        editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n\r\n        // time icon has been replaced with a priority rating - the priority is ranked in traffic light colors from green to red\r\n        timeIcon.style.width = '12px'\r\n        timeIcon.style.height = '12px'\r\n        timeIcon.style.borderRadius = '12px'\r\n        if (this.priorityRating == 'Low') {\r\n            timeIcon.style.backgroundColor = '#70B815'\r\n        } else if (this.priorityRating == 'Mid') {\r\n            timeIcon.style.backgroundColor = '#E5C44C'\r\n        } else if (this.priorityRating == 'High') {\r\n            timeIcon.style.backgroundColor = '#F59273'\r\n        }\r\n        \r\n        // setting relevant attributes\r\n        card.classList.add('card')\r\n        card.setAttribute('id', 't-' + n)\r\n        subjectTag.classList.add('tag')\r\n        subjectTag.classList.add('subject')\r\n        timeDetails.classList.add('time-details')\r\n        timeTag.classList.add('time')\r\n        timeTag.classList.add('tag')\r\n\r\n        // setting values\r\n        title.textContent = this.name;\r\n        description.textContent = this.description;\r\n        subjectTag.textContent = this.subject;\r\n\r\n        // if there is a due date, reformat for display on the cards\r\n        if (this.dueDate.length != 0) {\r\n            let dueDateElements = this.dueDate.split('-')\r\n            let month = months[parseInt(dueDateElements[1]) - 1]\r\n            let day = dueDateElements[2]\r\n            dueDate.textContent = 'Due ' + day + ' ' + month\r\n        } else {\r\n            dueDate.textContent = 'No due date'\r\n        }\r\n\r\n        // concatenating hour and minute estimated time durations\r\n        if (this.estimatedTimeHr > 0 && this.estimatedTimeMin > 0) {\r\n            timeTag.textContent = this.estimatedTimeHr + ' HR ' + this.estimatedTimeMin + ' MIN';\r\n        } else if (this.estimatedTimeHr == 0 && this.estimatedTimeMin > 0) {\r\n            timeTag.textContent = this.estimatedTimeMin + ' MIN';\r\n        } else if (this.estimatedTimeHr > 0 && this.estimatedTimeMin == 0) {\r\n            timeTag.textContent = this.estimatedTimeHr + ' HR';\r\n        } else {\r\n            timeTag.textContent = '∞'\r\n        }\r\n\r\n        // appending time details to time div\r\n        timeDetails.appendChild(timeIcon)\r\n        timeDetails.appendChild(dueDate)\r\n        timeDetails.appendChild(timeTag)\r\n\r\n        card.appendChild(subjectTag)\r\n\r\n        informationDiv.appendChild(title)\r\n        informationDiv.appendChild(description)\r\n        card.appendChild(informationDiv)\r\n        card.appendChild(line)\r\n        card.appendChild(timeDetails)\r\n        card.appendChild(editIcon)\r\n\r\n        // appending card to column\r\n        let columnNames = document.querySelectorAll('.column-name')\r\n        let cardContainers = document.querySelectorAll('.cards')\r\n        let currentStatus = this.status\r\n        columnNames.forEach(function setColumn(object, index) {\r\n            if (object.value == currentStatus) {\r\n                cardContainers[index].appendChild(card)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default Task","// counts how many cards are in a kanban column\r\nexport function countCards() {\r\n    let total = document.querySelectorAll('.total'),\r\n        cardContainers = document.querySelectorAll('.cards'),\r\n        columns = document.querySelectorAll('.column'),\r\n        cards = document.getElementsByClassName('card');\r\n\r\n    let emptyStateMessage = document.getElementById('empty-state-tasks');\r\n    // if there are no cards, add an empty state message, otherwise remove it.\r\n    if (cards.length == 0) {\r\n        cardContainers[0].appendChild(emptyStateMessage)\r\n        emptyStateMessage.style.display = 'flex';\r\n    } else {\r\n        columns[0].appendChild(emptyStateMessage)\r\n        emptyStateMessage.style.display = 'none';\r\n    }\r\n\r\n    // writing the total number of cards at the head of each column\r\n    total.forEach(function count(object, index) {\r\n        let cardCount = 0;\r\n        for (let i = 0; i < cardContainers[index].querySelectorAll('.card').length; i ++) {\r\n            if (cardContainers[index].querySelectorAll('.card')[i].classList.length == 1) {\r\n                cardCount += 1\r\n            }\r\n        }\r\n        total[index].textContent = cardCount;\r\n    })\r\n}\r\ncountCards()\r\n\r\n// Setting sortable functionality to the cards with the sortable.js library\r\nexport function sortability() {\r\n    // applying sortability to the children of each .cards container\r\n    let cardContainers = document.querySelectorAll('.cards')\r\n    cardContainers.forEach(function(element) {\r\n        new Sortable(element, {\r\n            group: 'nested',\r\n            animation: 200,\r\n            swapThreshold: 0.65,\r\n            ghostClass: 'ghost-card',\r\n            chosenClass: 'chosen-card',\r\n            dragClass: \"sortable-drag\",\r\n            filter: '.filtered', // 'filtered' class is not draggable\r\n            forceFallback: true,\r\n\r\n            onStart: function (evt) {\r\n                // setting the cursor to grabbing while user is holding card\r\n                let itemEl = evt.item;\r\n                itemEl.style.cursor = 'grabbing'\r\n\r\n                let body = document.getElementsByTagName('body')[0]\r\n                body.style.cursor = 'grabbing'\r\n            },\r\n\r\n            onEnd: function (evt) {\r\n                // setting the cursor to grab \r\n                let itemEl = evt.item;\r\n                itemEl.style.cursor = 'grab'\r\n                \r\n                // reset cursor to normal arrow\r\n                let body = document.getElementsByTagName('body')[0]\r\n                body.style.cursor = 'initial'\r\n\r\n                // recount all the cards in each column and update their totals\r\n                countCards()\r\n\r\n                // set enabled/disabled status to each of the buttons after the reallocation happened\r\n                let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n                allDeleteColumnButtons.forEach( function(button) {\r\n                    let columns = document.getElementsByClassName('column')\r\n                    let column = button.parentElement.parentElement\r\n                    let cards = column.querySelectorAll('.card')\r\n                    \r\n                    // ensuring there are mroe than 3 columns and no cards within the column\r\n                    if (columns.length > 3 && cards.length == 0) {\r\n                        button.classList.remove('disabled')\r\n                    } else if (columns.length <= 3) {\r\n                        button.classList.add('disabled') \r\n                    } else if (cards.length > 0) {\r\n                        button.classList.add('disabled')\r\n                    }\r\n                })\r\n            },\r\n        });\r\n    })\r\n}\r\n\r\nsortability()","import Task from './task'\r\nimport * as kanban from './kanban'\r\n\r\nvar subjectList = []\r\n\r\n// suggested subjects should not be duplicated\r\nfunction updateSubjectList() {\r\n    // check the task list for each subject\r\n    taskList.forEach(function(task) {\r\n        let taskSubject = task.subject.trim().toUpperCase()\r\n        let duplicate = false\r\n        // if the subject already exists in the subjectlist, its a duplicate so don't push\r\n        for (let i = 0; i < subjectList.length; i ++) {\r\n            if (subjectList[i] == taskSubject) {\r\n                duplicate = true\r\n            }\r\n        }\r\n        // otherwise, it's a unique subject, save to datalist --> user be recommended subjects they have already inputted when creating new tasks\r\n        if (duplicate == false) {\r\n            subjectList.push(taskSubject)\r\n        }\r\n    })\r\n\r\n    // actually setting the options in the subjectlist\r\n    let subjectOptions = document.querySelector('datalist#subject')\r\n    subjectOptions.innerHTML = ''\r\n    subjectList.forEach(function(subject) {\r\n        let option = document.createElement('option')\r\n        option.textContent = subject\r\n        subjectOptions.appendChild(option)\r\n    })\r\n}\r\n\r\n// opening or closing the task form and changing its type\r\nfunction toggleTaskForm(type) {\r\n    // clearing validate text and resetting required status\r\n    validateText.innerHTML = ''\r\n    createTaskForm.querySelector('input').removeAttribute('required')\r\n\r\n    // check if its an update form if so, reword, and show corresponding buttons :)\r\n    if (type == 'update') {\r\n        createTaskForm.querySelector('h1').textContent = 'Edit task'\r\n        createTaskForm.classList.add('update')\r\n    } else {\r\n        createTaskForm.querySelector('h1').textContent = 'Create new task'\r\n        createTaskForm.classList.remove('update')\r\n    }\r\n\r\n    // check if we're closing or opening the form\r\n    if (formVisible == false) {\r\n        createTaskForm.classList.add('active')\r\n        formVisible = true;\r\n        modalBackground.style.display = 'flex'\r\n    } else if (formVisible == true) {\r\n        createTaskForm.classList.remove('active')\r\n        formVisible = false;\r\n        modalBackground.style.display = 'none'\r\n        createTaskForm.reset()\r\n        taskSaveButton.value = ''\r\n\r\n        kanban.countCards()\r\n        kanban.sortability()\r\n    }\r\n}\r\n\r\n// adding event listeners to edit buttons \r\nfunction reupdate() {\r\n    // each card has an edit button that allows users to reaccess and update task details\r\n    let editButtons = document.querySelectorAll('.edit')\r\n    editButtons.forEach(function (editButton) {\r\n\r\n        // if there hasn't been a listener previously attached, attach one\r\n        if (editButton.getAttribute('listener') !== 'true') {\r\n            editButton.addEventListener('click', addAutoFill)\r\n            editButton.setAttribute('listener', 'true')\r\n        }\r\n        function addAutoFill() {\r\n            autoFillTaskDetails(editButton)\r\n        }\r\n    })\r\n}\r\n\r\n// autopopulates the form with existing task data previously inputted by user\r\nfunction autoFillTaskDetails(object) {\r\n    let objectId = object.parentElement.id;\r\n    objectId = objectId.replace('t-', '')\r\n\r\n    // for each element in the task list already\r\n    taskList.forEach(function(task) {\r\n        let thisTask = task\r\n        if (thisTask.id == objectId) {\r\n            let taskDetails = createTaskForm.querySelectorAll('form input');\r\n            let textArea = createTaskForm.querySelector('textarea')\r\n            // taskName\r\n            taskDetails[0].value = thisTask.name\r\n            // taskDescription\r\n            textArea.value = thisTask.description\r\n            // taskSubject \r\n            taskDetails[1].value = thisTask.subject\r\n\r\n            // taskStatus\r\n            let statuses = createTaskForm.querySelector('select[name=status]');\r\n            statuses.value = object.parentElement.parentElement.parentElement.querySelector('div.title input.column-name').value\r\n\r\n            // taskPriorityRating\r\n            if (thisTask.priorityRating == 'Low') {\r\n                taskDetails[2].checked = true\r\n            } else if (thisTask.priorityRating == 'Mid') {\r\n                taskDetails[3].checked = true\r\n            } else if (thisTask.priorityRating == 'High') {\r\n                taskDetails[4].checked = true\r\n            }\r\n            \r\n            // taskEstimatedTimeHr\r\n            taskDetails[5].value = thisTask.estimatedTimeHr\r\n            // taskEstimatedTimeMin\r\n            taskDetails[6].value = thisTask.estimatedTimeMin\r\n            // taskDueDate\r\n            taskDetails[7].value = thisTask.dueDate\r\n\r\n            taskSaveButton.value = thisTask.id\r\n            toggleTaskForm('update')\r\n        }\r\n    })\r\n}\r\n\r\n//updating disabled/enabled status for all buttons\r\nfunction enableButtons() {\r\n    let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n    allDeleteColumnButtons.forEach( function(button) {\r\n        let columns = document.getElementsByClassName('column')\r\n        let column = button.parentElement.parentElement\r\n        let cards = column.querySelectorAll('.card')\r\n        // checking for more than 3 columns and no cards within column\r\n        if (columns.length > 3 && cards.length == 0) {\r\n            button.classList.remove('disabled')\r\n        } else if (columns.length <= 3 || cards.length > 0) {\r\n            button.classList.add('disabled')\r\n        }\r\n    })\r\n}\r\n\r\n// getting all of the task details inputted by the user\r\nfunction getTaskDetails(taskDetails) {\r\n    let name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate;\r\n\r\n    name = taskDetails[0].value;\r\n    let textArea = createTaskForm.querySelector('textarea')\r\n    description = textArea.value\r\n    subject = taskDetails[1].value;\r\n    \r\n    let statuses = createTaskForm.querySelector('select[name=status]');\r\n    status = statuses.value;\r\n\r\n    // checking the radios \r\n    if (taskDetails[2].checked == true) {\r\n        priorityRating = taskDetails[2].value\r\n    } else if (taskDetails[3].checked == true) {\r\n        priorityRating = taskDetails[3].value\r\n    } else if (taskDetails[4].checked == true) {\r\n        priorityRating = taskDetails[4].value\r\n    }\r\n\r\n    // estimated time\r\n    estimatedTimeHr = taskDetails[5].value;\r\n    estimatedTimeMin = taskDetails[6].value;\r\n    dueDate = taskDetails[7].value;\r\n\r\n    // return all input values from the form\r\n    return {name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate}\r\n}\r\n\r\n// selecting relevant elements\r\nvar taskList = []\r\nconst newTask = document.getElementById('new-task');\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nconst modalBackground = document.getElementById('modal-background')\r\nvar formVisible = false;\r\n\r\n// create a new task\r\nnewTask.addEventListener('click', toggleTaskForm)\r\n\r\n// adding event listeners to the form buttons.\r\nconst taskSaveButton = document.getElementById('task-save')\r\nconst taskCancelButton = document.getElementById('edit-task-cancel');\r\nconst taskCloseButton = taskCancelButton.nextElementSibling;\r\nconst taskDeleteButton = document.getElementById('edit-task-delete');\r\n\r\n// cancelling the creation of a task without saving\r\ntaskCancelButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\ntaskCloseButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\n\r\n// deleting a task\r\ntaskDeleteButton.addEventListener('click', function () {\r\n    let id = parseInt(taskSaveButton.value)\r\n    // iterate through existing elements in the task list and remove the match\r\n    for (let i = 0; i < taskList.length; i++) {\r\n        let oldTask = taskList[i]\r\n        if (oldTask.id == id) {\r\n            taskList.splice(taskList.indexOf(oldTask), 1)\r\n            let oldCard = document.getElementById('t-' + id)\r\n            oldCard.remove();\r\n        }\r\n    }\r\n\r\n    // scroll back to top of form\r\n    createTaskForm.scrollTop = 0;\r\n\r\n    // reset form and other functionality\r\n    toggleTaskForm()\r\n    reupdate()\r\n    enableButtons()\r\n    updateSubjectList()\r\n})\r\n\r\nvar validateText = createTaskForm.querySelector('.validate-message')\r\n// saving a new task or updating\r\ntaskSaveButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n\r\n    // initialising variables\r\n    let taskDetails = createTaskForm.querySelectorAll('form input');\r\n    // get all of the user input in the input fields\r\n    let task = getTaskDetails(taskDetails)\r\n\r\n    // if there isn't at least a task name included in the form input, prevent form submission - ask for user to input name\r\n    if (task.name == '') {\r\n        taskDetails[0].setAttribute('required', 'true')\r\n        validateText.innerHTML = 'Please enter a task name to save this task.'\r\n    } else {\r\n        // depends whether we are updating or creating a task\r\n        // if updating, replace old content at the same ID \r\n        let taskID;\r\n        if (createTaskForm.classList.contains('update')) {\r\n            taskID = parseInt(taskSaveButton.value)\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                var oldTask = taskList[i]\r\n                if (oldTask.id == taskID) {\r\n                    taskList.splice(taskList.indexOf(oldTask), 1)\r\n                    let oldCard = document.getElementById('t-' + taskID)\r\n                    oldCard.remove();\r\n                    taskSaveButton.value = ''\r\n                }\r\n            }\r\n        // otherwise, create a new ID\r\n        } else {\r\n            taskID = Date.now()\r\n        }\r\n        // create a new task using the task class\r\n        let newTask = new Task(taskID, task.name, task.description, task.subject, task.status, task.priorityRating, task.estimatedTimeHr, task.estimatedTimeMin, task.dueDate, taskList)\r\n        // append to taskList and create new card with task\r\n        newTask.createCard(newTask.addTask());\r\n\r\n        // scroll back to top of form\r\n        createTaskForm.scrollTop = 0;\r\n\r\n        // close the form and add event listeners to any new items\r\n        toggleTaskForm()\r\n        reupdate()\r\n        enableButtons()\r\n        // update subjects\r\n        updateSubjectList()\r\n    }\r\n})\r\n\r\n// if user chooses to create new task through CTA in empty state message, open form like user clicked on top right hand CTA\r\nvar emptyStateButton = document.querySelector('#empty-state-tasks button')\r\nemptyStateButton.addEventListener('click', function() {\r\n    if (deviceSize != 'desktop') {\r\n        // counter click for the 'buttons container dropdown'\r\n        document.querySelector('#task-buttons button.icon').click()\r\n    }\r\n    newTask.click()\r\n})"]}