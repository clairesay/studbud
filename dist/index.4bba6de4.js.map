{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./public/js/column.js","./public/js/column-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","class Column {\r\n    constructor(id, name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    createColumn() {\r\n        // duplicating existing columns and tweaking some elements to make it unique\r\n        let column = document.querySelector('div.column')\r\n        column = column.cloneNode(true)\r\n\r\n        let columnName = column.querySelector('input.column-name')\r\n        columnName.value = this.name;\r\n        let editButton = column.querySelector('svg.edit-column')\r\n        let deleteButton = column.querySelector('svg.delete-column')\r\n\r\n        let total = column.querySelector('h3.total')\r\n        total.textContent = 0;\r\n        // remove any existing cards inside the column\r\n        let cards = column.querySelectorAll('.cards > *')\r\n        cards.forEach(function (card) {\r\n            card.remove()\r\n        })\r\n\r\n        let tasks = document.getElementById('tasks')\r\n        tasks.appendChild(column)\r\n\r\n        // smooth scroll to the new column\r\n        tasks.scrollTo({\r\n            top: 0,\r\n            left: tasks.clientWidth,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n}\r\n\r\nexport default Column","import Column from './column'\r\nimport * as kanban from './kanban'\r\n\r\nconst createTaskForm = document.getElementById('create-task-form')\r\n\r\n// updates all column names after any change/renaming is done\r\nfunction updateColumnNames() {\r\n    let columnNames = document.querySelectorAll('.column-name')\r\n    // reset the form statuses for the create task form\r\n    let statuses = createTaskForm.querySelector('select[name=status]');\r\n    statuses.innerHTML = ''\r\n    // apply all the new column names\r\n    columnNames.forEach(function (object) {\r\n        let newOption = document.createElement('option')\r\n        newOption.textContent = object.value\r\n        newOption.value = object.value\r\n        statuses.appendChild(newOption)\r\n    })\r\n}\r\nupdateColumnNames()\r\n\r\nconst modalBackground = document.getElementById('modal-background')\r\nconst addColumnForm = document.getElementById('add-column-form')\r\nvar newColumnToggle = false;\r\nconst newColumn = document.getElementById('new-column');\r\n\r\n// toggle the column form to either show or hide\r\nfunction toggleColumnForm() {\r\n    // reset the validation required messages\r\n    validateText.innerHTML = ''\r\n    let name = addColumnForm.querySelector('input')\r\n    name.removeAttribute('required')\r\n\r\n    // toggle the column form to show/hide\r\n    if (newColumnToggle == false) {\r\n        addColumnForm.classList.add('active')\r\n        newColumnToggle = true\r\n        modalBackground.style.display = 'flex'\r\n    } else if (newColumnToggle == true) {\r\n        addColumnForm.classList.remove('active')\r\n        addColumnForm.reset()\r\n        newColumnToggle = false\r\n        modalBackground.style.display = 'none'\r\n    }\r\n}\r\n\r\n// enable sortable functionality for new created column\r\nfunction createNewSortable() {\r\n    let newCard = document.querySelectorAll('.cards')\r\n    newCard = newCard[newCard.length - 1]\r\n    new Sortable(newCard, {\r\n        group: 'nested',\r\n        animation: 200,\r\n        swapThreshold: 0.65,\r\n        ghostClass: 'ghost-card',\r\n        chosenClass: 'chosen-card',\r\n        dragClass: \"sortable-drag\",\r\n        filter: '.filtered',\r\n        forceFallback: true,\r\n        onEnd: function (evt) {\r\n            kanban.countCards()\r\n        }\r\n    })\r\n}\r\n\r\n//updating disabled/enabled status for all buttons\r\nfunction enableButtons() {\r\n    let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n    allDeleteColumnButtons.forEach( function(button) {\r\n        let columns = document.getElementsByClassName('column')\r\n        let column = button.parentElement.parentElement\r\n        let cards = column.querySelectorAll('.card')\r\n\r\n        // checking for more than 3 columns and no cards within column\r\n        if (columns.length > 3 && cards.length == 0) {\r\n            button.classList.remove('disabled')\r\n        } else if (columns.length <= 3 || cards.length > 0) {\r\n            button.classList.add('disabled')\r\n        }\r\n    })\r\n}\r\n\r\n// adding an event listener to bring up the form\r\nnewColumn.addEventListener('click', toggleColumnForm)\r\n\r\n// adding an event listener for submitting the column\r\nconst columnCancelButton = document.getElementById('add-column-cancel')\r\nconst columnCloseButton = columnCancelButton.nextElementSibling\r\n\r\n// closing the column without saving\r\ncolumnCancelButton.addEventListener('click', function () {\r\n    toggleColumnForm()\r\n})\r\ncolumnCloseButton.addEventListener('click', function () {\r\n    toggleColumnForm()\r\n})\r\n\r\n// submitting column\r\nconst columnSubmitButton = document.getElementById('add-column-submit')\r\nvar validateText = addColumnForm.querySelector('.validate-message')\r\ncolumnSubmitButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n\r\n    let id = Date.now()\r\n    let name = addColumnForm.querySelector('input')\r\n\r\n    // if there isn't a name for the column, don't submit the form. ask user to input\r\n    if (name.value == '') {\r\n        validateText.innerHTML = 'Please enter a name for this column.'\r\n        name.setAttribute('required', 'true')\r\n    } else {\r\n        // create a column\r\n        let col = new Column(id, name.value)\r\n        col.createColumn()\r\n\r\n        // reset statuses\r\n        enableButtons()\r\n        updateColumnNames()\r\n        toggleColumnForm()\r\n        createNewSortable();\r\n        columnEditDeleteFunctionality()\r\n    }\r\n})\r\n\r\n// //////////// COLUMN DELETE and EDIT BUTTONS\r\nconst columnDeleteToolTip = document.querySelector('div.tooltip#delete')\r\nconst columnEditToolTip = document.querySelector('div.tooltip#edit')\r\n\r\n// for all the columns\r\nfunction columnEditDeleteFunctionality() {\r\n    const columnTitles = document.querySelectorAll('div.title')\r\n    columnTitles.forEach(function (columnTitle) {\r\n        let editColumnButton = columnTitle.querySelector('svg.edit-column')\r\n        let deleteColumnButton = columnTitle.querySelector('svg.delete-column')\r\n        let columnNameInput = columnTitle.querySelector('input.column-name')\r\n\r\n        // focus when clicked\r\n        editColumnButton.addEventListener('click', function () {\r\n            columnNameInput.focus()\r\n        })\r\n        // on change, reupdate all column names\r\n        columnNameInput.addEventListener('change', function (event) {\r\n            updateColumnNames();\r\n        })\r\n        // 'save' column name\r\n        columnNameInput.addEventListener('keyup', function (event) {\r\n            if (event.key === 'Enter') {\r\n                columnNameInput.blur()\r\n            }\r\n            updateColumnNames();\r\n        })\r\n        // tooltip on hover\r\n        editColumnButton.addEventListener('mouseover', function () {\r\n            editColumnButton.parentElement.appendChild(columnEditToolTip)\r\n        })\r\n        // delete columns as long as there are more than 3 and there are no cards within it\r\n        deleteColumnButton.addEventListener('click', function () {\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = columnTitle.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n            if (columns.length > 3 && cards.length == 0) {\r\n                column.remove()\r\n                updateColumnNames()\r\n            }\r\n            // updating the 'disabled' visual of each delete icon\r\n            let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n            allDeleteColumnButtons.forEach(function (button) {\r\n                let columns = document.getElementsByClassName('column')\r\n                let column = button.parentElement.parentElement\r\n                let cards = column.querySelectorAll('.card')\r\n\r\n                //if there are cards inside the column, or there are only 3 columns, delete is disabled. \r\n                if (columns.length > 3 && cards.length == 0) {\r\n                    button.classList.remove('disabled')\r\n                } else if (columns.length <= 3 || cards.length > 0) {\r\n                    button.classList.add('disabled')\r\n                }\r\n            })\r\n        })\r\n\r\n        // updating 'disabled' status for icons on hover\r\n        deleteColumnButton.addEventListener('mouseover', function () {\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = columnTitle.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n            deleteColumnButton.parentElement.appendChild(columnDeleteToolTip)\r\n            if (columns.length > 3 && cards.length == 0) {\r\n                deleteColumnButton.classList.remove('disabled')\r\n            } else if (columns.length <= 3 || cards.length > 0) {\r\n                deleteColumnButton.classList.add('disabled')\r\n            }\r\n        })\r\n    })\r\n}\r\n"],"names":["globalThis","self","window","global","$8b38702613a783d21a2f250d3e1ed6dd$export$default","constructor","id","name","this","createColumn","column","document","querySelector","cloneNode","value","textContent","querySelectorAll","forEach","card","remove","tasks","getElementById","appendChild","scrollTo","top","left","clientWidth","behavior","$a969fc4719ba336d4874bd6e736e73f1$var$createTaskForm","$a969fc4719ba336d4874bd6e736e73f1$var$updateColumnNames","columnNames","statuses","innerHTML","object","newOption","createElement","$a969fc4719ba336d4874bd6e736e73f1$var$modalBackground","$a969fc4719ba336d4874bd6e736e73f1$var$addColumnForm","$a969fc4719ba336d4874bd6e736e73f1$var$newColumnToggle","$a969fc4719ba336d4874bd6e736e73f1$var$toggleColumnForm","$a969fc4719ba336d4874bd6e736e73f1$var$validateText","removeAttribute","classList","add","style","display","reset","addEventListener","$a969fc4719ba336d4874bd6e736e73f1$var$columnCancelButton","$a969fc4719ba336d4874bd6e736e73f1$var$columnCloseButton","nextElementSibling","$a969fc4719ba336d4874bd6e736e73f1$var$columnSubmitButton","event","preventDefault","Date","now","setAttribute","col","button","columns","getElementsByClassName","cards","parentElement","length","newCard","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","dragClass","filter","forceFallback","onEnd","evt","$a969fc4719ba336d4874bd6e736e73f1$var$createNewSortable","columnTitle","editColumnButton","deleteColumnButton","columnNameInput","focus","key","blur","$a969fc4719ba336d4874bd6e736e73f1$var$columnEditToolTip","$a969fc4719ba336d4874bd6e736e73f1$var$columnDeleteToolTip"],"version":3,"file":"index.4bba6de4.js.map"}