{"mappings":"kBAAMA,EAAUC,SAASC,eAAe,gBACpCC,EAAWF,SAASG,iBAAiB,SAyBzC,SAAAC,IACEF,EAAWF,SAASG,iBAAiB,SACrCE,QAAQC,IAAIJ,SAERK,EAAiBP,SAASC,eAAe,wBAC3CO,GAAgB,EACpBT,EAAQU,iBAAiB,SAAS,WAChCL,IACAC,QAAQC,IAAI,WAES,GAAjBE,GACFD,EAAeG,UAAUC,IAAI,UAC7BH,GAAgB,GACU,GAAjBA,IACTD,EAAeG,UAAUE,OAAO,UAChCJ,GAAgB,MAGpBN,EAASW,SAAQ,SAASC,GACxBA,EAAKL,iBAAiB,SAAS,WAC7BL,IACAC,QAAQC,IAAI,SACS,GAAjBE,GACFD,EAAeG,UAAUC,IAAI,UAC7BH,GAAgB,GACU,GAAjBA,IACTD,EAAeG,UAAUE,OAAO,UAChCJ,GAAgB,SAkBtB,MAAAO,EAEIC,YAAYC,EAAIC,EAAMC,EAAaC,EAASC,EAAQC,EAAgBC,EAAiBC,EAAkBC,EAASC,GAE9GC,KAAKV,GAAKA,EACVU,KAAKT,KAAOA,EACZS,KAAKR,YAAcA,EACnBQ,KAAKP,QAAUA,EACfO,KAAKN,OAASA,EACdM,KAAKL,eAAiBA,EACtBK,KAAKJ,gBAAkBA,EACvBI,KAAKH,iBAAmBA,EACxBG,KAAKF,QAAUA,EAEfE,KAAKD,WAAaA,EAIpBE,iBACEC,EAASC,KAAKH,MAGPA,KAAKV,GAGdc,WAAWd,OAKLe,EAAWH,EAASI,QAAO,SAASC,UAC/BA,EAAQjB,IAAMA,KAEvBZ,QAAQC,IAAI0B,GAwCdG,WAAWC,OACLC,EAAOrC,SAASsC,cAAc,WAC9BC,EAAavC,SAASsC,cAAc,QACpCE,EAAQxC,SAASsC,cAAc,MAC/BnB,EAAcnB,SAASsC,cAAc,KACrCG,EAAczC,SAASsC,cAAc,OACjCb,EAAUzB,SAASsC,cAAc,MACjCI,EAAU1C,SAASsC,cAAc,QAErCK,EAAW3C,SAASsC,cAAc,OAClCK,EAASjC,UAAUC,IAAI,QAEvBgC,EAASC,UAAAA,8YAGTD,EAASlC,iBAAiB,SAAS,SAASoC,GAC1CzC,IACA0C,MAAM,MACNzC,QAAQC,IAAI,WAES,GAAjBE,GACFD,EAAeG,UAAUC,IAAI,UAC7BH,GAAgB,GACU,GAAjBA,IACTD,EAAeG,UAAUE,OAAO,UAChCJ,GAAgB,MAKxB6B,EAAK3B,UAAUC,IAAI,QACnB0B,EAAKU,aAAa,KAAM,KAAMX,GAC9BG,EAAW7B,UAAUC,IAAI,OACzB4B,EAAW7B,UAAUC,IAAI,WACzB8B,EAAY/B,UAAUC,IAAI,gBAC1B+B,EAAQhC,UAAUC,IAAI,QACtB+B,EAAQhC,UAAUC,IAAI,OACtB6B,EAAMQ,YAAcrB,KAAKT,KACzBC,EAAY6B,YAAcrB,KAAKR,YAC/BoB,EAAWS,YAAcrB,KAAKP,QAE9BK,EAAQuB,YAAcrB,KAAKF,QAC3BiB,EAAQM,YAAcrB,KAAKJ,gBAAkBI,KAAKH,iBAGlDiB,EAAYQ,YAAYxB,GACxBgB,EAAYQ,YAAYP,GAGxBL,EAAKY,YAAYV,GACjBF,EAAKY,YAAYT,GACjBH,EAAKY,YAAY9B,GACjBkB,EAAKY,YAAYN,GACjBN,EAAKY,YAAYR,OAGbS,EAAgBlD,SAASmD,uBAAuB,SACjC,SAAfxB,KAAKN,OACP6B,EAAc,GAAGD,YAAYZ,GACL,eAAfV,KAAKN,OACd6B,EAAc,GAAGD,YAAYZ,GACL,QAAfV,KAAKN,QACd6B,EAAc,GAAGD,YAAYZ,IAQlBrC,SAASsC,cAAc,cAYpCc,EAAaC,EAAMC,EAAUC,EAAiBC,EAAaC,EAAYC,EAAoBC,EAAqBC,EAAsBC,EATtIhC,EAAAA,GAYmB7B,SAASC,eAAe,sBAK9BQ,iBAAiB,SAAS,SAASoC,GAClDA,EAAMiB,iBACNV,EAAc7C,EAAeJ,iBAAiB,cAC9CE,QAAQC,IAAI8C,GAEZW,OAASlC,EAASmC,OAClBV,EAAWF,EAAY,GAAGa,MAC1BV,EAAkBH,EAAY,GAAGa,MACjCT,EAAcJ,EAAY,GAAGa,UACzBC,EAAW3D,EAAe4D,cAAc,uBAC5CV,EAAaS,EAASD,MAUQ,GAA1Bb,EAAY,GAAGgB,QACjBV,EAAqBN,EAAY,GAAGa,MACD,GAA1Bb,EAAY,GAAGgB,QACxBV,EAAqBN,EAAY,GAAGa,MACD,GAA1Bb,EAAY,GAAGgB,UACxBV,EAAqBN,EAAY,GAAGa,OAGtCN,EAAsBP,EAAY,GAAGa,MACrCL,EAAuBR,EAAY,GAAGa,MACtCJ,EAAcT,EAAY,GAAGa,MAQZ,QAGjBZ,EAAAA,IAAWtC,EAAKgD,OAAQT,EAAUC,EAAiBC,EAAaC,EAAYC,EAAoBC,EAAqBC,EAAsBC,EAH1H,SAWbhC,EAASmC,OAAS,EACpBnC,EAASI,QAAO,SAASC,GACnBA,EAAQjB,IAAM8C,OAChBV,EAAKtB,WAAWgC,QAEhBV,EAAKlB,WAAWkB,EAAKzB,cAKzByB,EAAKlB,WAAWkB,EAAKzB,WAOvBpB,GAAgB,EAChBD,EAAeG,UAAUE,OAAO,UAChCL,EAAe8D,QAEfhE,QAAQC,IAAIuB,YAOVyC,EAAgBtE,SAASC,eAAe,uBAC1CsE,GAAkB,EACJvE,SAASC,eAAe,cAGhCQ,iBAAiB,SAAS,WACX,GAAnB8D,GACFD,EAAc5D,UAAUC,IAAI,UAC5B4D,GAAkB,GACU,GAAnBA,IACTD,EAAc5D,UAAUE,OAAO,UAC/B2D,GAAkB,MAKKvE,SAASC,eAAe,qBAChCQ,iBAAiB,SAAS,SAASoC,GACpDA,EAAMiB,qBAGFU,EAASxE,SAASsC,cAAc,OACpCkC,EAAO9D,UAAUC,IAAI,cACjB6B,EAAQxC,SAASsC,cAAc,OACnCE,EAAM9B,UAAUC,IAAI,aAChB8D,EAAazE,SAASsC,cAAc,SACxCmC,EAAW/D,UAAUC,IAAI,mBAGrB+D,EAAkBJ,EAAcnE,iBAAiB,SAAS,GAC9DsE,EAAWR,MAAQS,EAAgBT,UAC/BU,EAAQ3E,SAASsC,cAAc,MACnCqC,EAAMjE,UAAUC,IAAI,SACpBgE,EAAM3B,YAAc,MAChB4B,EAAQ5E,SAASsC,cAAc,OACnCsC,EAAMlE,UAAUC,IAAI,SACpB6B,EAAMS,YAAYwB,GAClBjC,EAAMS,YAAY0B,GAClBH,EAAOvB,YAAYT,GACnBgC,EAAOvB,YAAY2B,OACfC,EAAQ7E,SAASC,eAAe,SACpC4E,EAAM5B,YAAYuB,GAElBK,EAAMC,SAAAA,CACJC,IAAK,EACLC,KAAMH,EAAMI,YACZC,SAAU,WAGZX,GAAkB,EAClBD,EAAcD,QACdC,EAAc5D,UAAUE,OAAO,UAIfZ,SAASG,iBAAiB,YAAY","sources":["./public/js/script.js"],"sourcesContent":["const newTask = document.getElementById('new-task');\r\nvar editTask = document.querySelectorAll('.card');\r\n\r\n// STACK OVERFLOW https://stackoverflow.com/questions/4880381/check-whether-html-element-has-scrollbars\r\n\r\n\r\n// var hasHorizontalScrollbar = cardContainer.scrollWidth > cardContainer.clientWidth;\r\nfunction cardWidth() {\r\n  editTask.forEach(function(element) {\r\n    // var cardContainer = document.querySelectorAll('div.cards');\r\n    var cardContainer = element.parentElement\r\n    var hasVerticalScrollbar = cardContainer.scrollHeight > cardContainer.clientHeight;\r\n    if (hasVerticalScrollbar) {\r\n      element.style.width = 'auto';\r\n      element.style.maxWidth = '90%'; \r\n    } else {\r\n      // cardContainer.style.maxWidth = 'calc(100% - 32px)';\r\n      element.style.width = 'auto';\r\n      cardContainer.style.paddingRight = '36px';\r\n      // element.style.maxWidth = cardContainer.clientWidth - 36 + 'px'; \r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\nfunction updateVar() {\r\n  editTask = document.querySelectorAll('.card');\r\n  console.log(editTask)\r\n}\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nvar overlayToggle = false;\r\nnewTask.addEventListener('click', function() {\r\n  updateVar()\r\n  console.log('clicked')\r\n  // e.preventDefault();\r\n  if (overlayToggle == false) {\r\n    createTaskForm.classList.add('active')\r\n    overlayToggle = true;\r\n  } else if (overlayToggle == true) {\r\n    createTaskForm.classList.remove('active')\r\n    overlayToggle = false;\r\n  }\r\n} )\r\neditTask.forEach(function(elem) {\r\n  elem.addEventListener('click', function() {\r\n    updateVar()\r\n    console.log('click')\r\n    if (overlayToggle == false) {\r\n      createTaskForm.classList.add('active')\r\n      overlayToggle = true;\r\n    } else if (overlayToggle == true) {\r\n      createTaskForm.classList.remove('active')\r\n      overlayToggle = false;\r\n    }\r\n  })\r\n})\r\n\r\nfunction rip() {\r\n  updateVar()\r\n  console.log('click')\r\n  if (overlayToggle == false) {\r\n    createTaskForm.classList.add('active')\r\n    overlayToggle = true;\r\n  } else if (overlayToggle == true) {\r\n    createTaskForm.classList.remove('active')\r\n    overlayToggle = false;\r\n  }\r\n}\r\n\r\n// declaring a class called Task - this ordains the structure for all the elements to go into the class\r\nclass Task {\r\n    // this is what it's made of\r\n    constructor(id, name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate, saveStatus) {\r\n    // constructor(id, name, description, dueDate, priorityRating, estimatedTime, completionStatus, saveStatus) {\r\n      this.id = id;\r\n      this.name = name;\r\n      this.description = description;\r\n      this.subject = subject;\r\n      this.status = status;\r\n      this.priorityRating = priorityRating;\r\n      this.estimatedTimeHr = estimatedTimeHr;\r\n      this.estimatedTimeMin = estimatedTimeMin;\r\n      this.dueDate = dueDate;\r\n      // this.completionStatus = completionStatus;\r\n      this.saveStatus = saveStatus;\r\n    }\r\n  \r\n    // this adds tasks to the array taskList\r\n    addTask() {\r\n      taskList.push(this);\r\n      // returns its index\r\n      // return taskList.indexOf(this)\r\n      return this.id\r\n    }\r\n\r\n    updateTask(id) {\r\n      // var myNum = 3;\r\n      // for (let i = 0; i < taskList.length; i ++) {\r\n      //   if \r\n      // }\r\n      var myObject = taskList.filter(function(element) {\r\n        return element.id == id;\r\n      })\r\n      console.log(myObject)\r\n    }\r\n  //////////////////////////////////////////////////////////////\r\n    // this prints the last task that was added to the array taskList\r\n    // n represents the index of the element that was just added\r\n    // printTask(n) {\r\n    //   var printTask = document.createElement('p');\r\n    //   var taskNode = document.createTextNode(\r\n    //     'Task: ' + this.name +\r\n    //     ' \\nDescription: ' + this.description + \r\n    //     ' \\nDue Date: ' + this.dueDate + \r\n    //     ' \\nPriority Rating: ' + this.priorityRating + \r\n    //     ' \\nEstimated Time to Completion: ' + this.estimatedTime\r\n    //     // ' \\nCompletion Status: ' + this.completionStatus\r\n    //   );\r\n    //   // adding text to the p tag\r\n    //   printTask.appendChild(taskNode);\r\n  \r\n    //   // creating a delete button\r\n    //   taskDelete = document.createElement('button')\r\n    //   taskDelete.innerHTML = 'Delete Task'\r\n    //   taskDelete.className = 'delete-button'\r\n  \r\n    //   taskDelete.addEventListener('click', function() {\r\n    //     // removing the item from the task list array\r\n    //     taskList[n].saveStatus = 'deleted'\r\n    //     ////////// need to check position of this element in array after refreshing\r\n  \r\n    //     console.log(taskList)\r\n    //     // removing this from the display too\r\n    //     printTask.remove()\r\n    //   })\r\n  \r\n    //   // adding delete button to the p tag\r\n    //   printTask.appendChild(taskDelete)\r\n  \r\n    //   // adding the task to the display\r\n    //   // taskDisplay.appendChild(printTask)\r\n    // }\r\n//////////////////////////////////////////////////////////////////////////\r\n    createCard(n) {\r\n      var card = document.createElement('article');\r\n      var subjectTag = document.createElement('span'),\r\n          title = document.createElement('h3'),\r\n          description = document.createElement('p'),\r\n          timeDetails = document.createElement('div'),\r\n              dueDate = document.createElement('h4'),\r\n              timeTag = document.createElement('span'),\r\n          \r\n          editIcon = document.createElement('div')\r\n          editIcon.classList.add('edit') \r\n          // editIcon.setAttribute('onmouseover', 'console.log(\"nananan\")')\r\n          editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n          editIcon.addEventListener('click', function(event) {\r\n            updateVar()\r\n            alert('yo')\r\n            console.log('clicked')\r\n            // e.preventDefault();\r\n            if (overlayToggle == false) {\r\n              createTaskForm.classList.add('active')\r\n              overlayToggle = true;\r\n            } else if (overlayToggle == true) {\r\n              createTaskForm.classList.remove('active')\r\n              overlayToggle = false;\r\n            }\r\n          })\r\n          // editIcon.innerHTML = `<path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>`\r\n\r\n      card.classList.add('card')\r\n      card.setAttribute('id', 't-'+ n)\r\n      subjectTag.classList.add('tag')\r\n      subjectTag.classList.add('subject')\r\n      timeDetails.classList.add('time-details')\r\n      timeTag.classList.add('time')\r\n      timeTag.classList.add('tag')\r\n      title.textContent = this.name;\r\n      description.textContent = this.description;\r\n      subjectTag.textContent = this.subject;\r\n      // status.textContent = this.status;\r\n      dueDate.textContent = this.dueDate;\r\n      timeTag.textContent = this.estimatedTimeHr + this.estimatedTimeMin;\r\n\r\n      // appending time details to time div\r\n      timeDetails.appendChild(dueDate)\r\n      timeDetails.appendChild(timeTag)\r\n\r\n      // appending everything to whole div\r\n      card.appendChild(subjectTag)\r\n      card.appendChild(title)\r\n      card.appendChild(description)\r\n      card.appendChild(editIcon)\r\n      card.appendChild(timeDetails)\r\n\r\n      // appending card to column\r\n      var cardContainer = document.getElementsByClassName('cards')\r\n      if (this.status == 'ready') {\r\n        cardContainer[0].appendChild(card)\r\n      } else if (this.status == 'in-progress') {\r\n        cardContainer[1].appendChild(card)\r\n      } else if (this.status == 'done') {\r\n        cardContainer[2].appendChild(card)\r\n      }\r\n      // console.log(status)\r\n      // cardContainer.appendChild(card)\r\n    }\r\n  }\r\n  \r\n  // initialising task delete button\r\n  var taskDelete = document.createElement('button')\r\n  \r\n  // creating an array that will be populated with tasks\r\n  var taskList = [];\r\n  \r\n  // accessing the full form to create tasks\r\n  // var taskForm = document.getElementById('task-form');\r\n  \r\n  // article to display tasks\r\n  // var taskDisplay = document.getElementById('task-display');\r\n  \r\n  // initialising variables\r\n  var taskDetails, task, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus;\r\n  \r\n  // selecting the submit button for the form\r\n  var taskSubmitButton = document.getElementById('create-task-submit');\r\n  \r\n  // something to populate tasks with on the page\r\n  \r\n  // on submit:\r\n  taskSubmitButton.addEventListener('click', function(event) {\r\n    event.preventDefault()\r\n    taskDetails = createTaskForm.querySelectorAll('form input');\r\n    console.log(taskDetails)\r\n    // get all of the user input in the input fields\r\n    taskID = taskList.length\r\n    taskName = taskDetails[0].value;\r\n    taskDescription = taskDetails[1].value;\r\n    taskSubject = taskDetails[2].value;\r\n    var statuses = createTaskForm.querySelector('select[name=status]');\r\n    taskStatus = statuses.value;\r\n    // console.log('taskstatusis:' + taskStatus)\r\n    // for (let i = 0; i < statuses.length; i ++) {\r\n    //   if (statuses[i].selected == 'selected') {\r\n    //     taskStatus = statuses[i].value\r\n    //   }\r\n    // }\r\n\r\n  \r\n    // checking the radios \r\n    if (taskDetails[3].checked == true) {\r\n      taskPriorityRating = taskDetails[3].value\r\n    } else if (taskDetails[4].checked == true) {\r\n      taskPriorityRating = taskDetails[4].value\r\n    } else if (taskDetails[5].checked == true) {\r\n      taskPriorityRating = taskDetails[5].value\r\n    }\r\n  \r\n    taskEstimatedTimeHr = taskDetails[6].value;\r\n    taskEstimatedTimeMin = taskDetails[7].value;\r\n    taskDueDate = taskDetails[8].value;\r\n    // checking the radios\r\n    // if (taskDetails[7].checked == true) {\r\n    //   taskCompletionStatus = taskDetails[7].value;\r\n    // } else if (taskDetails[8].checked == true) {\r\n    //   taskCompletionStatus = taskDetails[8].value;\r\n    // }\r\n  \r\n    taskSaveStatus = 'saved';\r\n  \r\n    // create a new task using the task class\r\n    task = new Task(taskID, taskName, taskDescription, taskSubject, taskStatus, taskPriorityRating, taskEstimatedTimeHr, taskEstimatedTimeMin, taskDueDate, taskSaveStatus)\r\n    // task = new Task(taskID, taskName, taskDescription, taskDueDate, taskPriorityRating, taskEstimatedTime, taskCompletionStatus, taskSaveStatus)\r\n  \r\n    // add the task to the task list (repo)\r\n  \r\n    // task.printTask(task.addTask());\r\n\r\n    // create new card with task\r\n    if (taskList.length > 0) {\r\n      taskList.filter(function(element) {\r\n        if (element.id == taskID) {\r\n          task.updateTask(taskID)\r\n        } else {\r\n          task.createCard(task.addTask());\r\n        }\r\n\r\n      })\r\n    } else {\r\n      task.createCard(task.addTask());\r\n    }\r\n\r\n\r\n\r\n\r\n    // exit form\r\n    overlayToggle = false;\r\n    createTaskForm.classList.remove('active')\r\n    createTaskForm.reset();\r\n    // print to check\r\n    console.log(taskList)\r\n  })\r\n  \r\n  \r\n// getting values of the card for editing\r\n\r\n// //////////////// ADD COLUMN /////////////////////// //\r\nconst addColumnForm = document.getElementById('add-column-form')\r\nvar newColumnToggle = false;\r\nconst newColumn = document.getElementById('new-column');\r\n\r\n// adding an event listener to bring up the form\r\nnewColumn.addEventListener('click', function() {\r\n  if (newColumnToggle == false) {\r\n    addColumnForm.classList.add('active')\r\n    newColumnToggle = true\r\n  } else if (newColumnToggle == true) {\r\n    addColumnForm.classList.remove('active')\r\n    newColumnToggle = false\r\n  }\r\n})\r\n\r\n// adding an event listener for submitting the column\r\nconst columnSubmitButton = document.getElementById('add-column-submit')\r\ncolumnSubmitButton.addEventListener('click', function(event) {\r\n  event.preventDefault();\r\n\r\n  // creating the column\r\n  let column = document.createElement('div')\r\n  column.classList.add('column')\r\n  let title = document.createElement('div')\r\n  title.classList.add('title')\r\n  let columnName = document.createElement('input')\r\n  columnName.classList.add('column-name')\r\n\r\n  // giving it the name provided by the user\r\n  let columnNameValue = addColumnForm.querySelectorAll('input')[0]\r\n  columnName.value = columnNameValue.value\r\n  let total = document.createElement('h3')\r\n  total.classList.add('total')\r\n  total.textContent = 0;\r\n  let cards = document.createElement('div')\r\n  cards.classList.add('cards')\r\n  title.appendChild(columnName)\r\n  title.appendChild(total)\r\n  column.appendChild(title)\r\n  column.appendChild(cards)\r\n  let tasks = document.getElementById('tasks')\r\n  tasks.appendChild(column)\r\n  // smooth scroll to the new column\r\n  tasks.scrollTo({\r\n    top: 0,\r\n    left: tasks.clientWidth,\r\n    behavior: 'smooth'\r\n  })\r\n  // close the form\r\n  newColumnToggle = false;\r\n  addColumnForm.reset()\r\n  addColumnForm.classList.remove('active')\r\n\r\n  // IDEALLY REFRESH COUNTER\r\n  // counter(total, cards)\r\n  var newColumn = document.querySelectorAll('.column')[-1]\r\n  // IDEALLY ADD CONTAINER TO SORTABLE\r\n  // sortable.addContainer(newColumn)\r\n\r\n})\r\n// console.log(pizza)\r\n\r\n\r\n\r\n"],"names":["$e19da54cefdb92cfcc179546114023c9$var$newTask","document","getElementById","$e19da54cefdb92cfcc179546114023c9$var$editTask","querySelectorAll","$e19da54cefdb92cfcc179546114023c9$var$updateVar","console","log","$e19da54cefdb92cfcc179546114023c9$var$createTaskForm","$e19da54cefdb92cfcc179546114023c9$var$overlayToggle","addEventListener","classList","add","remove","forEach","elem","$e19da54cefdb92cfcc179546114023c9$var$Task","constructor","id","name","description","subject","status","priorityRating","estimatedTimeHr","estimatedTimeMin","dueDate","saveStatus","this","addTask","$e19da54cefdb92cfcc179546114023c9$var$taskList","push","updateTask","myObject","filter","element","createCard","n","card","createElement","subjectTag","title","timeDetails","timeTag","editIcon","innerHTML","event","alert","setAttribute","textContent","appendChild","cardContainer","getElementsByClassName","$e19da54cefdb92cfcc179546114023c9$var$taskDetails","$e19da54cefdb92cfcc179546114023c9$var$task","$e19da54cefdb92cfcc179546114023c9$var$taskName","$e19da54cefdb92cfcc179546114023c9$var$taskDescription","$e19da54cefdb92cfcc179546114023c9$var$taskSubject","$e19da54cefdb92cfcc179546114023c9$var$taskStatus","$e19da54cefdb92cfcc179546114023c9$var$taskPriorityRating","$e19da54cefdb92cfcc179546114023c9$var$taskEstimatedTimeHr","$e19da54cefdb92cfcc179546114023c9$var$taskEstimatedTimeMin","$e19da54cefdb92cfcc179546114023c9$var$taskDueDate","preventDefault","taskID","length","value","statuses","querySelector","checked","reset","$e19da54cefdb92cfcc179546114023c9$var$addColumnForm","$e19da54cefdb92cfcc179546114023c9$var$newColumnToggle","column","columnName","columnNameValue","total","cards","tasks","scrollTo","top","left","clientWidth","behavior"],"version":3,"file":"index.b7ef969a.js.map"}