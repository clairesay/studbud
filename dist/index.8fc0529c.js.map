{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./public/js/column.js","./public/js/column-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","class Column {\r\n    constructor(id, name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    // updates column on hover\r\n    updateColumns() {\r\n        this.updateDeleteButton()\r\n\r\n        // updating options from task form dropdown when a columns are renamed or deleted\r\n        const createTaskForm = document.getElementById('create-task-form')\r\n        \r\n        let columnNames = document.querySelectorAll('.column-name')\r\n        let statuses = createTaskForm.querySelector('select[name=status]');\r\n        // clear all statuses, then for re-populate\r\n        statuses.innerHTML = ''\r\n        columnNames.forEach(function (object) {\r\n            let newOption = document.createElement('option')\r\n            newOption.textContent = object.value\r\n            newOption.value = object.value\r\n            statuses.appendChild(newOption)\r\n        })\r\n    }\r\n\r\n    updateDeleteButton() {\r\n        // updating delete button functionality for all buttons - this function is reused where possible\r\n        let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n        allDeleteColumnButtons.forEach(function (button) {\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = button.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n\r\n            if (columns.length > 3 && cards.length == 0) {\r\n                button.classList.remove('disabled')\r\n            } else if (columns.length <= 3 || cards.length > 0) {\r\n                button.classList.add('disabled')\r\n            }\r\n        })\r\n    }\r\n\r\n    editColumn(editColumnButton) {\r\n        // reusable function for event listeners below\r\n        function updateColumns() {\r\n            // updating options from task form dropdown when a columns are renamed or deleted\r\n            let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n            allDeleteColumnButtons.forEach(function (button) {\r\n                let columns = document.getElementsByClassName('column')\r\n                let column = button.parentElement.parentElement\r\n                let cards = column.querySelectorAll('.card')\r\n    \r\n                if (columns.length > 3 && cards.length == 0) {\r\n                    button.classList.remove('disabled')\r\n                } else if (columns.length <= 3 || cards.length > 0) {\r\n                    button.classList.add('disabled')\r\n                }\r\n            })\r\n\r\n            // updating delete button functionality for all buttons\r\n            const createTaskForm = document.getElementById('create-task-form')\r\n            let columnNames = document.querySelectorAll('.column-name')\r\n            let statuses = createTaskForm.querySelector('select[name=status]');\r\n            statuses.innerHTML = ''\r\n            columnNames.forEach(function (object) {\r\n                let newOption = document.createElement('option')\r\n                newOption.textContent = object.value\r\n                newOption.value = object.value\r\n                statuses.appendChild(newOption)\r\n            })\r\n        }\r\n\r\n        // everytime the title is edited, update the value and refresh all edit and delete button statuses \r\n        let column = editColumnButton.parentElement\r\n        let columnNameInput = column.querySelector('input.column-name')\r\n        columnNameInput.addEventListener('change', function (event) {\r\n            updateColumns()\r\n        })\r\n        columnNameInput.addEventListener('keyup', function (event) {\r\n            if (event.key === 'Enter') {\r\n                columnNameInput.blur()\r\n            }\r\n            updateColumns()\r\n        })\r\n\r\n        // focus on input for renaming\r\n        editColumnButton.addEventListener('click', function () {\r\n            columnNameInput.focus()\r\n        })\r\n        // setting the tooltip\r\n        const columnEditToolTip = document.querySelector('div.tooltip#edit')\r\n        editColumnButton.addEventListener('mouseover', function () {\r\n            editColumnButton.parentElement.appendChild(columnEditToolTip)\r\n        })\r\n    }\r\n\r\n    deleteColumn(deleteColumnButton) {\r\n        // allow delete functionality for most columns as long as there are at least 3 and there are no cards in the column\r\n        deleteColumnButton.addEventListener('click', function () {\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = deleteColumnButton.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n            // check for more than 3 columns, and no cards within the column\r\n            if (columns.length > 3 && cards.length == 0) {\r\n                column.remove()\r\n\r\n                /////////////\r\n                // updating status of all the edit and delete buttons when the delete button is clicked\r\n                let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n                allDeleteColumnButtons.forEach(function (button) {\r\n                    let columns = document.getElementsByClassName('column')\r\n                    let column = button.parentElement.parentElement\r\n                    let cards = column.querySelectorAll('.card')\r\n\r\n                    if (columns.length > 3 && cards.length == 0) {\r\n                        button.classList.remove('disabled')\r\n                    } else if (columns.length <= 3 || cards.length > 0) {\r\n                        button.classList.add('disabled')\r\n                    }\r\n                })\r\n\r\n                // REMOVING OPTIONS FROM DROPDOWN FOR STATUSES\r\n                const createTaskForm = document.getElementById('create-task-form')\r\n                \r\n                // updating the options in the task form dropdown \r\n                let columnNames = document.querySelectorAll('.column-name')\r\n                let statuses = createTaskForm.querySelector('select[name=status]');\r\n                statuses.innerHTML = ''\r\n                columnNames.forEach(function (object) {\r\n                    let newOption = document.createElement('option')\r\n                    newOption.textContent = object.value\r\n                    newOption.value = object.value\r\n                    statuses.appendChild(newOption)\r\n                })\r\n            }\r\n        })\r\n\r\n        // update tooltip\r\n        const columnDeleteToolTip = document.querySelector('div.tooltip#delete')\r\n        // adding event listeners for appropriate functionality on mouse over\r\n        deleteColumnButton.addEventListener('mouseover', function () {\r\n            deleteColumnButton.parentElement.appendChild(columnDeleteToolTip)\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = deleteColumnButton.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n\r\n            if (columns.length > 3 && cards.length == 0) {\r\n                deleteColumnButton.classList.remove('disabled')\r\n            } else if (columns.length <= 3 || cards.length > 0) {\r\n                deleteColumnButton.classList.add('disabled')\r\n            }\r\n        })\r\n    }\r\n\r\n    createColumn() {\r\n        // duplicating existing columns and tweaking some elements to make it unique\r\n        let column = document.querySelector('div.column')\r\n        column = column.cloneNode(true)\r\n\r\n        let columnName = column.querySelector('input.column-name')\r\n        columnName.value = this.name;\r\n        let editButton = column.querySelector('svg.edit-column')\r\n        let deleteButton = column.querySelector('svg.delete-column')\r\n\r\n        let total = column.querySelector('h3.total')\r\n        total.textContent = 0;\r\n        // remove any existing cards inside the column\r\n        let cards = column.querySelectorAll('.card')\r\n        cards.forEach(function (card) {\r\n            card.remove()\r\n        })\r\n\r\n        let tasks = document.getElementById('tasks')\r\n        tasks.appendChild(column)\r\n\r\n        // update the buttons to enable delete and edit status\r\n        this.editColumn(editButton)\r\n        this.deleteColumn(deleteButton)\r\n        this.updateColumns()\r\n\r\n        // smooth scroll to the new column\r\n        tasks.scrollTo({\r\n            top: 0,\r\n            left: tasks.clientWidth,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n}\r\n\r\nexport default Column","import Column from './column'\r\nimport * as kanbanA from './kanban'\r\n\r\nconst createTaskForm = document.getElementById('create-task-form')\r\n\r\n// updates all column names after renaming\r\nfunction updateColumnNames() {\r\n    let columnNames = document.querySelectorAll('.column-name')\r\n    let statuses = createTaskForm.querySelector('select[name=status]');\r\n    statuses.innerHTML = ''\r\n    columnNames.forEach(function (object) {\r\n        let newOption = document.createElement('option')\r\n        newOption.textContent = object.value\r\n        newOption.value = object.value\r\n        statuses.appendChild(newOption)\r\n    })\r\n}\r\nupdateColumnNames()\r\n\r\nconst modalBackground = document.getElementById('modal-background')\r\nconst addColumnForm = document.getElementById('add-column-form')\r\nvar newColumnToggle = false;\r\nconst newColumn = document.getElementById('new-column');\r\n\r\n// toggle hide/show\r\nfunction toggleColumnForm() {\r\n    if (newColumnToggle == false) {\r\n        addColumnForm.classList.add('active')\r\n        newColumnToggle = true\r\n        modalBackground.style.display = 'flex'\r\n    } else if (newColumnToggle == true) {\r\n        addColumnForm.classList.remove('active')\r\n        addColumnForm.reset()\r\n        newColumnToggle = false\r\n        modalBackground.style.display = 'none'\r\n    }\r\n}\r\n\r\n// enable sortable functionality for column\r\nfunction createNewSortable() {\r\n    let newCard = document.querySelectorAll('.cards')\r\n    newCard = newCard[newCard.length - 1]\r\n    new Sortable(newCard, {\r\n        group: 'nested',\r\n        animation: 200,\r\n        swapThreshold: 0.65,\r\n        ghostClass: 'ghost-card',\r\n        chosenClass: 'chosen-card',\r\n        dragClass: \"sortable-drag\",\r\n        forceFallback: true,\r\n        onEnd: function (evt) {\r\n            kanbanA.countCards()\r\n        }\r\n    })\r\n}\r\n\r\n// adding an event listener to bring up the form\r\nnewColumn.addEventListener('click', toggleColumnForm)\r\n\r\n// adding an event listener for submitting the column\r\nconst columnCancelButton = document.getElementById('add-column-cancel')\r\nconst columnCloseButton = columnCancelButton.nextElementSibling\r\n\r\n// closing the column without saving\r\ncolumnCancelButton.addEventListener('click', function() {\r\n    toggleColumnForm()\r\n})\r\ncolumnCloseButton.addEventListener('click', function() {\r\n    toggleColumnForm()\r\n})\r\n\r\n// submitting column\r\nconst columnSubmitButton = document.getElementById('add-column-submit')\r\ncolumnSubmitButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n    let id = Date.now()\r\n    let name = addColumnForm.querySelector('input').value\r\n\r\n    let col = new Column(id, name)\r\n    col.createColumn()\r\n\r\n    updateColumnNames()\r\n\r\n    toggleColumnForm()\r\n\r\n    createNewSortable();\r\n})\r\n\r\n// //////////// COLUMN DELETE and EDIT BUTTONS\r\nconst columnDeleteToolTip = document.querySelector('div.tooltip#delete')\r\nconst columnEditToolTip = document.querySelector('div.tooltip#edit')\r\nconst columnTitles = document.querySelectorAll('div.title')\r\n// for all the columns\r\ncolumnTitles.forEach(function(columnTitle) {\r\n    let editColumnButton = columnTitle.querySelector('svg.edit-column')\r\n    let deleteColumnButton = columnTitle.querySelector('svg.delete-column')\r\n    let columnNameInput = columnTitle.querySelector('input.column-name')\r\n\r\n    // focus when clicked\r\n    editColumnButton.addEventListener('click', function() {\r\n        columnNameInput.focus()\r\n    })\r\n    // on change, reupdate all column names\r\n    columnNameInput.addEventListener('change', function(event) {\r\n        updateColumnNames();\r\n    })\r\n    // 'save' column name\r\n    columnNameInput.addEventListener('keyup', function(event) {\r\n        if (event.key === 'Enter') {\r\n            columnNameInput.blur()\r\n        }\r\n        updateColumnNames();\r\n    })\r\n    // tooltip on hover\r\n    editColumnButton.addEventListener('mouseover', function() {\r\n        editColumnButton.parentElement.appendChild(columnEditToolTip)\r\n    })\r\n    // delete columns as long as there are more than 3 and there are no cards within it\r\n    deleteColumnButton.addEventListener('click', function() {\r\n        let columns = document.getElementsByClassName('column')\r\n        let column = columnTitle.parentElement\r\n        let cards = column.querySelectorAll('.card')\r\n        if (columns.length > 3 && cards.length == 0) {\r\n            column.remove()\r\n            updateColumnNames()\r\n        }\r\n        // updating the 'disabled' visual of each delete icon\r\n        let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n        allDeleteColumnButtons.forEach( function(button) {\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = button.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n            \r\n            //if there are cards inside the column, or there are only 3 columns, delete is disabled. \r\n            if (columns.length > 3 && cards.length == 0) {\r\n                button.classList.remove('disabled')\r\n            } else if (columns.length <= 3 || cards.length > 0) {\r\n                button.classList.add('disabled')\r\n            }\r\n        })\r\n    })\r\n\r\n    // updating 'disabled' status for icons on hover\r\n    deleteColumnButton.addEventListener('mouseover', function() {\r\n        let columns = document.getElementsByClassName('column')\r\n        let column = columnTitle.parentElement\r\n        let cards = column.querySelectorAll('.card')\r\n        deleteColumnButton.parentElement.appendChild(columnDeleteToolTip)\r\n        if (columns.length > 3 && cards.length == 0) {\r\n            deleteColumnButton.classList.remove('disabled')\r\n        } else if (columns.length <= 3 || cards.length > 0) {\r\n            deleteColumnButton.classList.add('disabled')\r\n        }\r\n    })\r\n})\r\n"],"names":["globalThis","self","window","global","$8b38702613a783d21a2f250d3e1ed6dd$export$default","constructor","id","name","this","updateColumns","updateDeleteButton","createTaskForm","document","getElementById","columnNames","querySelectorAll","statuses","querySelector","innerHTML","forEach","object","newOption","createElement","textContent","value","appendChild","button","columns","getElementsByClassName","cards","parentElement","length","classList","remove","add","editColumn","editColumnButton","columnNameInput","addEventListener","event","key","blur","focus","columnEditToolTip","deleteColumn","deleteColumnButton","column","columnDeleteToolTip","createColumn","cloneNode","editButton","deleteButton","card","tasks","scrollTo","top","left","clientWidth","behavior","$a969fc4719ba336d4874bd6e736e73f1$var$createTaskForm","$a969fc4719ba336d4874bd6e736e73f1$var$updateColumnNames","$a969fc4719ba336d4874bd6e736e73f1$var$modalBackground","$a969fc4719ba336d4874bd6e736e73f1$var$addColumnForm","$a969fc4719ba336d4874bd6e736e73f1$var$newColumnToggle","$a969fc4719ba336d4874bd6e736e73f1$var$toggleColumnForm","style","display","reset","$a969fc4719ba336d4874bd6e736e73f1$var$columnCancelButton","$a969fc4719ba336d4874bd6e736e73f1$var$columnCloseButton","nextElementSibling","preventDefault","Date","now","col","newCard","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","dragClass","forceFallback","onEnd","evt","$a969fc4719ba336d4874bd6e736e73f1$var$createNewSortable","$a969fc4719ba336d4874bd6e736e73f1$var$columnDeleteToolTip","$a969fc4719ba336d4874bd6e736e73f1$var$columnEditToolTip","columnTitle"],"version":3,"file":"index.8fc0529c.js.map"}