{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@parcel/scope-hoisting/lib/prelude.js","./public/js/kanban.js","./public/js/task-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","var $parcel$modules = {};\nvar $parcel$bundles = {};\n\nif (parcelRequire == null) {\n  parcelRequire = function(name) {\n    // Execute the bundle wrapper function if there is one registered.\n    if (name in $parcel$bundles) {\n      let wrapper = $parcel$bundles[name];\n      delete $parcel$bundles[name];\n      wrapper();\n    }\n\n    if (name in $parcel$modules) {\n      return $parcel$modules[name];\n    }\n\n    // Try the node require function if it exists.\n    // Do not use `require` to prevent Webpack from trying to bundle this call\n    if (typeof module !== 'undefined' && typeof module.require === 'function') {\n      return module.require(name);\n    }\n\n    var err = new Error(\"Cannot find module '\" + name + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, exports) {\n    $parcel$modules[id] = exports;\n  };\n\n  parcelRequire.registerBundle = function registerBundle(id, fn) {\n    $parcel$bundles[id] = fn;\n    $parcel$modules[id] = {};\n  };\n\n  $parcel$global[parcelRequireName] = parcelRequire;\n}\n","// counts how many cards are in a kanban column\r\nexport function countCards() {\r\n    let total = document.querySelectorAll('.total'),\r\n        cardContainers = document.querySelectorAll('.cards'),\r\n        columns = document.querySelectorAll('.column'),\r\n        cards = document.getElementsByClassName('card');\r\n\r\n    let emptyStateMessage = document.getElementById('empty-state-tasks');\r\n        \r\n    // // if there are no cards, add an empty state\r\n    if (cards.length == 0) {\r\n        cardContainers[0].appendChild(emptyStateMessage)\r\n        emptyStateMessage.style.display = 'flex';\r\n    } else {\r\n        columns[0].appendChild(emptyStateMessage)\r\n        emptyStateMessage.style.display = 'none';\r\n    }\r\n\r\n    // writing the total number of cards at the head of each column\r\n    total.forEach(function count(object, index) {\r\n        let cardCount = 0;\r\n        for (let i = 0; i < cardContainers[index].querySelectorAll('.card').length; i ++) {\r\n            if (cardContainers[index].querySelectorAll('.card')[i].classList.length == 1) {\r\n                cardCount += 1\r\n            }\r\n        }\r\n        total[index].textContent = cardCount;\r\n    })\r\n}\r\ncountCards()\r\n\r\n// Setting sortable functionality to the cards with the sortable.js library\r\nexport function sortability() {\r\n    let cardContainers = document.querySelectorAll('.cards')\r\n    cardContainers.forEach(function(element) {\r\n        new Sortable(element, {\r\n            group: 'nested',\r\n            animation: 200,\r\n            swapThreshold: 0.65,\r\n            ghostClass: 'ghost-card',\r\n            chosenClass: 'chosen-card',\r\n            dragClass: \"sortable-drag\",\r\n            filter: '.filtered', // 'filtered' class is not draggable\r\n            forceFallback: true,\r\n            onStart: function (/**Event*/evt) {\r\n                let itemEl = evt.item;\r\n                itemEl.style.cursor = 'grabbing'\r\n\r\n                let body = document.getElementsByTagName('body')[0]\r\n                body.style.cursor = 'grabbing'\r\n                evt.oldIndex;  // element index within parent\r\n            },\r\n            onEnd: function (evt) {\r\n\r\n                let itemEl = evt.item;\r\n                itemEl.style.cursor = 'grab'\r\n                let body = document.getElementsByTagName('body')[0]\r\n                body.style.cursor = 'initial'\r\n\r\n                countCards()\r\n                // ADD COLUMN DELETE UPDATE\r\n                let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n                allDeleteColumnButtons.forEach( function(button) {\r\n                    let columns = document.getElementsByClassName('column')\r\n                    let column = button.parentElement.parentElement\r\n                    let cards = column.querySelectorAll('.card')\r\n                    \r\n                    if (columns.length > 3 && cards.length == 0) {\r\n                        button.classList.remove('disabled')\r\n                    } else if (columns.length <= 3) {\r\n                        button.classList.add('disabled') \r\n                    } else if (cards.length > 0) {\r\n                        button.classList.add('disabled')\r\n                        \r\n                    }\r\n                })\r\n            },\r\n        });\r\n    })\r\n}\r\nsortability()\r\n\r\n// setting sortable functionality to the columns with the sortable.js library\r\nvar deviceSize\r\n////////// MEDIA QUERIES https://www.w3schools.com/howto/howto_js_media_queries.asp ///////////////\r\nfunction mediaQuery(x) {\r\n    if (x.matches) { // If media query matches\r\n      deviceSize = 'mobile'\r\n    } else {\r\n      deviceSize = 'desktop'\r\n    }\r\n}\r\n\r\nvar x = window.matchMedia(\"(max-width: 700px)\")\r\nmediaQuery(x) // Call listener function at run time\r\nx.addEventListener('change', mediaQuery) // Attach listener function on state changes\r\n\r\nvar tasks = document.getElementById('tasks')\r\n// if (deviceSize == 'mobile') {\r\n\r\n// } else {\r\n//     new Sortable(tasks, {\r\n//         animation: 150,\r\n//         swapThreshold: 0.8,\r\n//         ghostClass: 'ghost-column',\r\n//         chosenClass: 'chosen-column',\r\n//         dragClass: \"sortable-drag\",\r\n//         forceFallback: true\r\n//     });\r\n// }\r\n","// import Task from './task'\r\nimport * as kanban from './kanban'\r\n\r\n// declaring a class called Task - this ordains the structure for all the elements to go into the class\r\nclass Task {\r\n    \r\n    // this is what it's made of\r\n    constructor(id, name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.subject = subject;\r\n        this.status = status;\r\n        this.priorityRating = priorityRating;\r\n        this.estimatedTimeHr = estimatedTimeHr;\r\n        this.estimatedTimeMin = estimatedTimeMin;\r\n        this.dueDate = dueDate;\r\n\r\n        // this.taskList = taskList\r\n    }\r\n\r\n    // this adds tasks to the array taskList\r\n    addTask() {\r\n        taskList.push(this);\r\n        console.log(taskList)\r\n        localStorage.setItem('taskList', JSON.stringify(taskList))\r\n        // console.log(localStorage.getItem('taskList'))\r\n        return this.id\r\n    }\r\n\r\n    // making sure the column 'deletable' status is updated when a new card is added.\r\n    updateColumnDelete() {\r\n        let allDeleteColumnButtons = document.querySelectorAll('svg.delete-column')\r\n        allDeleteColumnButtons.forEach( function(button) {\r\n            let columns = document.getElementsByClassName('column')\r\n            let column = button.parentElement.parentElement\r\n            let cards = column.querySelectorAll('.card')\r\n    \r\n            if (columns.length > 3 && cards.length == 0) {\r\n                button.classList.remove('disabled')\r\n            } else if (columns.length <= 3 || cards.length > 0) {\r\n                button.classList.add('disabled')\r\n            }\r\n        })\r\n    }\r\n\r\n    // this creates a new card and applies it to the kanban board\r\n    createCard(n) {\r\n        // initialising new elements\r\n        let card = document.createElement('article'),\r\n            subjectTag = document.createElement('span'),\r\n            title = document.createElement('h3'),\r\n            description = document.createElement('p'),\r\n            timeDetails = document.createElement('div'),\r\n            dueDate = document.createElement('h4'),\r\n            timeTag = document.createElement('span'),\r\n            editIcon = document.createElement('a'),\r\n            timeIcon = document.createElement('div'),\r\n            line = document.createElement('HR');\r\n\r\n        // setting classes and attributes\r\n        editIcon.classList.add('edit')\r\n        editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n\r\n        // time icon has been replaced with a priority rating\r\n        timeIcon.style.width = '12px'\r\n        timeIcon.style.height = '12px'\r\n        timeIcon.style.borderRadius = '12px'\r\n        if (this.priorityRating == 'Low') {\r\n            timeIcon.style.backgroundColor = '#70B815'\r\n        } else if (this.priorityRating == 'Mid') {\r\n            timeIcon.style.backgroundColor = '#E5C44C'\r\n        } else if (this.priorityRating == 'High') {\r\n            timeIcon.style.backgroundColor = '#F59273'\r\n        }\r\n        card.classList.add('card')\r\n        card.setAttribute('id', 't-' + n)\r\n        subjectTag.classList.add('tag')\r\n        subjectTag.classList.add('subject')\r\n        timeDetails.classList.add('time-details')\r\n        timeTag.classList.add('time')\r\n        timeTag.classList.add('tag')\r\n\r\n        // setting values\r\n        title.textContent = this.name;\r\n        description.textContent = this.description;\r\n        subjectTag.textContent = this.subject;\r\n\r\n        if (this.dueDate.length != 0) {\r\n            let dueDateElements = this.dueDate.split('-')\r\n            let month = months[parseInt(dueDateElements[1]) - 1]\r\n            let day = dueDateElements[2]\r\n            dueDate.textContent = 'Due ' + day + ' ' + month\r\n        } else {\r\n            dueDate.textContent = ''\r\n        }\r\n\r\n\r\n        // concatenating hour and minute estimated time durations\r\n        if (this.estimatedTimeHr > 0 && this.estimatedTimeMin > 0) {\r\n            timeTag.textContent = this.estimatedTimeHr + ' HR ' + this.estimatedTimeMin + ' MIN';\r\n        } else if (this.estimatedTimeHr == 0 && this.estimatedTimeMin > 0) {\r\n            timeTag.textContent = this.estimatedTimeMin + ' MIN';\r\n        } else if (this.estimatedTimeHr > 0 && this.estimatedTimeMin == 0) {\r\n            timeTag.textContent = this.estimatedTimeHr + ' HR';\r\n        } else {\r\n            timeTag.textContent = '∞'\r\n        }\r\n\r\n\r\n        // appending time details to time div\r\n        timeDetails.appendChild(timeIcon)\r\n        timeDetails.appendChild(dueDate)\r\n        timeDetails.appendChild(timeTag)\r\n\r\n        // appending everything to whole div\r\n        if (this.subject.length != 0) {\r\n            card.appendChild(subjectTag)\r\n        }\r\n        card.appendChild(title)\r\n        card.appendChild(description)\r\n        card.appendChild(line)\r\n        card.appendChild(timeDetails)\r\n        card.appendChild(editIcon)\r\n\r\n        // appending card to column\r\n        let columnNames = document.querySelectorAll('.column-name')\r\n        let cardContainers = document.querySelectorAll('.cards')\r\n        let currentStatus = this.status\r\n        columnNames.forEach(function setColumn(object, index) {\r\n            if (object.value == currentStatus) {\r\n                cardContainers[index].appendChild(card)\r\n            }\r\n        })\r\n\r\n        this.updateColumnDelete();\r\n    }\r\n}\r\n\r\n// export default Task\r\n\r\nvar subjectList = []\r\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n// subject should not duplicate\r\nfunction updateSubjectList() {\r\n    taskList.forEach(function(task) {\r\n        let taskSubject = task.subject.trim().toUpperCase()\r\n        let duplicate = false\r\n        for (i in subjectList) {\r\n            if (subjectList[i] == taskSubject) {\r\n                duplicate = true\r\n            }\r\n        }\r\n        if (duplicate == false) {\r\n            subjectList.push(taskSubject)\r\n        }\r\n    })\r\n\r\n    let subjectOptions = document.querySelector('datalist#subject')\r\n    subjectOptions.innerHTML = ''\r\n    subjectList.forEach(function(subject) {\r\n        let option = document.createElement('option')\r\n        option.textContent = subject\r\n        subjectOptions.appendChild(option)\r\n    })\r\n}\r\n\r\n// opening or closing the task form and changing its type\r\nfunction toggleTaskForm(type) {\r\n    // clearing validate text\r\n    validateText.innerHTML = ''\r\n    // \r\n    createTaskForm.querySelector('input').removeAttribute('required')\r\n\r\n    // check if its an update form if so, reword, and show corresponding buttons :)\r\n    if (type == 'update') {\r\n        createTaskForm.querySelector('h1').textContent = 'Edit task'\r\n        createTaskForm.classList.add('update')\r\n    } else {\r\n        createTaskForm.querySelector('h1').textContent = 'Create new task'\r\n        createTaskForm.classList.remove('update')\r\n    }\r\n\r\n    if (formVisible == false) {\r\n        createTaskForm.classList.add('active')\r\n        formVisible = true;\r\n        modalBackground.style.display = 'flex'\r\n    } else if (formVisible == true) {\r\n        createTaskForm.classList.remove('active')\r\n        formVisible = false;\r\n        modalBackground.style.display = 'none'\r\n        createTaskForm.reset()\r\n        taskSaveButton.value = ''\r\n\r\n        kanban.countCards()\r\n        kanban.sortability()\r\n    }\r\n}\r\n\r\n// adding event listeners to edit buttons \r\nfunction reupdate() {\r\n    // each card has an edit button that allows users to reaccess and update task details\r\n    let editButtons = document.querySelectorAll('.edit')\r\n    editButtons.forEach(function (editButton) {\r\n\r\n        // if there hasn't been a listener previously attached, attach one\r\n        if (editButton.getAttribute('listener') !== 'true') {\r\n            editButton.addEventListener('click', addAutoFill)\r\n            editButton.setAttribute('listener', 'true')\r\n        }\r\n        function addAutoFill() {\r\n            autoFillTaskDetails(editButton)\r\n        }\r\n    })\r\n}\r\n\r\n// autopopulates the form with existing task data previously inputted by user\r\nfunction autoFillTaskDetails(object) {\r\n    let objectId = object.parentElement.id;\r\n    objectId = objectId.replace('t-', '')\r\n\r\n    // for each element in the task list already\r\n    taskList.forEach(function(task) {\r\n\r\n        let thisTask = task\r\n        if (thisTask.id == objectId) {\r\n            let taskDetails = createTaskForm.querySelectorAll('form input');\r\n            let textArea = createTaskForm.querySelector('textarea')\r\n            // taskName\r\n            taskDetails[0].value = thisTask.name\r\n            // taskDescription\r\n            textArea.value = thisTask.description\r\n            // taskDetails[].value = thisTask.description\r\n            // taskSubject \r\n            taskDetails[1].value = thisTask.subject\r\n\r\n            // taskStatus\r\n            let statuses = createTaskForm.querySelector('select[name=status]');\r\n            statuses.value = object.parentElement.parentElement.parentElement.querySelector('div.title input.column-name').value\r\n\r\n            // taskPriorityRating\r\n            if (thisTask.priorityRating == 'Low') {\r\n                taskDetails[2].checked = true\r\n            } else if (thisTask.priorityRating == 'Mid') {\r\n                taskDetails[3].checked = true\r\n            } else if (thisTask.priorityRating == 'High') {\r\n                taskDetails[4].checked = true\r\n            }\r\n            \r\n            // taskEstimatedTimeHr\r\n            taskDetails[5].value = thisTask.estimatedTimeHr\r\n            // taskEstimatedTimeMin\r\n            taskDetails[6].value = thisTask.estimatedTimeMin\r\n            // taskDueDate\r\n            taskDetails[7].value = thisTask.dueDate\r\n\r\n            taskSaveButton.value = thisTask.id\r\n            toggleTaskForm('update')\r\n        }\r\n    })\r\n}\r\n\r\n// getting all of the task details inputted by the user\r\nfunction getTaskDetails(taskDetails) {\r\n    let name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate;\r\n\r\n    name = taskDetails[0].value;\r\n    let textArea = createTaskForm.querySelector('textarea')\r\n    description = textArea.value\r\n    // description = taskDetails[1].value;\r\n    subject = taskDetails[1].value;\r\n    \r\n    let statuses = createTaskForm.querySelector('select[name=status]');\r\n    status = statuses.value;\r\n\r\n    // checking the radios \r\n    if (taskDetails[2].checked == true) {\r\n        priorityRating = taskDetails[2].value\r\n    } else if (taskDetails[3].checked == true) {\r\n        priorityRating = taskDetails[3].value\r\n    } else if (taskDetails[4].checked == true) {\r\n        priorityRating = taskDetails[4].value\r\n    }\r\n\r\n    estimatedTimeHr = taskDetails[5].value;\r\n    estimatedTimeMin = taskDetails[6].value;\r\n    dueDate = taskDetails[7].value;\r\n\r\n    return {name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate}\r\n}\r\n\r\n///////\r\nvar taskList = []\r\nconst newTask = document.getElementById('new-task');\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nconst modalBackground = document.getElementById('modal-background')\r\nvar formVisible = false;\r\n\r\n// create a new task\r\nnewTask.addEventListener('click', toggleTaskForm)\r\n\r\n// adding event listeners to the form buttons.\r\nconst taskSaveButton = document.getElementById('task-save')\r\nconst taskCancelButton = document.getElementById('edit-task-cancel');\r\nconst taskCloseButton = taskCancelButton.nextElementSibling;\r\nconst taskDeleteButton = document.getElementById('edit-task-delete');\r\n\r\n// deleting a task\r\ntaskDeleteButton.addEventListener('click', function () {\r\n    let id = parseInt(taskSaveButton.value)\r\n\r\n    for (let i = 0; i < taskList.length; i++) {\r\n        let oldTask = taskList[i]\r\n        if (oldTask.id == id) {\r\n            taskList.splice(taskList.indexOf(oldTask), 1)\r\n            let oldCard = document.getElementById('t-' + id)\r\n            oldCard.remove();\r\n        }\r\n    }\r\n    toggleTaskForm()\r\n    reupdate()\r\n    updateSubjectList()\r\n})\r\n\r\n// cancelling the creation of a task or button\r\ntaskCancelButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\ntaskCloseButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\n\r\nvar validateText = createTaskForm.querySelector('.validate-message')\r\n// saving a new task or updating\r\ntaskSaveButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n\r\n    // initialising variables\r\n    let taskDetails = createTaskForm.querySelectorAll('form input');\r\n    // get all of the user input in the input fields\r\n    let task = getTaskDetails(taskDetails)\r\n\r\n    if (task.name == '') {\r\n        taskDetails[0].setAttribute('required', 'true')\r\n        validateText.innerHTML = 'Please enter a task name to save this task.'\r\n    } else {\r\n            // depends whether we are updating or creating a task\r\n        let taskID;\r\n        if (createTaskForm.classList.contains('update')) {\r\n            taskID = parseInt(taskSaveButton.value)\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                var oldTask = taskList[i]\r\n                if (oldTask.id == taskID) {\r\n                    taskList.splice(taskList.indexOf(oldTask), 1)\r\n                    let oldCard = document.getElementById('t-' + taskID)\r\n                    oldCard.remove();\r\n                    taskSaveButton.value = ''\r\n                }\r\n            }\r\n        } else {\r\n            taskID = Date.now()\r\n        }\r\n        // create a new task using the task class\r\n        let newTask = new Task(taskID, task.name, task.description, task.subject, task.status, task.priorityRating, task.estimatedTimeHr, task.estimatedTimeMin, task.dueDate)\r\n        // append to taskList and create new card with task\r\n        newTask.createCard(newTask.addTask());\r\n        // localStorage.setItem('taskList', JSON.stringify(taskList))\r\n        // close the form and add event listeners to any new items\r\n        toggleTaskForm()\r\n        reupdate()\r\n        // update subjects\r\n        updateSubjectList()\r\n    }\r\n\r\n})\r\n\r\nvar emptyStateButton = document.querySelector('#empty-state-tasks button')\r\nemptyStateButton.addEventListener('click', function() {\r\n    newTask.click()\r\n})"],"names":["$parcel$global","globalThis","self","window","global","$parcel$export","e","n","v","Object","defineProperty","get","enumerable","$parcel$modules","$parcel$bundles","parcelRequire","name","wrapper","module","require","err","Error","code","register","id","exports","registerBundle","fn","parcelRequireName","$6d9e305e14d7bdf2393ec8188bda1b8e$export$countCards","total","document","querySelectorAll","cardContainers","columns","cards","getElementsByClassName","emptyStateMessage","getElementById","length","appendChild","style","display","forEach","object","index","cardCount","i","classList","textContent","$6d9e305e14d7bdf2393ec8188bda1b8e$export$sortability","element","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","dragClass","filter","forceFallback","onStart","evt","item","cursor","getElementsByTagName","oldIndex","onEnd","button","parentElement","remove","add","$6d9e305e14d7bdf2393ec8188bda1b8e$var$mediaQuery","x","matches","$6d9e305e14d7bdf2393ec8188bda1b8e$var$x","matchMedia","addEventListener","$57ecf8e20857430314e333011d0feca6$var$Task","constructor","description","subject","status","priorityRating","estimatedTimeHr","estimatedTimeMin","dueDate","this","addTask","$57ecf8e20857430314e333011d0feca6$var$taskList","push","console","log","localStorage","setItem","JSON","stringify","updateColumnDelete","createCard","card","createElement","subjectTag","title","timeDetails","timeTag","editIcon","timeIcon","line","innerHTML","width","height","borderRadius","backgroundColor","setAttribute","dueDateElements","split","month","$57ecf8e20857430314e333011d0feca6$var$months","parseInt","day","columnNames","currentStatus","value","$57ecf8e20857430314e333011d0feca6$var$subjectList","$57ecf8e20857430314e333011d0feca6$var$updateSubjectList","task","taskSubject","trim","toUpperCase","duplicate","subjectOptions","querySelector","option","$57ecf8e20857430314e333011d0feca6$var$toggleTaskForm","type","$57ecf8e20857430314e333011d0feca6$var$validateText","$57ecf8e20857430314e333011d0feca6$var$createTaskForm","removeAttribute","$57ecf8e20857430314e333011d0feca6$var$formVisible","$57ecf8e20857430314e333011d0feca6$var$modalBackground","reset","$57ecf8e20857430314e333011d0feca6$var$taskSaveButton","$57ecf8e20857430314e333011d0feca6$var$reupdate","editButton","getAttribute","objectId","replace","thisTask","taskDetails","textArea","checked","$57ecf8e20857430314e333011d0feca6$var$autoFillTaskDetails","$57ecf8e20857430314e333011d0feca6$var$newTask","$57ecf8e20857430314e333011d0feca6$var$taskCancelButton","$57ecf8e20857430314e333011d0feca6$var$taskCloseButton","nextElementSibling","oldTask","splice","indexOf","event","preventDefault","$57ecf8e20857430314e333011d0feca6$var$getTaskDetails","taskID","contains","Date","now","newTask","click"],"version":3,"file":"index.HASH_REF_733473e29f7a8c702659199d6dc9f1b6.js.map"}