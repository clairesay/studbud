{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@parcel/scope-hoisting/lib/prelude.js","./public/js/task.js","./public/js/kanban.js","./public/js/task-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","var $parcel$modules = {};\nvar $parcel$bundles = {};\n\nif (parcelRequire == null) {\n  parcelRequire = function(name) {\n    // Execute the bundle wrapper function if there is one registered.\n    if (name in $parcel$bundles) {\n      let wrapper = $parcel$bundles[name];\n      delete $parcel$bundles[name];\n      wrapper();\n    }\n\n    if (name in $parcel$modules) {\n      return $parcel$modules[name];\n    }\n\n    // Try the node require function if it exists.\n    // Do not use `require` to prevent Webpack from trying to bundle this call\n    if (typeof module !== 'undefined' && typeof module.require === 'function') {\n      return module.require(name);\n    }\n\n    var err = new Error(\"Cannot find module '\" + name + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, exports) {\n    $parcel$modules[id] = exports;\n  };\n\n  parcelRequire.registerBundle = function registerBundle(id, fn) {\n    $parcel$bundles[id] = fn;\n    $parcel$modules[id] = {};\n  };\n\n  $parcel$global[parcelRequireName] = parcelRequire;\n}\n","// declaring a class called Task - this ordains the structure for all the elements to go into the class\r\nclass Task {\r\n    // this is what it's made of\r\n    constructor(id, name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate, taskList) {\r\n        // constructor(id, name, description, dueDate, priorityRating, estimatedTime, completionStatus, saveStatus) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.subject = subject;\r\n        this.status = status;\r\n        this.priorityRating = priorityRating;\r\n        this.estimatedTimeHr = estimatedTimeHr;\r\n        this.estimatedTimeMin = estimatedTimeMin;\r\n        this.dueDate = dueDate;\r\n\r\n        this.taskList = taskList\r\n    }\r\n\r\n    // this adds tasks to the array taskList\r\n    addTask() {\r\n        this.taskList.push(this);\r\n        return this.id\r\n    }\r\n\r\n    // this creates a new card and applies it to the kanban board\r\n    createCard(n) {\r\n        // initialising new elements\r\n        let card = document.createElement('article'),\r\n            subjectTag = document.createElement('span'),\r\n            title = document.createElement('h3'),\r\n            description = document.createElement('p'),\r\n            timeDetails = document.createElement('div'),\r\n            dueDate = document.createElement('h4'),\r\n            timeTag = document.createElement('span'),\r\n            editIcon = document.createElement('a'),\r\n            timeIcon = document.createElement('div'),\r\n            line = document.createElement('HR');\r\n\r\n        // setting classes and attributes\r\n        editIcon.classList.add('edit')\r\n        editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n        // timeIcon.classList.add('time-icon')\r\n        timeIcon.style.width = '12px'\r\n        timeIcon.style.height = '12px'\r\n        timeIcon.style.borderRadius = '12px'\r\n        if (this.priorityRating == 'Low') {\r\n            timeIcon.style.backgroundColor = '#70B815'\r\n        } else if (this.priorityRating == 'Mid') {\r\n            timeIcon.style.backgroundColor = '#E5C44C'\r\n        } else if (this.priorityRating == 'High') {\r\n            timeIcon.style.backgroundColor = '#F59273'\r\n        }\r\n        // timeIcon.innerHTML = `<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        // <path d=\"M9.99 3.05176e-05C4.47 3.05176e-05 0 4.48003 0 10C0 15.52 4.47 20 9.99 20C15.52 20 20 15.52 20 10C20 4.48003 15.52 3.05176e-05 9.99 3.05176e-05ZM10 18C5.58 18 2 14.42 2 10C2 5.58003 5.58 2.00003 10 2.00003C14.42 2.00003 18 5.58003 18 10C18 14.42 14.42 18 10 18Z\" fill=\"#909090\"/>\r\n        // <path d=\"M10.5 5.00003H9V11L14.25 14.15L15 12.92L10.5 10.25V5.00003Z\" fill=\"#909090\"/>\r\n        // </svg>`\r\n        card.classList.add('card')\r\n        card.setAttribute('id', 't-' + n)\r\n        subjectTag.classList.add('tag')\r\n        subjectTag.classList.add('subject')\r\n        timeDetails.classList.add('time-details')\r\n        timeTag.classList.add('time')\r\n        timeTag.classList.add('tag')\r\n\r\n        // setting values\r\n        title.textContent = this.name;\r\n        description.textContent = this.description;\r\n        subjectTag.textContent = this.subject;\r\n        dueDate.textContent = this.dueDate;\r\n        timeTag.textContent = this.estimatedTimeHr + this.estimatedTimeMin;\r\n\r\n        // appending time details to time div\r\n        timeDetails.appendChild(dueDate)\r\n        timeDetails.appendChild(timeTag)\r\n\r\n        // appending everything to whole div\r\n        card.appendChild(subjectTag)\r\n        card.appendChild(title)\r\n        card.appendChild(description)\r\n        card.appendChild(line)\r\n        card.appendChild(timeIcon)\r\n        card.appendChild(timeDetails)\r\n        card.appendChild(editIcon)\r\n\r\n        // appending card to column\r\n        let columnNames = document.querySelectorAll('.column-name')\r\n        let cardContainers = document.querySelectorAll('.cards')\r\n        let currentStatus = this.status\r\n        columnNames.forEach(function setColumn(object, index) {\r\n            if (object.value == currentStatus) {\r\n                cardContainers[index].appendChild(card)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default Task","// counts how many cards are in a kanban column\r\nexport function countCards() {\r\n    let total = document.querySelectorAll('.total'),\r\n        cardContainers = document.querySelectorAll('.cards'),\r\n        columns = document.querySelectorAll('.column'),\r\n        cards = document.getElementsByClassName('card')\r\n\r\n    const emptyStateMessage = document.getElementById('empty-state-message')\r\n        \r\n    // if there are no cards, add an empty state\r\n    if (cards.length == 0) {\r\n        columns[0].appendChild(emptyStateMessage)\r\n        emptyStateMessage.style.display = 'flex';\r\n    } else {\r\n        emptyStateMessage.style.display = 'none';\r\n    }\r\n\r\n    // writing the total number of cards at the head of each column\r\n    total.forEach(function count(object, index) {\r\n        let cardCount = 0;\r\n        for (let i = 0; i < cardContainers[index].querySelectorAll('.card').length; i ++) {\r\n            if (cardContainers[index].querySelectorAll('.card')[i].classList.length == 1) {\r\n                cardCount += 1\r\n            }\r\n        }\r\n        total[index].textContent = cardCount;\r\n    })\r\n}\r\ncountCards()\r\n\r\n// Setting sortable functionality to the cards with the sortable.js library\r\nvar cardContainers = document.querySelectorAll('.cards')\r\ncardContainers.forEach(function(element) {\r\n    new Sortable(element, {\r\n\t\tgroup: 'nested',\r\n\t\tanimation: 200,\r\n\t\tswapThreshold: 0.65,\r\n        ghostClass: 'ghost-card',\r\n        chosenClass: 'chosen-card',\r\n        forceFallback: true,\r\n        onEnd: function (evt) {\r\n            countCards()\r\n        },\r\n\t});\r\n})\r\n\r\n// setting sortable functionality to the columns with the sortable.js library\r\nvar tasks = document.getElementById('tasks')\r\nnew Sortable(tasks, {\r\n    animation: 150,\r\n    swapThreshold: 0.8,\r\n    ghostClass: 'ghost-column',\r\n    chosenClass: 'chosen-column',\r\n    forceFallback: true\r\n});","import Task from './task'\r\nimport * as kanban from './kanban'\r\n\r\n// opening or closing the task form and changing its type\r\nfunction toggleTaskForm(type) {\r\n    // check if its an update form if so, reword, and show corresponding buttons :)\r\n    if (type == 'update') {\r\n        createTaskForm.querySelector('h1').textContent = 'Edit an existing task'\r\n        createTaskForm.classList.add('update')\r\n    } else {\r\n        createTaskForm.querySelector('h1').textContent = 'Create a new task'\r\n        createTaskForm.classList.remove('update')\r\n    }\r\n\r\n    if (formVisible == false) {\r\n        createTaskForm.classList.add('active')\r\n        formVisible = true;\r\n        modalBackground.style.display = 'flex'\r\n    } else if (formVisible == true) {\r\n        createTaskForm.classList.remove('active')\r\n        formVisible = false;\r\n        modalBackground.style.display = 'none'\r\n        createTaskForm.reset()\r\n        taskSaveButton.value = ''\r\n\r\n        kanban.countCards()\r\n    }\r\n}\r\n\r\n// adding event listeners to edit buttons \r\nfunction reupdate() {\r\n    // each card has an edit button that allows users to reaccess and update task details\r\n    let editButtons = document.querySelectorAll('.edit')\r\n    editButtons.forEach(function (editButton) {\r\n\r\n        // if there hasn't been a listener previously attached, attach one\r\n        if (editButton.getAttribute('listener') !== 'true') {\r\n            editButton.addEventListener('click', addAutoFill)\r\n            editButton.setAttribute('listener', 'true')\r\n        }\r\n        function addAutoFill() {\r\n            autoFillTaskDetails(editButton)\r\n        }\r\n    })\r\n}\r\n\r\n// autopopulates the form with existing task data previously inputted by user\r\nfunction autoFillTaskDetails(object) {\r\n    let objectId = object.parentElement.id;\r\n    objectId = objectId.replace('t-', '')\r\n\r\n    taskList.forEach(function(task) {\r\n\r\n        let thisTask = task\r\n        if (thisTask.id == objectId) {\r\n            let taskDetails = createTaskForm.querySelectorAll('form input');\r\n\r\n            // taskName\r\n            taskDetails[0].value = thisTask.name\r\n            // taskDescription\r\n            taskDetails[1].value = thisTask.description\r\n            // taskSubject \r\n            taskDetails[2].value = thisTask.subject\r\n\r\n            // taskStatus\r\n            let statuses = createTaskForm.querySelector('select[name=status]');\r\n            statuses.value = object.parentElement.parentElement.parentElement.querySelector('div.title input.column-name').value\r\n\r\n            // taskPriorityRating\r\n            if (thisTask.priorityRating == 'Low') {\r\n                taskDetails[3].checked = true\r\n            } else if (thisTask.priorityRating == 'Mid') {\r\n                taskDetails[4].checked = true\r\n            } else if (thisTask.priorityRating == 'High') {\r\n                taskDetails[5].checked = true\r\n            }\r\n            \r\n            // taskEstimatedTimeHr\r\n            taskDetails[6].value = thisTask.estimatedTimeHr\r\n            // taskEstimatedTimeMin\r\n            taskDetails[7].value = thisTask.estimatedTimeMin\r\n            // taskDueDate\r\n            taskDetails[8].value = thisTask.dueDate\r\n\r\n            taskSaveButton.value = thisTask.id\r\n            toggleTaskForm('update')\r\n        }\r\n    })\r\n}\r\n\r\n// getting all of the task details inputted by the user\r\nfunction getTaskDetails(taskDetails) {\r\n    let name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate;\r\n\r\n    name = taskDetails[0].value;\r\n    description = taskDetails[1].value;\r\n    subject = taskDetails[2].value;\r\n    var statuses = createTaskForm.querySelector('select[name=status]');\r\n    status = statuses.value;\r\n\r\n    // checking the radios \r\n    if (taskDetails[3].checked == true) {\r\n        priorityRating = taskDetails[3].value\r\n    } else if (taskDetails[4].checked == true) {\r\n        priorityRating = taskDetails[4].value\r\n    } else if (taskDetails[5].checked == true) {\r\n        priorityRating = taskDetails[5].value\r\n    }\r\n\r\n    estimatedTimeHr = taskDetails[6].value;\r\n    estimatedTimeMin = taskDetails[7].value;\r\n    dueDate = taskDetails[8].value;\r\n\r\n    return {name, description, subject, status, priorityRating, estimatedTimeHr, estimatedTimeMin, dueDate}\r\n}\r\n\r\n///////\r\nvar taskList = []\r\nconst newTask = document.getElementById('new-task');\r\nconst createTaskForm = document.getElementById('create-task-form')\r\nconst modalBackground = document.getElementById('modal-background')\r\nvar formVisible = false;\r\n\r\n// create a new task\r\nnewTask.addEventListener('click', toggleTaskForm)\r\n\r\n// adding event listeners to the form buttons.\r\nconst taskSaveButton = document.getElementById('task-save')\r\nconst taskCancelButton = document.getElementById('edit-task-cancel');\r\nconst taskCloseButton = taskCancelButton.nextElementSibling;\r\nconst taskDeleteButton = document.getElementById('edit-task-delete');\r\n\r\n// deleting a task\r\ntaskDeleteButton.addEventListener('click', function () {\r\n    let id = parseInt(taskSaveButton.value)\r\n\r\n    for (let i = 0; i < taskList.length; i++) {\r\n        let oldTask = taskList[i]\r\n        if (oldTask.id == id) {\r\n            taskList.splice(taskList.indexOf(oldTask), 1)\r\n            let oldCard = document.getElementById('t-' + id)\r\n            oldCard.remove();\r\n        }\r\n    }\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\n\r\n// cancelling the creation of a task or button\r\ntaskCancelButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\ntaskCloseButton.addEventListener('click', function () {\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\n\r\n// saving a new task or updating\r\ntaskSaveButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n\r\n    // depends whether we are updating or creating a task\r\n    let taskID;\r\n    if (createTaskForm.classList.contains('update')) {\r\n        taskID = parseInt(taskSaveButton.value)\r\n        for (let i = 0; i < taskList.length; i++) {\r\n            var oldTask = taskList[i]\r\n            if (oldTask.id == taskID) {\r\n                taskList.splice(taskList.indexOf(oldTask), 1)\r\n                let oldCard = document.getElementById('t-' + taskID)\r\n                oldCard.remove();\r\n                taskSaveButton.value = ''\r\n            }\r\n        }\r\n    } else {\r\n        taskID = Date.now()\r\n    }\r\n\r\n    // initialising variables\r\n    let taskDetails = createTaskForm.querySelectorAll('form input');\r\n    // get all of the user input in the input fields\r\n    let task = getTaskDetails(taskDetails)\r\n\r\n    // create a new task using the task class\r\n    let newTask = new Task(taskID, task.name, task.description, task.subject, task.status, task.priorityRating, task.estimatedTimeHr, task.estimatedTimeMin, task.dueDate, taskList)\r\n    // append to taskList and create new card with task\r\n    newTask.createCard(newTask.addTask());\r\n\r\n    // close the form and add event listeners to any new items\r\n    toggleTaskForm()\r\n    reupdate()\r\n})\r\n\r\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$bundles","parcelRequire","name","wrapper","module","require","err","Error","code","register","id","exports","registerBundle","fn","parcelRequireName","$02b9e2c5d0bd51a4eedd6b8bd9d15b20$export$default","constructor","description","subject","status","priorityRating","estimatedTimeHr","estimatedTimeMin","dueDate","taskList","this","addTask","push","createCard","n","card","document","createElement","subjectTag","title","timeDetails","timeTag","editIcon","timeIcon","line","classList","add","innerHTML","style","width","height","borderRadius","backgroundColor","setAttribute","textContent","appendChild","columnNames","querySelectorAll","cardContainers","currentStatus","forEach","object","index","value","e","v","$6d9e305e14d7bdf2393ec8188bda1b8e$export$countCards","total","columns","cards","getElementsByClassName","emptyStateMessage","getElementById","length","display","cardCount","i","Object","defineProperty","get","enumerable","element","Sortable","group","animation","swapThreshold","ghostClass","chosenClass","forceFallback","onEnd","evt","$6d9e305e14d7bdf2393ec8188bda1b8e$var$tasks","$57ecf8e20857430314e333011d0feca6$var$toggleTaskForm","type","$57ecf8e20857430314e333011d0feca6$var$createTaskForm","querySelector","remove","$57ecf8e20857430314e333011d0feca6$var$formVisible","$57ecf8e20857430314e333011d0feca6$var$modalBackground","reset","$57ecf8e20857430314e333011d0feca6$var$taskSaveButton","$57ecf8e20857430314e333011d0feca6$var$reupdate","editButton","getAttribute","addEventListener","objectId","parentElement","replace","$57ecf8e20857430314e333011d0feca6$var$taskList","task","thisTask","taskDetails","checked","$57ecf8e20857430314e333011d0feca6$var$autoFillTaskDetails","$57ecf8e20857430314e333011d0feca6$var$newTask","$57ecf8e20857430314e333011d0feca6$var$taskCancelButton","$57ecf8e20857430314e333011d0feca6$var$taskCloseButton","nextElementSibling","parseInt","oldTask","splice","indexOf","event","taskID","preventDefault","contains","Date","now","$57ecf8e20857430314e333011d0feca6$var$getTaskDetails","newTask"],"version":3,"file":"index.HASH_REF_733473e29f7a8c702659199d6dc9f1b6.js.map"}