{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./public/js/group.js","./public/js/group-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","class Group {\r\n    constructor(id, name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    createGroup() {\r\n        // creating the group\r\n        let group = document.querySelector('div.group')\r\n        group = group.cloneNode(true)\r\n        group.style.display = 'flex'\r\n\r\n        // setting the relevant name, link values and edit and delete buttons\r\n        let groupName = group.querySelector('input.group-name'),\r\n            groupLink = group.querySelector('h3.open-link'),\r\n            editButton = group.querySelector('svg.edit-group'),\r\n            deleteButton = group.querySelector('svg.delete-group')\r\n\r\n        // setting attributes\r\n        groupName.value = this.name;\r\n        groupName.removeAttribute('disabled')        \r\n        groupLink.setAttribute('listener', 'false')\r\n        editButton.classList.remove('first')\r\n        deleteButton.classList.remove('first')\r\n\r\n        // removing any tiles that might have duplicated over\r\n        let tiles = group.querySelectorAll('.tiles > *')\r\n        tiles.forEach(function (tile) {\r\n            tile.remove()\r\n        })\r\n \r\n        // append the group to the content tab\r\n        let content = document.getElementById('content')\r\n        content.appendChild(group)\r\n\r\n        // smooth scroll to the new column\r\n        group.scrollTo({\r\n            top: content.clientHeight,\r\n            left: 0,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n}\r\n\r\nexport default Group","import Group from './group'\r\nimport * as resource from './resource'\r\n\r\n// begin by updating how many tiles there are in the groups\r\nresource.countTiles()\r\n\r\n// selecting some DOM elements\r\nconst createContentForm = document.getElementById('create-content-form')\r\nconst modalBackground = document.getElementById('modal-background')\r\nconst addGroupForm = document.getElementById('add-group-form')\r\nvar newGroupToggle = false;\r\nconst newGroup = document.getElementById('new-group');\r\n\r\n// updating the group names that a card can be organised in, if any change happens to the group names\r\nfunction updateGroupNames() {\r\n    let groupNames = document.querySelectorAll('.group-name')\r\n    let groups = createContentForm.querySelector('select[name=group]');\r\n    groups.innerHTML = ''\r\n    // for all of the group names, we'll want to update the select options\r\n    groupNames.forEach(function (object) {\r\n        let newOption = document.createElement('option')\r\n        newOption.textContent = object.value\r\n        newOption.value = object.value\r\n        groups.appendChild(newOption)\r\n    })\r\n}\r\nupdateGroupNames()\r\n\r\n// opening/closing the 'add a new group' form\r\nfunction toggleGroupForm() {\r\n    // resetting any validation errors\r\n    validateText.innerHTML = ''\r\n    let name = addGroupForm.querySelector('input')\r\n    name.removeAttribute('required')\r\n\r\n    // open or close the group form\r\n    if (newGroupToggle == false) {\r\n        addGroupForm.classList.add('active')\r\n        newGroupToggle = true\r\n        modalBackground.style.display = 'flex'\r\n    } else if (newGroupToggle == true) {\r\n        addGroupForm.classList.remove('active')\r\n        addGroupForm.reset()\r\n        newGroupToggle = false\r\n        modalBackground.style.display = 'none'\r\n    }\r\n}\r\n\r\n// adding an event listener to bring up the form\r\nnewGroup.addEventListener('click', toggleGroupForm)\r\n\r\n// adding event listeners to close the form without saving any input\r\nconst groupCancelButton = document.getElementById('add-group-cancel')\r\nconst groupCloseButton = groupCancelButton.nextElementSibling\r\ngroupCancelButton.addEventListener('click', function() {\r\n    toggleGroupForm()\r\n})\r\ngroupCloseButton.addEventListener('click', function() {\r\n    toggleGroupForm()\r\n})\r\n\r\n// adding an event listener for submitting the column\r\nconst groupSubmitButton = document.getElementById('add-group-submit')\r\nvar validateText = addGroupForm.querySelector('.validate-message')\r\ngroupSubmitButton.addEventListener('click', function (event) {\r\n    event.preventDefault();\r\n\r\n    // setting an id and name\r\n    let id = Date.now()\r\n    let name = addGroupForm.querySelector('input')\r\n\r\n    // if the user hasn't inputted anything, disallow form submission\r\n    if (name.value == '') {\r\n        validateText.innerHTML = 'Please enter a name for this group.'\r\n        name.setAttribute('required', 'true')\r\n    } else {\r\n    // create new object in group class\r\n    let group = new Group(id, name.value)\r\n    group.createGroup()\r\n\r\n    // reset states\r\n    toggleGroupForm()\r\n    updateGroupNames()\r\n    resource.openGroupLinks()\r\n    resource.countTiles()\r\n    groupEditDeleteFunctionality()\r\n    }\r\n})\r\n\r\n// allow for each group's edit and delete functionality\r\nfunction groupEditDeleteFunctionality() {\r\n\r\n    const groupTitles = document.querySelectorAll('div.group-title')\r\n    groupTitles.forEach(function(groupTitle) {\r\n        let editGroupButton = groupTitle.querySelector('svg.edit-group')\r\n        let deleteGroupButton = groupTitle.querySelector('svg.delete-group')\r\n        let groupNameInput = groupTitle.querySelector('input.group-name')\r\n    \r\n        // focus when clicked\r\n        editGroupButton.addEventListener('click', function() {\r\n            groupNameInput.focus()\r\n        })\r\n         // on change, reupdate all group names\r\n        groupNameInput.addEventListener('change', function(event) {\r\n            updateGroupNames();\r\n        })\r\n        // 'save' column name\r\n        groupNameInput.addEventListener('keyup', function(event) {\r\n            if (event.key === 'Enter') {\r\n                groupNameInput.blur()\r\n            }\r\n            updateGroupNames();\r\n        })\r\n        // tooltip on hover\r\n        editGroupButton.addEventListener('mouseover', function() {\r\n            let groupEditToolTip = document.querySelector('div.tooltip#edit-group')\r\n\r\n            if (groupEditToolTip === null) {\r\n                let newToolTip = document.createElement('div')\r\n                newToolTip.setAttribute('id', 'edit-group')\r\n                newToolTip.classList.add('tooltip')\r\n                newToolTip.textContent = 'Rename group'\r\n                editGroupButton.parentElement.appendChild(newToolTip)\r\n            } else {\r\n                editGroupButton.parentElement.appendChild(groupEditToolTip)\r\n            }\r\n            \r\n        })\r\n    // delete groups as long as there is more than 1 and there are no cards within it\r\n        deleteGroupButton.addEventListener('click', function() {\r\n            let groups = document.getElementsByClassName('group')\r\n            let group = groupTitle.parentElement\r\n            let tiles = group.querySelectorAll('.tile')\r\n            if (groups.length > 1 && tiles.length == 0) {\r\n                group.remove()\r\n                updateGroupNames()\r\n            }\r\n        })\r\n    \r\n        // on hover, appending the right tooltip to the 'delete' button\r\n        deleteGroupButton.addEventListener('mouseover', function() {\r\n            let groups = document.getElementsByClassName('group')\r\n            let group = groupTitle.parentElement\r\n            let tiles = group.querySelectorAll('.tile')\r\n            let groupDeleteToolTip = document.querySelector('div.tooltip#delete-group')\r\n\r\n            if (groupDeleteToolTip === null) {\r\n                let newToolTip = document.createElement('div')\r\n                newToolTip.setAttribute('id', 'delete-group')\r\n                newToolTip.classList.add('tooltip')\r\n                newToolTip.textContent = 'Delete group'\r\n                deleteGroupButton.parentElement.appendChild(newToolTip)\r\n            } else {\r\n                deleteGroupButton.parentElement.appendChild(groupDeleteToolTip)\r\n            }\r\n\r\n            // checking for the need to enable or disable buttons\r\n            if (groups.length > 1 && tiles.length == 0) {\r\n                deleteGroupButton.classList.remove('disabled')\r\n            } else if (groups.length <= 1 || tiles.length > 0) {\r\n                deleteGroupButton.classList.add('disabled')\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n\r\n// ////// ON LOAD\r\n\r\n// import Content from './content'\r\n// import Group from './group'\r\n// import Task from './task'\r\n// import Column from './column'\r\n\r\n// If there are items in local storage - create groups create columns\r\n// create card for each task in column\r\n// create tile for each content in group\r\n\r\n// window.addEventListener('load', function() {\r\n\r\n//     if (localStorage.getItem('groupList') != null) {\r\n//         let groups = JSON.parse(localStorage.getItem('groupList'));\r\n//         groups.forEach(function(group) {\r\n//             let newGroup = new Group(group.id, group.name)\r\n//             newGroup.createGroup()\r\n//             newGroup.addGroup()\r\n\r\n//             updateGroupNames()\r\n//             resource.openGroupLinks()\r\n//             resource.resource()\r\n//             groupEditDeleteFunctionality()\r\n//         })\r\n//     }\r\n// })\r\n"],"names":["globalThis","self","window","global","$3a4d6c23da85675d71bdb7653780216b$export$default","constructor","id","name","this","createGroup","group","document","querySelector","cloneNode","style","display","groupName","groupLink","editButton","deleteButton","value","removeAttribute","setAttribute","classList","remove","querySelectorAll","forEach","tile","content","getElementById","appendChild","scrollTo","top","clientHeight","left","behavior","$f2836ebccb8a1cfa3916bf8dece76a5e$var$createContentForm","$f2836ebccb8a1cfa3916bf8dece76a5e$var$modalBackground","$f2836ebccb8a1cfa3916bf8dece76a5e$var$addGroupForm","$f2836ebccb8a1cfa3916bf8dece76a5e$var$newGroupToggle","$f2836ebccb8a1cfa3916bf8dece76a5e$var$newGroup","$f2836ebccb8a1cfa3916bf8dece76a5e$var$updateGroupNames","groupNames","groups","innerHTML","object","newOption","createElement","textContent","$f2836ebccb8a1cfa3916bf8dece76a5e$var$toggleGroupForm","$f2836ebccb8a1cfa3916bf8dece76a5e$var$validateText","add","reset","addEventListener","$f2836ebccb8a1cfa3916bf8dece76a5e$var$groupCancelButton","$f2836ebccb8a1cfa3916bf8dece76a5e$var$groupCloseButton","nextElementSibling","$f2836ebccb8a1cfa3916bf8dece76a5e$var$groupSubmitButton","event","preventDefault","Date","now","groupTitle","editGroupButton","deleteGroupButton","groupNameInput","focus","key","blur","groupEditToolTip","newToolTip","parentElement","getElementsByClassName","tiles","length","groupDeleteToolTip"],"version":3,"file":"index.HASH_REF_4304dcd242a9916f6b8aa6d2ccfa4c50.js.map"}