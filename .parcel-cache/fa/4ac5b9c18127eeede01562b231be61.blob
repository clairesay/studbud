<!DOCTYPE html>
<html lang="en">

<head>
    <title>StudBud</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="description" content="Study tool for programmers in training">
    <!-- CSS -->
    <link rel="stylesheet" type="text/css" href="/index.HASH_REF_80038805bd6829e42a01d0f20c72b7db.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.13.0/Sortable.min.js" integrity="sha512-5x7t0fTAVo9dpfbp3WtE2N6bfipUwk7siViWncdDoSz2KwOqVC1N9fDxEOzk0vTThOua/mglfF8NO7uVDLRC8Q==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tagify/4.1.1/tagify.min.js" integrity="sha512-V/mrpehNcIkQ5rszd9LwfBujHn0FJkHO0hBQc059gH5LWg1Tsnt7xphn7Z5jaDiq/xyLU4/BXi5jJauqM4PhlQ==" crossorigin="anonymous"></script>
    <!-- <script src="//cdnjs.cloudflare.com/ajax/libs/validate.js/0.13.1/validate.min.js"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/validate-js/2.0.1/validate.min.js" integrity="sha512-8GLIg5ayTvD6F9ML/cSRMD19nHqaLPWxISikfc5hsMJyX7Pm+IIbHlhBDY2slGisYLBqiVNVll+71CYDD5RBqA==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js" integrity="sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ==" crossorigin="anonymous"></script>
    <link rel="icon" href="/favicon.HASH_REF_f2861df21610fd781afa57873fb3ebf1.svg">
</head>

<body>
    <header>
        <img id="home-link" src="/logo.HASH_REF_65da9037145a6de26f96a153cb4b0752.svg">
        <div id="button-background" class="background"></div>
        <article id="task-buttons" class="button-container">
            <button class="button primary icon"><img src="/add.HASH_REF_417ad5d6520ce93d1c61c4bf5758ee3e.svg"></button>
            <button id="new-task" class="button primary create">Create task</button>
            <button id="new-column" class="button secondary create">Add column</button>
        </article>
        <article id="content-buttons" class="button-container">
            <button class="button primary icon"><img src="/add.HASH_REF_417ad5d6520ce93d1c61c4bf5758ee3e.svg"></button>
            <button id="new-content" class="button primary create">Add content</button>
            <button id="new-group" class="button secondary create">Create group</button>
        </article>

    </header>


    <main>
        <button id="content-tab" class="tab">Content</button>
        <button id="tasks-tab" class="tab">Tasks</button>
        <section id="content">


            <!-- <button id="filter-by" class="button" type="button">Filter by</button>
            <div class="tags"></div> -->
            <div class="group">
                <div class="group-title">
                    <div>
                        <input class="group-name" value="Ungrouped" disabled="">
                        <svg class="edit-group first" width="16" height="16" viewbox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z" fill="#909090"></path>
                        </svg>
                        <div id="edit-group" class="tooltip">Rename group</div>
                        <svg class="delete-group first" width="14" height="18" viewbox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1 16C1 17.1 1.9 18 3 18H11C12.1 18 13 17.1 13 16V4H1V16ZM14 1H10.5L9.5 0H4.5L3.5 1H0V3H14V1Z" fill="#909090"></path>
                        </svg>
                        <div id="delete-group" class="tooltip">Delete group</div>
                    </div>


                    <h3 class="open-link"><img src="/open-link.HASH_REF_d77983256e388cb83c583ca8c3adc51b.svg"></h3>

                </div>
                <div class="tiles">
                    <!-- <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article> -->
                </div>
            </div>
        </section>
        <section id="tasks">
            <div class="column">
                <!-- <div id="empty-state-message">
                    <h4>It's a bit empty around here. Try creating a new task.</h4>
                    <img src="images/empty.png">
                    <button class="button primary">Create Task</button>
                </div> -->
                <div class="title">

                    <input class="column-name" value="To Do">
                    <!-- <img class="column-options" src="images/ellipsis.svg"> -->
                    <!-- <img class="edit-column" src="images/edit.svg"> -->
                    <!-- <img class="delete-column" src="images/bin.svg"> -->
                    <h3 class="total"></h3>
                    <svg class="edit-column" width="16" height="16" viewbox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z" fill="#909090"></path>
                    </svg>
                    <div id="edit" class="tooltip">Rename column</div>
                    <svg class="delete-column disabled" width="14" height="18" viewbox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1 16C1 17.1 1.9 18 3 18H11C12.1 18 13 17.1 13 16V4H1V16ZM14 1H10.5L9.5 0H4.5L3.5 1H0V3H14V1Z" fill="#909090"></path>
                    </svg>
                    <div id="delete" class="tooltip">Delete column</div>

                    

                </div>
                <div class="cards">
                </div>

            </div>
            <div class="column">
                <div class="title">
                    <input class="column-name" value="In Progress">
                    <h3 class="total"></h3>
                    <svg class="edit-column" width="16" height="16" viewbox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z" fill="#909090"></path>
                    </svg>
                    <svg class="delete-column disabled" width="14" height="18" viewbox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1 16C1 17.1 1.9 18 3 18H11C12.1 18 13 17.1 13 16V4H1V16ZM14 1H10.5L9.5 0H4.5L3.5 1H0V3H14V1Z" fill="#909090"></path>
                    </svg>

                    


                </div>
                <div class="cards">
                </div>
            </div>
            <div class="column">
                <div class="title">
                    <input class="column-name" value="Done">
                    <h3 class="total"></h3>
                    <svg class="edit-column" width="16" height="16" viewbox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z" fill="#909090"></path>
                    </svg>
                    <svg class="delete-column disabled" width="14" height="18" viewbox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1 16C1 17.1 1.9 18 3 18H11C12.1 18 13 17.1 13 16V4H1V16ZM14 1H10.5L9.5 0H4.5L3.5 1H0V3H14V1Z" fill="#909090"></path>
                    </svg>

                    

                </div>
                <div class="cards">
                </div>
            </div>
        </section>

    </main>

    <section id="time" class="pop-up">
        <nav>
            <img src="/time.HASH_REF_0a5ecadf4dfa4d50246e62fc2337bf3b.svg">
            <div id="dropdown">
                <div id="time-selector" class="close">
                    <h3 id="stopwatch-select">Stopwatch</h3>
                    <h3 id="pomodoro-select">Pomodoro</h3>
                </div>

                <!-- <div style="position: absolute">
                    <h3>Stopwatch</h3>
                    <h3>Pomodoro</h3>
                </div> -->
                <svg width="10" height="6" viewbox="0 0 10 6" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1 1L5 5L9 1" stroke="#909090" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                </svg>
            </div>
            <button class="button icon collapse">
                <svg width="20" height="23" viewbox="0 0 20 23" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M7.49292 21.5739L4.8778 18.6765L1.61458 22.3172L3.00407e-05 20.5283L3.28599 16.9129L0.670866 14.0156H7.49292V21.5739Z" fill="#909090"></path>
                    <path d="M15.1222 3.79918L12.5071 0.901808V8.46017H19.3292L16.714 5.5628L20 1.94738L18.3854 0.158569L15.1222 3.79918Z" fill="#909090"></path>
                </svg>
            </button>
        </nav>
        <article id="stopwatch">
            <h1 style="display: block; width: 100%;
"><span class="minutes">00</span>:<span class="seconds">00</span>:<span class="milliseconds">00</span></h1>
            <div>
                <button class="button primary start-stop">Start</button>
                <button class="button secondary reset">Reset</button>
            </div>
            <h3>Feeling speedy? Time it!</h3>
        </article>
        <article id="pomodoro">
            <div id="work">
                <button class="secondary icon subtract">-</button>
                <h1 style="display: block; width: 100%;
"><span class="minutes">00</span>:<span class="seconds">00</span>
                </h1>
                <button class="secondary icon add">+</button>
            </div>
            <div id="break">
                <button class="secondary icon subtract">-</button>
                <h1 style="display: block; width: 100%;
"><span class="minutes">00</span>:<span class="seconds">00</span>
                </h1>
                <button class="secondary icon add">+</button>
            </div>
            <!-- <div> -->
            <button class="button primary start-stop">Start</button>

            <!-- </div> -->
            <div id="timer">
                <h1 style="display: block; width: 100%;
"><span class="minutes">00</span>:<span class="seconds">00</span>
                </h1>
            </div>
        </article>
    </section>
    <section id="music" class="pop-up"></section>
    <div id="modal-background" class="background"></div>
    <form id="create-content-form">
        <h1>Add content</h1>
        <section>
            <label for="contentTitle">Title</label>
            <input type="text" name="contentTitle" placeholder="What's this content about?" autofocus="">

            <label for="conceptDescription">Concept Description</label>
            <input type="text" name="conceptDescription" placeholder="In a few sentences, how would you explain the contept to a newbie?">

            <label for="link">Link</label>
            <input type="text" name="link" placeholder="Paste the resource link here">

            <!-- SUBJECT -->
            <!-- <label for="subject">Subject</label>
            <input type="text" name="subject" list="subject">
            <datalist id="subject">

            </datalist> -->
        </section>
        <aside>
            <label for="group">Group</label>
            <select name="group">
                <option value="None">None</option>
                <!-- <option value="INFO1110">INFO1110</option>
                <option value="COMP2823">COMP2823</option>
                <option value="SOFT2201">SOFT2201</option> -->
                <!-- populate this with all the existing columns -->
                <!-- <option value="ready"></option> -->
            </select>
        </aside>
        <!-- <button id="create-content-submit" class="button primary" type="button">Submit</button>
        <button id="edit-content-save" class="button primary" type="button">Save</button> -->
        <button id="content-save" class="button primary" type="button">Save</button>
        <button id="edit-content-cancel" class="button primary" type="button">Cancel</button>
        <button class="close-form" type="reset"><img src="/black-close.HASH_REF_5496ba7bd38743fe9114bc28cf81a7ab.svg"></button>
        <button id="edit-content-delete" class="button primary" type="button">Delete</button>


    </form>
    <form id="add-group-form" name="group">
        <h1>Add a group</h1>

        <label for="groupName">Group Name</label>
        <input type="text" name="groupName" placeholder="What is this group for?" autofocus="">
        <p>TIP: Create your groups based on topics, or even subjects!
        </p>
        <button id="add-group-submit" class="button primary" type="submit">Save</button>
        <button id="add-group-cancel" class="button primary" type="button">Cancel</button>
        <button class="close-form" type="reset"><img src="/black-close.HASH_REF_5496ba7bd38743fe9114bc28cf81a7ab.svg"></button>
    </form>
    <form id="create-task-form">
        <h1>Create a task</h1>
        <section>
            <label for="taskName">Task Name</label>
            <input type="text" name="taskName" placeholder="What's the task called?" autofocus="">

            <label for="taskDescription">Task Description</label>
            <input type="text" name="taskDescription" placeholder="How can I complete this task?">

            <!-- SUBJECT -->
            <label for="subject">Subject</label>
            <input type="text" name="subject" list="subject">
            <datalist id="subject">
                <!-- ON ENTER, TURN THAT SUBJECT INTO A COLOURED TAG -->
                <!-- <option value="Boston">
          <option value="Cambridge"> -->
            </datalist>
        </section>
        <aside>
            <label for="status">Status</label>
            <select name="status">
            </select>


            <label for="taskPriorityRating">Priority Level
                <label class="false-radio">
                    <input type="radio" name="taskPriorityRating" value="Low">
                    <span>Low</span>
                </label>
                <label class="false-radio">
                    <input type="radio" name="taskPriorityRating" value="Mid">
                    <span>Mid</span>
                </label>
                <label class="false-radio">
                    <input type="radio" name="taskPriorityRating" value="High">
                    <span>High</span>
                </label>
            </label>

            <label for="taskEstimatedTime">Estimated Time to Complete</label>
            <input type="text" name="taskEstimatedTimeHr">
            <input type="text" name="taskEstimatedTimeMin">

            <label for="taskDueDate">Due Date</label>
            <input type="date" name="taskDueDate">

        </aside>
        <button id="task-save" class="button primary" type="button">Save</button>
        <button id="edit-task-cancel" class="button primary" type="button">Cancel</button>
        <button class="close-form" type="reset"><img src="/black-close.HASH_REF_5496ba7bd38743fe9114bc28cf81a7ab.svg"></button>
        <button id="edit-task-delete" class="button primary" type="button">Delete</button>

    </form>

    <form id="add-column-form" name="column">
        <h1>Add a column</h1>

        <label for="columnName">Column Name</label>
        <input type="text" name="columnName" placeholder="What is this column for?" autofocus="">
        <p>TIP: Name the column after a status, like 'In-Progress' so you can categorise your tasks based on completion.
        </p>
        <button id="add-column-submit" class="button primary" type="submit">Save</button>
        <button id="add-column-cancel" class="button primary" type="button">Cancel</button>
        <button class="close-form" type="reset"><img src="/black-close.HASH_REF_5496ba7bd38743fe9114bc28cf81a7ab.svg"></button>
    </form>
    <script>// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"1Jo5T":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "d394c96a331fb8ea13922a7078d4c701";
// @flow
/*global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE*/
/*::
import type {
HMRAsset,
HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
(string): mixed;
cache: {|[string]: ParcelModule|};
hotData: mixed;
Module: any;
parent: ?ParcelRequire;
isParcelRequire: true;
modules: {|[string]: [Function, {|[string]: string|}]|};
HMR_BUNDLE_ID: string;
root: ParcelRequire;
}
interface ParcelModule {
hot: {|
data: mixed,
accept(cb: (Function) => void): void,
dispose(cb: (mixed) => void): void,
// accept(deps: Array<string> | string, cb: (Function) => void): void,
// decline(): void,
_acceptCallbacks: Array<(Function) => void>,
_disposeCallbacks: Array<(mixed) => void>,
|};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || (function () {}));
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, /*: {|[string]: boolean|}*/
acceptedAssets, /*: {|[string]: boolean|}*/
/*: {|[string]: boolean|}*/
assetsToAccept;
function getHostname() {
  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
  return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = getHostname();
  var port = getPort();
  var protocol = HMR_SECURE || location.protocol == 'https:' && !(/localhost|127.0.0.1|0.0.0.0/).test(hostname) ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
  // $FlowFixMe
  ws.onmessage = function (event) /*: {data: string, ...}*/
  {
    checkedAssets = {
      /*: {|[string]: boolean|}*/
    };
    acceptedAssets = {
      /*: {|[string]: boolean|}*/
    };
    assetsToAccept = [];
    var data = /*: HMRMessage*/
    JSON.parse(event.data);
    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);
      // Handle HMR Update
      var handled = false;
      assets.forEach(asset => {
        var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        if (didAccept) {
          handled = true;
        }
      });
      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(module.bundle.root, asset);
        });
        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];
          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }
    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      }
      // Render the fancy html overlay
      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      // $FlowFixMe
      document.body.appendChild(overlay);
    }
  };
  ws.onerror = function (e) {
    console.error(e.message);
  };
  ws.onclose = function (e) {
    if (undefined !== 'test') {
      console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
    console.log('[parcel] ✨ Error resolved');
  }
}
function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }
  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]>*/
{
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function () {
    if (link.parentNode !== null) {
      // $FlowFixMe
      link.parentNode.removeChild(link);
    }
  };
  newLink.setAttribute('href', // $FlowFixMe
  link.getAttribute('href').split('?')[0] + '?' + Date.now());
  // $FlowFixMe
  link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }
  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      // $FlowFixMe[incompatible-type]
      var href = /*: string*/
      links[i].getAttribute('href');
      var hostname = getHostname();
      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
      var absolute = (/^https?:\/\//i).test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
      if (!absolute) {
        updateLink(links[i]);
      }
    }
    cssTimeout = null;
  }, 50);
}
function hmrApply(bundle, /*: ParcelRequire*/
asset) /*:  HMRAsset*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (asset.type === 'css') {
    reloadCSS();
    return;
  }
  let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
  if (deps) {
    var fn = new Function('require', 'module', 'exports', asset.output);
    modules[asset.id] = [fn, deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, /*: ParcelRequire*/
id, /*: ParcelRequire*/
/*: string*/
depsByBundle) /*: ?{ [string]: { [string]: string } }*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
    // If we reached the root bundle without finding where the asset should go,
    // there's nothing to do. Mark as "accepted" so we don't reload the page.
    if (!bundle.parent) {
      return true;
    }
    return hmrAcceptCheck(bundle.parent, id, depsByBundle);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(module.bundle.root, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1], null);
  });
}
function hmrAcceptRun(bundle, /*: ParcelRequire*/
id) /*: string*/
{
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(module.bundle.root, id);
      });
      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }
  acceptedAssets[id] = true;
}

},{}],"7b26Q":[function(require,module,exports) {
const timeToolsOverlay = document.getElementById('time')
        const timeSelector = document.getElementById('time-selector')
        const dropdown = document.getElementById('dropdown')

        timeMenuToggleOpen = false
        function toggleTimeMenu() {
            if (timeMenuToggleOpen == false) {
                timeSelector.classList = 'open'
                timeMenuToggleOpen = true
            } else if (timeMenuToggleOpen == true) {
                timeSelector.classList = 'close'
                timeMenuToggleOpen = false
            }
        }
        dropdown.addEventListener('click', toggleTimeMenu)

        const stopwatch = document.getElementById('stopwatch')
        const stopwatchSelector = document.getElementById('stopwatch-select')
        const pomodoro = document.getElementById('pomodoro')
        const pomodoroSelector = document.getElementById('pomodoro-select')

        stopwatchSelector.addEventListener('click', function () {
            timeSelector.appendChild(pomodoroSelector)
            setTimerType()
        })
        pomodoroSelector.addEventListener('click', function () {
            timeSelector.appendChild(stopwatchSelector)
            setTimerType()
        })

        function setTimerType() {
            let currentTimer = timeSelector.querySelector(':first-child')
            if (currentTimer.id == 'stopwatch-select') {
                stopwatch.classList.add('active')
                pomodoro.classList.remove('active')
            } else if (currentTimer.id == 'pomodoro-select') {
                stopwatch.classList.remove('active')
                pomodoro.classList.add('active')
            }
        }
        setTimerType()


        var minutes = document.querySelector('#stopwatch .minutes')
        // minutes = minutes.textContent = '00'
        var min = 0
        var seconds = document.querySelector('#stopwatch .seconds')
        // seconds = seconds.textContent = '00'
        var sec = 0
        var milliseconds = document.querySelector('#stopwatch .milliseconds')
        // milliseconds = milliseconds.textContent = '00'
        var milli = 0

        const stopwatchStart = document.querySelector('#stopwatch button.start-stop')
        const stopwatchReset = document.querySelector('#stopwatch button.reset')
        var stopwatchOff = false
        var intervals;
        var static = true
        stopwatchReset.addEventListener('click', function () {
            // stop the stopwatch
            // continue the stopwatch even while the user is in a different tab?
            milli = 0
            sec = 0
            min = 0
            minutes.textContent = min.toString()
            seconds.textContent = sec.toString()
            milliseconds.textContent = milli.toString()
            // if (stopwatchOff == true) {
            stopwatchReset.disabled = false
            stopwatchOff = false
            clearInterval(intervals)
            static = true
            // }

            dropdown.addEventListener('click', toggleTimeMenu)
        })

        stopwatchStart.addEventListener('click', function () {
            static = false;
            if (stopwatchOff == true) {
                clearInterval(intervals)
                // stopwatchReset.disabled = false
                stopwatchStart.textContent = 'Start'
                stopwatchOff = false
            } else if (stopwatchOff == false) {

                var start = Date.now();

                incrementUp()
                function incrementUp() {
                    // var time = moment().toDate();  // This will return a copy of the Date that the moment uses

                    // time.setHours(0);
                    // time.setMinutes(0);
                    // time.setSeconds(0);
                    // time.setMilliseconds(0);
                    var currentTime = Date.now()

                    var delta = currentTime - start; // milliseconds elapsed since start
                    // var time = delta /1000
                    // sec = time
                    milli = delta;
                    if (milli >= 1000) {
                        start += 1000
                        sec += 1
                    }

                    // if (sec >= 5) {
                    //     start += 5000
                    // }
                    // if (sec >= 60) {
                    //     start += 60000
                    //     min += 1
                    // }
                    // if (sec >= 5) {
                        
                    // }
                    // if (delta >= 1000) {
                    //     var currentTime = Date.now()
                    //     var delta = currentTime - start; // milliseconds elapsed since start
                    // }
                    // var seconder = Math.floor(milli / 1000); // in seconds
                    // milli = moment().milliseconds();
                    // sec = moment().seconds()
                    // min = moment().minutes()
                    // milli = delta;
                    // if (milli >= 1000) {
                    //     milli -= 1000;
                    // }
                    
                    // if (milli >= 1000) {
                    //     // milli = 0
                    //     // milli = delta
                    //     milli -= 1000
                    //     // milli = 0
                    //     sec = seconder
                    // } else {
                    //     milli = delta;
                    // }
                    if (sec >= 60) {
                        // sec = 0
                    }
                    // if (milli == 1000) {
                    //     sec += 1
                    //     milli = 0
                    // } else {
                    //     milli += 10
                    // }
                    // if (sec == 60) {
                    //     sec = 0
                    //     min += 1
                    // }
                    // if (min == 60) {
                    //     // set false
                    // }
                }

                intervals = setInterval(function () {
                    minutes.textContent = min.toString()
                    seconds.textContent = sec.toString()
                    milliseconds.textContent = milli.toString()

                    incrementUp()
                }, 10); // update about every second
                // intervals = setInterval(function () {
                //     minutes.textContent = min.toString()
                //     seconds.textContent = sec.toString()
                //     milliseconds.textContent = milli.toString()
                //     incrementUp()
                // }, 10);
                stopwatchReset.disabled = false
                stopwatchStart.textContent = 'Stop'
                // disable the timer dropdown
                dropdown.removeEventListener('click', toggleTimeMenu)
                stopwatchOff = true

            }
        })

        const timePopUp = document.getElementById('time')
        const musicPopUp = document.getElementById('music')

        timePopUp.setAttribute('state', 'standby')
        musicPopUp.setAttribute('state', 'standby')

        var popUpIcons = document.querySelectorAll('.pop-up[state=standby] nav img')
        var collapseButtons = document.querySelectorAll('.pop-up nav button.collapse')
        popUpIcons.forEach(function (icon) {
            icon.addEventListener('click', popUpState)
        })
        collapseButtons.forEach(function (button) {
            button.addEventListener('click', popUpState)
        })

        // if something is running, allow for a third state!
        function popUpState() {
            if (timePopUp.getAttribute('state') == 'standby') {
                timePopUp.setAttribute('state', 'active')
            } else if (timePopUp.getAttribute('state') == 'peek') {
                timePopUp.setAttribute('state', 'active')
            } else if (timePopUp.getAttribute('state') == 'active' && static == true) {
                timePopUp.setAttribute('state', 'standby')
            } else if (timePopUp.getAttribute('state') == 'active') {
                timePopUp.setAttribute('state', 'peek')
            }
        }

        var workMin = 25,
            workSec = 0
        var workMinutes = document.querySelector('#pomodoro #work .minutes')
        var workSeconds = document.querySelector('#pomodoro #work .seconds')
        var breakMin = 5,
            breakSec = 0
        var breakMinutes = document.querySelector('#pomodoro #break .minutes')
        var breakSeconds = document.querySelector('#pomodoro #break .seconds')
        const workButtons = document.querySelector('#pomodoro #work')
        const breakButtons = document.querySelector('#pomodoro #break')
        const timer = document.querySelector('#pomodoro div#timer')
        const workAdd = document.querySelector('#pomodoro #work button.add')
        const workSubtract = document.querySelector('#pomodoro #work button.subtract')
        const breakAdd = document.querySelector('#pomodoro #break button.add')
        const breakSubtract = document.querySelector('#pomodoro #break button.subtract')
        const pomoStartStop = document.querySelector('#pomodoro button.start-stop')
        var pomoMinutes = document.querySelector('#pomodoro #timer .minutes')
        var pomoSeconds = document.querySelector('#pomodoro #timer .seconds')

        var pomoMin = workMin
        var pomoSec = workSec
        pomoMinutes.textContent = pomoMin.toString()
        // pomoSeconds.textContent = pomoSec.toString()

        var pomoOff = false
        var pomoIntervals
        workAdd.addEventListener('click', () => pomoTime('add', 'work'))
        workSubtract.addEventListener('click', () => pomoTime('subtract', 'work'))
        breakAdd.addEventListener('click', () => pomoTime('add', 'break'))
        breakSubtract.addEventListener('click', () => pomoTime('subtract', 'break'))
        workButtons.style.display = 'flex'
        breakButtons.style.display = 'flex'
        timer.style.display = 'none'
        pomoStartStop.addEventListener('click', function () {
            // reference for pomo intervals https://www.focusboosterapp.com/blog/common-misconceptions-of-the-pomodoro-technique/#:~:text=The%20average%20and%20suggested%20pomodoro,with%20a%2010%2Dminute%20break.
            if (pomoOff == true) {
                pomoMin = workMin
                pomoSec = workSec
                pomoMinutes.textContent = pomoMin.toString()
                pomoSeconds.textContent = pomoSec.toString()
                static = true;
                clearInterval(pomoIntervals)
                pomoStartStop.textContent = 'Start'
                dropdown.addEventListener('click', toggleTimeMenu)
                workButtons.style.display = 'flex'
                breakButtons.style.display = 'flex'
                timer.style.display = 'none'

                pomoOff = false
            } else if (pomoOff == false) {
                static = false;
                function incrementDown() {
                    if (pomoMin == 0 && pomoSec == 0) {
                        // pomoMinutes.textContent = pomoMin.toString()
                        // pomoSeconds.textContent = pomoSec.toString()

                        sessions += 1
                        pomodoroTimer()
                    } else if (pomoSec == 0) {
                        pomoMin -= 1
                        pomoSec = 59
                    } else {
                        pomoSec -= 1
                    }

                }
                workButtons.style.display = 'none'
                breakButtons.style.display = 'none'
                timer.style.display = 'flex'
                // incrementDown()
                pomoIntervals = setInterval(function () {
                    incrementDown()
                    pomoMinutes.textContent = pomoMin.toString()
                    pomoSeconds.textContent = pomoSec.toString()
                    // 3

                }, 1000);
                pomoStartStop.textContent = 'Stop'
                dropdown.removeEventListener('click', toggleTimeMenu)
                pomoOff = true
            }
        })

        function pomoTime(operator, mode) {

            if (mode == 'work') {
                if (operator == 'add' && workMin < 60) {
                    workMin += 5
                } else if (operator == 'subtract' && workMin > 5) {
                    workMin -= 5
                }
            } else if (mode == 'break') {

                if (operator == 'add' && breakMin < 20) {
                    breakMin += 5
                } else if (operator == 'subtract' && breakMin > 5) {
                    breakMin -= 5
                }
            }
            pomoMin = workMin
            // pomoSec = workSec

            pomoMinutes.textContent = pomoMin.toString()
            // pomoSeconds.textContent = pomoSec.toString()
            // console.log(pomoMinutes)
            workMinutes.textContent = workMin
            breakMinutes.textContent = breakMin

        }
        workMinutes.textContent = workMin
        breakMinutes.textContent = breakMin
        var phase = 'break'
        var sessions = 0
        function pomodoroTimer() {
            if (sessions < 5) {
                console.log(phase)
                if (phase == 'work') {
                    pomoMin = workMin
                    pomoSec = workSec
                    phase = 'break'

                }

                else if (phase == 'break') {
                    pomoMin = breakMin
                    pomoSec = breakSec
                    phase = 'work'
                }

            } else {
                clearInterval(pomoIntervals)
                pomoOff = false;
            }
            // sessions += 1




            // set the screen to the massive countdown
            // start button becomes stop button
            // increment the meters to reflect the timers - --- - --- -
            // at the end of the timer: what happens?
        }
},{}]},["1Jo5T","7b26Q"], "7b26Q", "parcelRequirec526")

</script>
    <script src="/index.HASH_REF_b5bc0354373028d14f6d7f728e0a979d.js"></script>

    <script src="/index.HASH_REF_57caf8ea5ec31d005d3fe7cd05443c22.js"></script>
    <script src="/index.HASH_REF_3223197b2865936fe4b1ea28d7a8e4fc.js"></script>

    <script src="/index.HASH_REF_3cbe52486674d16d12063f4807f22028.js"></script>
    <script src="/index.HASH_REF_775dd3375d988df772d37b46bcf40e1c.js"></script>

</body>

</html>