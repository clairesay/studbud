<!DOCTYPE html>
<html lang="en">

<head>
    <title>StudBud</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="description" content="Study tool for programmers in training">
    <!-- CSS -->
    <link rel="stylesheet" type="text/css" href="ac2b17b88ef0ab3e3e3316d5a6be3892">
    <script src="d94f9aa01d9671d8449671126e020f85" integrity="sha512-5x7t0fTAVo9dpfbp3WtE2N6bfipUwk7siViWncdDoSz2KwOqVC1N9fDxEOzk0vTThOua/mglfF8NO7uVDLRC8Q==" crossorigin="anonymous"></script>
    <script src="4c3879c4ffb1af0a9978a03e973969ca" integrity="sha512-V/mrpehNcIkQ5rszd9LwfBujHn0FJkHO0hBQc059gH5LWg1Tsnt7xphn7Z5jaDiq/xyLU4/BXi5jJauqM4PhlQ==" crossorigin="anonymous"></script>
    <!-- <script src="//cdnjs.cloudflare.com/ajax/libs/validate.js/0.13.1/validate.min.js"></script> -->
    <script src="c68a15db6d2f13425c507e4a17675678" integrity="sha512-8GLIg5ayTvD6F9ML/cSRMD19nHqaLPWxISikfc5hsMJyX7Pm+IIbHlhBDY2slGisYLBqiVNVll+71CYDD5RBqA==" crossorigin="anonymous"></script>
    <script src="42b6fd24bc4bf186c9b39ac779776ab1" integrity="sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ==" crossorigin="anonymous"></script>
    <link rel="icon" href="191763d21b3708b74a5b76dbde393de7">
</head>

<body>
    <header>
        <img id="home-link" src="7cfdf8f6153f8e10e79f65d51c7b3590">
        <div id="button-background" class="background"></div>
        <article id="task-buttons" class="button-container">
            <button class="button primary icon"><img src="e9fd217b7bcd2d651e844f6e0ed154aa"></button>
            <button id="new-task" class="button primary create">Create task</button>
            <button id="new-column" class="button secondary create">Add column</button>
        </article>
        <article id="content-buttons" class="button-container">
            <button class="button primary icon"><img src="e9fd217b7bcd2d651e844f6e0ed154aa"></button>
            <button id="new-content" class="button primary create">Add content</button>
            <button id="new-group" class="button secondary create">Create group</button>
        </article>

    </header>


    <main>
        <button id="content-tab" class="tab">Content</button>
        <button id="tasks-tab" class="tab">Tasks</button>
        <section id="content">


            <!-- <button id="filter-by" class="button" type="button">Filter by</button>
            <div class="tags"></div> -->
            <div class="group">
                <div class="group-title">
                    <div>
                        <input class="group-name" value="Ungrouped" disabled="">
                        <svg class="edit-group first" width="16" height="16" viewbox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z" fill="#909090"></path>
                        </svg>
                        <div id="edit-group" class="tooltip">Rename group</div>
                        <svg class="delete-group first" width="14" height="18" viewbox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1 16C1 17.1 1.9 18 3 18H11C12.1 18 13 17.1 13 16V4H1V16ZM14 1H10.5L9.5 0H4.5L3.5 1H0V3H14V1Z" fill="#909090"></path>
                        </svg>
                        <div id="delete-group" class="tooltip">Delete group</div>
                    </div>


                    <h3 class="open-link"><img src="c58c9506186bac9fd55bf86ae102545c"></h3>

                </div>
                <div class="tiles">
                    <!-- <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article>
                    <article class="tile">
                        <h4>Content Title</4>
                            <hr />
                            <p>Content Description</p>
                            <a>Link to the resource</a>
                    </article> -->
                </div>
            </div>
        </section>
        <section id="tasks">
            <div class="column">
                <!-- <div id="empty-state-message">
                    <h4>It's a bit empty around here. Try creating a new task.</h4>
                    <img src="images/empty.png">
                    <button class="button primary">Create Task</button>
                </div> -->
                <div class="title">

                    <input class="column-name" value="To Do">
                    <!-- <img class="column-options" src="images/ellipsis.svg"> -->
                    <!-- <img class="edit-column" src="images/edit.svg"> -->
                    <!-- <img class="delete-column" src="images/bin.svg"> -->
                    <h3 class="total"></h3>
                    <svg class="edit-column" width="16" height="16" viewbox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z" fill="#909090"></path>
                    </svg>
                    <div id="edit" class="tooltip">Rename column</div>
                    <svg class="delete-column disabled" width="14" height="18" viewbox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1 16C1 17.1 1.9 18 3 18H11C12.1 18 13 17.1 13 16V4H1V16ZM14 1H10.5L9.5 0H4.5L3.5 1H0V3H14V1Z" fill="#909090"></path>
                    </svg>
                    <div id="delete" class="tooltip">Delete column</div>

                    

                </div>
                <div class="cards">
                </div>

            </div>
            <div class="column">
                <div class="title">
                    <input class="column-name" value="In Progress">
                    <h3 class="total"></h3>
                    <svg class="edit-column" width="16" height="16" viewbox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z" fill="#909090"></path>
                    </svg>
                    <svg class="delete-column disabled" width="14" height="18" viewbox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1 16C1 17.1 1.9 18 3 18H11C12.1 18 13 17.1 13 16V4H1V16ZM14 1H10.5L9.5 0H4.5L3.5 1H0V3H14V1Z" fill="#909090"></path>
                    </svg>

                    


                </div>
                <div class="cards">
                </div>
            </div>
            <div class="column">
                <div class="title">
                    <input class="column-name" value="Done">
                    <h3 class="total"></h3>
                    <svg class="edit-column" width="16" height="16" viewbox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z" fill="#909090"></path>
                    </svg>
                    <svg class="delete-column disabled" width="14" height="18" viewbox="0 0 14 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1 16C1 17.1 1.9 18 3 18H11C12.1 18 13 17.1 13 16V4H1V16ZM14 1H10.5L9.5 0H4.5L3.5 1H0V3H14V1Z" fill="#909090"></path>
                    </svg>

                    

                </div>
                <div class="cards">
                </div>
            </div>
        </section>

    </main>

    <section id="time" class="pop-up">
        <nav>
            <img src="0cc1cab7b804dd781f858b3c5129df5f">
            <div id="dropdown">
                <div id="time-selector" class="close">
                    <h3 id="stopwatch-select">Stopwatch</h3>
                    <h3 id="pomodoro-select">Pomodoro</h3>
                </div>

                <!-- <div style="position: absolute">
                    <h3>Stopwatch</h3>
                    <h3>Pomodoro</h3>
                </div> -->
                <svg width="10" height="6" viewbox="0 0 10 6" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1 1L5 5L9 1" stroke="#909090" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                </svg>
            </div>
            <button class="button icon collapse">
                <svg width="20" height="23" viewbox="0 0 20 23" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M7.49292 21.5739L4.8778 18.6765L1.61458 22.3172L3.00407e-05 20.5283L3.28599 16.9129L0.670866 14.0156H7.49292V21.5739Z" fill="#909090"></path>
                    <path d="M15.1222 3.79918L12.5071 0.901808V8.46017H19.3292L16.714 5.5628L20 1.94738L18.3854 0.158569L15.1222 3.79918Z" fill="#909090"></path>
                </svg>
            </button>
        </nav>
        <article id="stopwatch">
            <h1 style="069470bfba23b73776e16a732ec5be8d"><span class="minutes">00</span>:<span class="seconds">00</span>:<span class="milliseconds">00</span></h1>
            <div>
                <button class="button primary start-stop">Start</button>
                <button class="button secondary reset">Reset</button>
            </div>
            <h3>Feeling speedy? Time it!</h3>
        </article>
        <article id="pomodoro">
            <div id="work">
                <button class="secondary icon subtract">-</button>
                <h1 style="79c3c0eef1cb25e9bb13113dd5b48855"><span class="minutes">00</span>:<span class="seconds">00</span>
                </h1>
                <button class="secondary icon add">+</button>
            </div>
            <div id="break">
                <button class="secondary icon subtract">-</button>
                <h1 style="a5cc3e680ab94e27b192abffb32e28f2"><span class="minutes">00</span>:<span class="seconds">00</span>
                </h1>
                <button class="secondary icon add">+</button>
            </div>
            <!-- <div> -->
            <div id="timeline"><div class="length"></div><div class="length"></div><div class="length"></div><div class="length"></div><div class="length"></div></div>
            <button class="button primary start-stop">Start</button>

            <!-- </div> -->
            <div id="timer">
                <h1 style="fc7f2bbae5fdf49fd4ce11e519feaa0a"><span class="minutes">00</span>:<span class="seconds">00</span>
                </h1>

                
            </div>
        </article>
    </section>
    <section id="music" class="pop-up"></section>
    <div id="modal-background" class="background"></div>
    <form id="create-content-form">
        <h1>Add content</h1>
        <section>
            <label for="contentTitle">Title</label>
            <input type="text" name="contentTitle" placeholder="What's this content about?" autofocus="">

            <label for="conceptDescription">Concept Description</label>
            <input type="text" name="conceptDescription" placeholder="In a few sentences, how would you explain the contept to a newbie?">

            <label for="link">Link</label>
            <input type="text" name="link" placeholder="Paste the resource link here">

            <!-- SUBJECT -->
            <!-- <label for="subject">Subject</label>
            <input type="text" name="subject" list="subject">
            <datalist id="subject">

            </datalist> -->
        </section>
        <aside>
            <label for="group">Group</label>
            <select name="group">
                <option value="None">None</option>
                <!-- <option value="INFO1110">INFO1110</option>
                <option value="COMP2823">COMP2823</option>
                <option value="SOFT2201">SOFT2201</option> -->
                <!-- populate this with all the existing columns -->
                <!-- <option value="ready"></option> -->
            </select>
        </aside>
        <!-- <button id="create-content-submit" class="button primary" type="button">Submit</button>
        <button id="edit-content-save" class="button primary" type="button">Save</button> -->
        <button id="content-save" class="button primary" type="button">Save</button>
        <button id="edit-content-cancel" class="button primary" type="button">Cancel</button>
        <button class="close-form" type="reset"><img src="9ada1a6fcecb621666ac9cf19b041810"></button>
        <button id="edit-content-delete" class="button primary" type="button">Delete</button>


    </form>
    <form id="add-group-form" name="group">
        <h1>Add a group</h1>

        <label for="groupName">Group Name</label>
        <input type="text" name="groupName" placeholder="What is this group for?" autofocus="">
        <p>TIP: Create your groups based on topics, or even subjects!
        </p>
        <button id="add-group-submit" class="button primary" type="submit">Save</button>
        <button id="add-group-cancel" class="button primary" type="button">Cancel</button>
        <button class="close-form" type="reset"><img src="9ada1a6fcecb621666ac9cf19b041810"></button>
    </form>
    <form id="create-task-form">
        <h1>Create a task</h1>
        <section>
            <label for="taskName">Task Name</label>
            <input type="text" name="taskName" placeholder="What's the task called?" autofocus="">

            <label for="taskDescription">Task Description</label>
            <input type="text" name="taskDescription" placeholder="How can I complete this task?">

            <!-- SUBJECT -->
            <label for="subject">Subject</label>
            <input type="text" name="subject" list="subject">
            <datalist id="subject">
                <!-- ON ENTER, TURN THAT SUBJECT INTO A COLOURED TAG -->
                <!-- <option value="Boston">
          <option value="Cambridge"> -->
            </datalist>
        </section>
        <aside>
            <label for="status">Status</label>
            <select name="status">
            </select>


            <label for="taskPriorityRating">Priority Level
                <label class="false-radio">
                    <input type="radio" name="taskPriorityRating" value="Low">
                    <span>Low</span>
                </label>
                <label class="false-radio">
                    <input type="radio" name="taskPriorityRating" value="Mid">
                    <span>Mid</span>
                </label>
                <label class="false-radio">
                    <input type="radio" name="taskPriorityRating" value="High">
                    <span>High</span>
                </label>
            </label>

            <label for="taskEstimatedTime">Estimated Time to Complete</label>
            <input type="text" name="taskEstimatedTimeHr">
            <input type="text" name="taskEstimatedTimeMin">

            <label for="taskDueDate">Due Date</label>
            <input type="date" name="taskDueDate">

        </aside>
        <button id="task-save" class="button primary" type="button">Save</button>
        <button id="edit-task-cancel" class="button primary" type="button">Cancel</button>
        <button class="close-form" type="reset"><img src="9ada1a6fcecb621666ac9cf19b041810"></button>
        <button id="edit-task-delete" class="button primary" type="button">Delete</button>

    </form>

    <form id="add-column-form" name="column">
        <h1>Add a column</h1>

        <label for="columnName">Column Name</label>
        <input type="text" name="columnName" placeholder="What is this column for?" autofocus="">
        <p>TIP: Name the column after a status, like 'In-Progress' so you can categorise your tasks based on completion.
        </p>
        <button id="add-column-submit" class="button primary" type="submit">Save</button>
        <button id="add-column-cancel" class="button primary" type="button">Cancel</button>
        <button class="close-form" type="reset"><img src="9ada1a6fcecb621666ac9cf19b041810"></button>
    </form>
    <script data-parcel-key="75a13fe33bf7988236043c7972232a59">

        const timeToolsOverlay = document.getElementById('time')
        const timeSelector = document.getElementById('time-selector')
        const dropdown = document.getElementById('dropdown')

        timeMenuToggleOpen = false
        function toggleTimeMenu() {
            if (timeMenuToggleOpen == false) {
                timeSelector.classList = 'open'
                timeMenuToggleOpen = true
            } else if (timeMenuToggleOpen == true) {
                timeSelector.classList = 'close'
                timeMenuToggleOpen = false
            }
        }
        dropdown.addEventListener('click', toggleTimeMenu)

        const stopwatch = document.getElementById('stopwatch')
        const stopwatchSelector = document.getElementById('stopwatch-select')
        const pomodoro = document.getElementById('pomodoro')
        const pomodoroSelector = document.getElementById('pomodoro-select')

        stopwatchSelector.addEventListener('click', function () {
            timeSelector.appendChild(pomodoroSelector)
            setTimerType()
        })
        pomodoroSelector.addEventListener('click', function () {
            timeSelector.appendChild(stopwatchSelector)
            setTimerType()
        })

        function setTimerType() {
            let currentTimer = timeSelector.querySelector(':first-child')
            if (currentTimer.id == 'stopwatch-select') {
                stopwatch.classList.add('active')
                pomodoro.classList.remove('active')
            } else if (currentTimer.id == 'pomodoro-select') {
                stopwatch.classList.remove('active')
                pomodoro.classList.add('active')
            }
        }
        setTimerType()


        var minutes = document.querySelector('#stopwatch .minutes')
        // minutes = minutes.textContent = '00'
        var min = 0
        var seconds = document.querySelector('#stopwatch .seconds')
        // seconds = seconds.textContent = '00'
        var sec = 0
        var milliseconds = document.querySelector('#stopwatch .milliseconds')
        // milliseconds = milliseconds.textContent = '00'
        var milli = 0

        const stopwatchStart = document.querySelector('#stopwatch button.start-stop')
        const stopwatchReset = document.querySelector('#stopwatch button.reset')
        var stopwatchOff = false
        var intervals;
        var static = true
        stopwatchReset.addEventListener('click', function () {
            // stop the stopwatch
            // continue the stopwatch even while the user is in a different tab?
            milli = 0
            sec = 0
            min = 0
            offset = 0
            minutes.textContent = (min).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            seconds.textContent = (sec).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            milliseconds.textContent = (milli).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            // if (stopwatchOff == true) {
                stopwatchStart.textContent = 'Start'
            stopwatchReset.disabled = false
            stopwatchOff = false
            clearInterval(intervals)
            static = true
            // }

            dropdown.addEventListener('click', toggleTimeMenu)
        })
        var stopwatchOn = false;
        var start, currentTime, delta, stringify;
        var offset = 0;
        stopwatchStart.addEventListener('click', function () {
            static = false;
            
            if (stopwatchOff == true) {
                
                clearInterval(intervals)
                // stopwatchReset.disabled = false
                stopwatchStart.textContent = 'Start'
                stopwatchOff = false
                
                offset = parseInt(milli)*10
            } else if (stopwatchOff == false) {
                
                // if (stopwatchOn == false) {
                    start = Date.now()
                    // start += offset;
                    // offset = 0;
                //     stopwatchOn = true
                // }
                // var 
                // making sure there are always 2 digitshttps://stackoverflow.com/questions/8043026/how-to-format-numbers-by-prepending-0-to-single-digit-numbers
                incrementUp()
                function incrementUp() {
                    // var time = moment().toDate();  // This will return a copy of the Date that the moment uses

                    // time.setHours(0);
                    // time.setMinutes(0);
                    // time.setSeconds(0);
                    // time.setMilliseconds(0);
                    currentTime = Date.now()

                    // var delta = currentTime - start; // milliseconds elapsed since start
                    delta = currentTime - start + offset
                    stringify = (delta).toLocaleString('en-US', {minimumIntegerDigits: 3, useGrouping:false})
                    // var time = delta /1000
                    // sec = delta/1000
                    // if (delta != undefined) {
                    // if (delta.length == 4) {
                        // milli = delta
                       milli =  stringify[0] + stringify[1]
                    // }
                    
                    // }
                    
                    if (delta >= 1000) {
                        start += 1000
                        sec += 1
                    }
                    if (sec == 60) {
                        sec = 0
                        min += 1
                    }
                    // if (sec >= 5) {
                    //     start += 5000
                    // }
                    // if (sec >= 60) {
                    //     start += 60000
                    //     min += 1
                    // }
                    // if (sec >= 5) {
                        
                    // }
                    // if (delta >= 1000) {
                    //     var currentTime = Date.now()
                    //     var delta = currentTime - start; // milliseconds elapsed since start
                    // }
                    // var seconder = Math.floor(milli / 1000); // in seconds
                    // milli = moment().milliseconds();
                    // sec = moment().seconds()
                    // min = moment().minutes()
                    // milli = delta;
                    // if (milli >= 1000) {
                    //     milli -= 1000;
                    // }
                    
                    // if (milli >= 1000) {
                    //     // milli = 0
                    //     // milli = delta
                    //     milli -= 1000
                    //     // milli = 0
                    //     sec = seconder
                    // } else {
                    //     milli = delta;
                    // }
                    if (sec >= 60) {
                        // sec = 0
                    }
                    // if (milli == 1000) {
                    //     sec += 1
                    //     milli = 0
                    // } else {
                    //     milli += 10
                    // }
                    // if (sec == 60) {
                    //     sec = 0
                    //     min += 1
                    // }
                    // if (min == 60) {
                    //     // set false
                    // }
                }

                intervals = setInterval(function () {
                    minutes.textContent = (min).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                    seconds.textContent = (sec).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                    milliseconds.textContent = (milli).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})

                    incrementUp()
                }, 10); // update about every second
                // intervals = setInterval(function () {
                //     minutes.textContent = min.toString()
                //     seconds.textContent = sec.toString()
                //     milliseconds.textContent = milli.toString()
                //     incrementUp()
                // }, 10);
                stopwatchReset.disabled = false
                stopwatchStart.textContent = 'Stop'
                // disable the timer dropdown
                dropdown.removeEventListener('click', toggleTimeMenu)
                stopwatchOff = true

            }
        })

        const timePopUp = document.getElementById('time')
        const musicPopUp = document.getElementById('music')

        timePopUp.setAttribute('state', 'standby')
        musicPopUp.setAttribute('state', 'standby')

        var popUpIcons = document.querySelectorAll('.pop-up[state=standby] nav img')
        var collapseButtons = document.querySelectorAll('.pop-up nav button.collapse')
        popUpIcons.forEach(function (icon) {
            icon.addEventListener('click', popUpState)
        })
        collapseButtons.forEach(function (button) {
            button.addEventListener('click', popUpState)
        })

        // if something is running, allow for a third state!
        function popUpState() {
            if (timePopUp.getAttribute('state') == 'standby') {
                timePopUp.setAttribute('state', 'active')
            } else if (timePopUp.getAttribute('state') == 'peek') {
                timePopUp.setAttribute('state', 'active')
            } else if (timePopUp.getAttribute('state') == 'active' && static == true) {
                timePopUp.setAttribute('state', 'standby')
            } else if (timePopUp.getAttribute('state') == 'active') {
                timePopUp.setAttribute('state', 'peek')
            }
        }

        var workMin = 25,
            workSec = 0
        var workMinutes = document.querySelector('#pomodoro #work .minutes')
        var workSeconds = document.querySelector('#pomodoro #work .seconds')
        var breakMin = 5,
            breakSec = 0
        var breakMinutes = document.querySelector('#pomodoro #break .minutes')
        var breakSeconds = document.querySelector('#pomodoro #break .seconds')
        const workButtons = document.querySelector('#pomodoro #work')
        const breakButtons = document.querySelector('#pomodoro #break')
        const timer = document.querySelector('#pomodoro div#timer')
        const workAdd = document.querySelector('#pomodoro #work button.add')
        const workSubtract = document.querySelector('#pomodoro #work button.subtract')
        const breakAdd = document.querySelector('#pomodoro #break button.add')
        const breakSubtract = document.querySelector('#pomodoro #break button.subtract')
        const pomoStartStop = document.querySelector('#pomodoro button.start-stop')
        var pomoMinutes = document.querySelector('#pomodoro #timer .minutes')
        var pomoSeconds = document.querySelector('#pomodoro #timer .seconds')

        var pomoMin = workMin
        var pomoSec = workSec
        pomoMinutes.textContent = (pomoMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
        // pomoSeconds.textContent = pomoSec.toString()

        var pomoOff = false
        var pomoIntervals
        workAdd.addEventListener('click', () => pomoTime('add', 'work'))
        workSubtract.addEventListener('click', () => pomoTime('subtract', 'work'))
        breakAdd.addEventListener('click', () => pomoTime('add', 'break'))
        breakSubtract.addEventListener('click', () => pomoTime('subtract', 'break'))
        workButtons.style.display = 'flex'
        breakButtons.style.display = 'flex'
        timer.style.display = 'none'
        const timeline = document.getElementById('timeline')
        pomoStartStop.addEventListener('click', function () {
            // reference for pomo intervals https://www.focusboosterapp.com/blog/common-misconceptions-of-the-pomodoro-technique/#:~:text=The%20average%20and%20suggested%20pomodoro,with%20a%2010%2Dminute%20break.
            if (pomoOff == true) {
                pomoMin = workMin
                pomoSec = workSec
                pomoMinutes.textContent = (pomoMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                pomoSeconds.textContent = (pomoSec).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                static = true;
                clearInterval(pomoIntervals)
                pomoStartStop.textContent = 'Start'
                dropdown.addEventListener('click', toggleTimeMenu)
                timeline.style.display = 'flex'
                workButtons.style.display = 'flex'
                breakButtons.style.display = 'flex'
                timer.style.display = 'none'

                pomoOff = false
            } else if (pomoOff == false) {
                static = false;
                function incrementDown() {
                    if (pomoMin == 0 && pomoSec == 0) {
                        // pomoMinutes.textContent = pomoMin.toString()
                        // pomoSeconds.textContent = pomoSec.toString()

                        sessions += 1
                        pomodoroTimer()
                    } else if (pomoSec == 0) {
                        pomoMin -= 1
                        pomoSec = 59
                    } else {
                        pomoSec -= 1
                    }

                }
                timeline.style.display = 'none'
                workButtons.style.display = 'none'
                breakButtons.style.display = 'none'
                timer.style.display = 'flex'
                // incrementDown()
                pomoIntervals = setInterval(function () {
                    incrementDown()
                    pomoMinutes.textContent = (pomoMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                    pomoSeconds.textContent = (pomoSec).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                    // 3

                }, 1000);
                pomoStartStop.textContent = 'Stop'
                dropdown.removeEventListener('click', toggleTimeMenu)
                pomoOff = true
            }
        })
        
        const workSpans = document.querySelectorAll('#pomodoro div div.length:nth-child(2n)')
        
        const breakSpans = document.querySelectorAll('#pomodoro div div.length:nth-child(2n + 1)')
        
        function pomoTime(operator, mode) {

            if (mode == 'work') {
                if (operator == 'add' && workMin < 60) {
                    workMin += 5
                } else if (operator == 'subtract' && workMin > 5) {
                    workMin -= 5
                }
            } else if (mode == 'break') {

                if (operator == 'add' && breakMin < 20) {
                    breakMin += 5
                } else if (operator == 'subtract' && breakMin > 5) {
                    breakMin -= 5
                }
            }
            pomoMin = workMin
            // pomoSec = workSec

            pomoMinutes.textContent = (pomoMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            // pomoSeconds.textContent = pomoSec.toString()
            // console.log(pomoMinutes)
            workMinutes.textContent = (workMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            breakMinutes.textContent = (breakMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})

            // SETTING THE PIPELINE
            let total = workMin * 3 + breakMin * 2
            let workLength = workMin/total
            let breakLength = breakMin/total
            
            workSpans.forEach(function(span) {
                span.style.width = workLength*200 + 'px';
                span.style.backgroundColor = 'green'
            })
            
            breakSpans.forEach(function(span) {
                span.style.width = breakLength*200 + 'px';
            })
        }
        workMinutes.textContent = (workMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
        breakMinutes.textContent = (breakMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
        var phase = 'break'
        var sessions = 0
        function pomodoroTimer() {
            if (sessions < 5) {
                console.log(phase)
                if (phase == 'work') {
                    pomoMin = workMin
                    pomoSec = workSec
                    phase = 'break'

                }

                else if (phase == 'break') {
                    pomoMin = breakMin
                    pomoSec = breakSec
                    phase = 'work'
                }

            } else {
                clearInterval(pomoIntervals)
                pomoOff = false;
            }
            // sessions += 1




            // set the screen to the massive countdown
            // start button becomes stop button
            // increment the meters to reflect the timers - --- - --- -
            // at the end of the timer: what happens?
        }


    </script>
    <script src="956e94fa531b26cb4e5c8ba0473f4981"></script>

    <script src="fb8edede0bfb84ccb99e54fac6796a68"></script>
    <script src="f87277b8ab24e1af2717d62bde9ace8d"></script>

    <script src="021d633403a63eab671725f69e31119f"></script>
    <script src="5b1999f037ee8741e1e59869399351f5"></script>

</body>

</html>