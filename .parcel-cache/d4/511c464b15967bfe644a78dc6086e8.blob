{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@parcel/scope-hoisting/lib/prelude.js","./public/js/content.js","./public/js/count-tiles.js","./public/js/content-form.js"],"sourcesContent":["var $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n","var $parcel$modules = {};\nvar $parcel$bundles = {};\n\nif (parcelRequire == null) {\n  parcelRequire = function(name) {\n    // Execute the bundle wrapper function if there is one registered.\n    if (name in $parcel$bundles) {\n      let wrapper = $parcel$bundles[name];\n      delete $parcel$bundles[name];\n      wrapper();\n    }\n\n    if (name in $parcel$modules) {\n      return $parcel$modules[name];\n    }\n\n    // Try the node require function if it exists.\n    // Do not use `require` to prevent Webpack from trying to bundle this call\n    if (typeof module !== 'undefined' && typeof module.require === 'function') {\n      return module.require(name);\n    }\n\n    var err = new Error(\"Cannot find module '\" + name + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, exports) {\n    $parcel$modules[id] = exports;\n  };\n\n  parcelRequire.registerBundle = function registerBundle(id, fn) {\n    $parcel$bundles[id] = fn;\n    $parcel$modules[id] = {};\n  };\n\n  $parcel$global[parcelRequireName] = parcelRequire;\n}\n","class Content {\r\n    // declare variables\r\n    constructor(id, title, description, link, group, contentList) {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.description = description;\r\n        // this.subject = subject;\r\n        this.group = group;\r\n        this.link = link;\r\n        this.contentList = contentList;\r\n    }\r\n\r\n    // add content to array\r\n    addContent() {\r\n        this.contentList.push(this);\r\n        return this.id\r\n    }\r\n\r\n    // create new card with relevant elements\r\n    createCard(n) {\r\n        let groupNames = document.querySelectorAll('.group-name')\r\n        let cards = document.querySelectorAll('.tiles'),\r\n            card = document.createElement('article'),\r\n            title = document.createElement('h3'),\r\n            descriptionContainer = document.createElement('pre'),\r\n            description = document.createElement('code'),\r\n            link = document.createElement('a'),\r\n            linkIcon = document.createElement('svg'),\r\n            editIcon = document.createElement('a'),\r\n            line = document.createElement('HR');\r\n\r\n        card.setAttribute('id', 'c-' + this.id)\r\n        card.classList.add('tile')\r\n        title.textContent = this.title\r\n        // description.classList.add('class=\"language-css\"')\r\n        if (this.description.length > 0) {\r\n            description.textContent = this.description\r\n            descriptionContainer.appendChild(description)\r\n        }\r\n\r\n        // fix links pending invalid nature\r\n        if (this.link.includes('https://') || this.link.includes('http://')) {\r\n            link.textContent = this.link\r\n            link.setAttribute('href', this.link)\r\n        } else {\r\n            link.textContent = 'https://' + this.link\r\n            link.setAttribute('href', 'https://' + this.link)\r\n        }\r\n\r\n        // set attribute for 'open in new tab' functionality\r\n        link.classList.add('external-link')\r\n        link.setAttribute('target', '_blank')\r\n        link.appendChild(linkIcon)\r\n\r\n        // add icons\r\n        linkIcon.innerHTML = `<svg width=\"20\" height=\"10\" viewBox=\"0 0 20 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M1.9 5.00003C1.9 3.29003 3.29 1.90003 5 1.90003H9V3.05176e-05H5C2.24 3.05176e-05 0 2.24003 0 5.00003C0 7.76003 2.24 10 5 10H9V8.10003H5C3.29 8.10003 1.9 6.71003 1.9 5.00003ZM6 6.00003H14V4.00003H6V6.00003ZM15 3.05176e-05H11V1.90003H15C16.71 1.90003 18.1 3.29003 18.1 5.00003C18.1 6.71003 16.71 8.10003 15 8.10003H11V10H15C17.76 10 20 7.76003 20 5.00003C20 2.24003 17.76 3.05176e-05 15 3.05176e-05Z\" fill=\"#909090\"/>\r\n        </svg>\r\n        `\r\n        editIcon.classList.add('edit-content')\r\n        editIcon.innerHTML = `<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M0 12.6672V16H3.33287L13.1626 6.17028L9.82975 2.83741L0 12.6672ZM15.74 3.59286C16.0867 3.24625 16.0867 2.68632 15.74 2.33971L13.6603 0.259994C13.3137 -0.0866241 12.7538 -0.0866241 12.4072 0.259994L10.7807 1.88644L14.1136 5.21931L15.74 3.59286Z\" fill=\"#909090\"/>\r\n          </svg>`\r\n\r\n        // append elements to the card\r\n        card.appendChild(title)\r\n        card.appendChild(descriptionContainer)\r\n        card.appendChild(line)\r\n\r\n        card.appendChild(link)\r\n        card.appendChild(editIcon)\r\n\r\n        // add card to relevant group, or to 'Ungrouped' as the default\r\n        let currentGroup = this.group\r\n        if (this.group == 'None') {\r\n            cards[0].appendChild(card)\r\n        } else {\r\n            groupNames.forEach(function setGroup(object, index) {\r\n                if (object.value == currentGroup) {\r\n                    cards[index].appendChild(card)\r\n                }\r\n            })\r\n        }\r\n        hljs.highlightAll();\r\n    }\r\n}\r\n\r\nexport default Content","export function countTiles() {\r\n    let total = document.querySelectorAll('.open-link'),\r\n        tileContainers = document.querySelectorAll('.tiles'),\r\n        openLinkSVG = `<svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M16 16H2V2H9V0H2C0.89 0 0 0.9 0 2V16C0 17.1 0.89 18 2 18H16C17.1 18 18 17.1 18 16V9H16V16ZM11 0V2H14.59L4.76 11.83L6.17 13.24L16 3.41V7H18V0H11Z\" fill=\"#909090\"/>\r\n        </svg>`;\r\n    // writing the total number of cards at the head of each column\r\n    // counts how many resource cards there are in each list\r\n    total.forEach(function count(object, index) {\r\n        let tileCount = 0;\r\n        for (let i = 0; i < tileContainers[index].querySelectorAll('.tile').length; i ++) {\r\n            if (tileContainers[index].querySelectorAll('.tile')[i].classList.length == 1) {\r\n                tileCount += 1\r\n            }\r\n        }\r\n        // if the tilecount is empty, cannot open links\r\n        if (tileCount == 0) {\r\n            total[index].innerHTML = '0 links';\r\n            total[index].classList.add('link-absent')\r\n        // otherwise, enable group link opening\r\n        } else if (tileCount == 1) {\r\n            total[index].innerHTML = 'Open ' + tileCount + ' link' + openLinkSVG;\r\n            total[index].classList.remove('link-absent')\r\n        } else {\r\n            total[index].innerHTML = 'Open ' + tileCount + ' links' + openLinkSVG;\r\n            total[index].classList.remove('link-absent')\r\n        }\r\n    })\r\n}\r\n\r\n// open all links within a group\r\nexport function openGroupLinks() {\r\n    console.log('grouplinks')\r\n    let groupLinks = document.querySelectorAll('h3.open-link')\r\n    // for each group link\r\n    groupLinks.forEach(function(groupLink) {\r\n        if (groupLink.getAttribute('listener') != 'true') {\r\n            // add an event listener so that on click, it opens up all links in child element\r\n            groupLink.addEventListener('click', function() {\r\n                console.log('clicked')\r\n                let links = groupLink.parentElement.parentElement.querySelectorAll('a.external-link')\r\n                links.forEach(function(link) {\r\n                    let url = link.getAttribute('href')\r\n                    \r\n                    // ensuring the link is to a valid external site\r\n                    if (url.includes('https://') || url.includes('http://')) {\r\n                        window.open(url)\r\n                    } else {\r\n                        url = 'https://' + url\r\n                        window.open(url)\r\n                    }  \r\n                })\r\n            })\r\n            groupLink.setAttribute('listener', 'true')\r\n        }\r\n    })\r\n}\r\n\r\nopenGroupLinks()","import Content from './content'\r\nimport * as countTiles from './count-tiles'\r\n\r\n// declaring relevant variables\r\nconst newContent = document.getElementById('new-content')\r\nconst createContentForm = document.getElementById('create-content-form')\r\nvar overlayToggle = false\r\nconst modalBackground = document.getElementById('modal-background')\r\nnewContent.addEventListener('click', function () { openContentForm() })\r\n\r\n// should hold all of the user's content in local storage\r\n// on page load, check how much content ther is in local storage (this should be an array)\r\n// for each object in the array, create a relevant card\r\n// populate that card with the relevant details\r\n// append card to the relevant group\r\n\r\n// open content form (may be prepopulated or blank)\r\nfunction openContentForm(type) {\r\n    // if updating existing content, set type update\r\n    if (type == 'update') {\r\n        createContentForm.querySelector('h1').textContent = 'Edit existing resource'\r\n        createContentForm.classList.add('update')\r\n    } else {\r\n        createContentForm.querySelector('h1').textContent = 'Add new content'\r\n        createContentForm.classList.remove('update')\r\n    }\r\n    // show/hide\r\n    if (overlayToggle == false) {\r\n        createContentForm.classList.add('active')\r\n        overlayToggle = true\r\n        modalBackground.style.display = 'flex'\r\n    } else if (overlayToggle == true) {\r\n        createContentForm.classList.remove('active')\r\n        createContentForm.reset()\r\n        overlayToggle = false\r\n        modalBackground.style.display = 'none'\r\n        contentSaveButton.value = ''\r\n    }\r\n}\r\n\r\n// adding event listeners to edit buttons \r\nfunction reupdate() {\r\n\r\n    // each card has an edit button that allows users to reaccess and update task details\r\n    let editButtons = document.querySelectorAll('.edit-content')\r\n    editButtons.forEach(function (editButton) {\r\n\r\n        // if there hasn't been a listener previously attached, attach one\r\n        if (editButton.getAttribute('listener') !== 'true') {\r\n            editButton.addEventListener('click', addAutoFill)\r\n            editButton.setAttribute('listener', 'true')\r\n        }\r\n\r\n        // autofill existing details into form\r\n        function addAutoFill() {\r\n            autoFillContentDetails(editButton)\r\n        }\r\n    })\r\n}\r\n\r\nfunction autoFillContentDetails(object) {\r\n    // get id of content card\r\n    let objectId = object.parentElement.id;\r\n    objectId = objectId.replace('c-', '')\r\n\r\n    // for each item, get the value and set to the for inputs\r\n    contentList.forEach(function (content) {\r\n        let thisContent = content;\r\n        if (thisContent.id == objectId) {\r\n            let contentDetails = createContentForm.querySelectorAll('form input');\r\n            let codeArea = createContentForm.querySelector('textArea')\r\n            //Title\r\n            contentDetails[0].value = thisContent.title\r\n            //description\r\n            codeArea.value = thisContent.description\r\n            // contentDetails[1].value = thisContent.description\r\n            //link\r\n            contentDetails[1].value = thisContent.link\r\n            //subject\r\n            // contentDetails[3].value = thisContent.subject\r\n\r\n            //group\r\n            let group = createContentForm.querySelector('select[name=group]');\r\n            group.value = object.parentElement.parentElement.parentElement.querySelector('div.group-title input.group-name').value\r\n\r\n            // open up the form with updated content\r\n            contentSaveButton.value = thisContent.id\r\n            openContentForm('update')\r\n        }\r\n    })\r\n}\r\n\r\nfunction enableButtons() {\r\n    let groups = document.getElementsByClassName('group')\r\n    let deleteGroupButtons = document.querySelectorAll('svg.delete-group')\r\n    deleteGroupButtons.forEach(function(deleteGroupButton) {\r\n        let tiles = deleteGroupButton.parentElement.parentElement.parentElement.querySelectorAll('.tile')\r\n        if (groups.length > 1 && tiles.length == 0) {\r\n            deleteGroupButton.classList.remove('disabled')\r\n        } else if (groups.length <= 1 || tiles.length > 0) {\r\n            deleteGroupButton.classList.add('disabled')\r\n        }\r\n        \r\n    })\r\n}\r\n\r\n// array where we store all the content\r\nvar contentList = [];\r\n\r\nconst contentSaveButton = document.getElementById('content-save')\r\nconst contentCancelButton = document.getElementById('edit-content-cancel')\r\nconst contentCloseButton = contentCancelButton.nextElementSibling\r\nconst contentDeleteButton = document.getElementById('edit-content-delete')\r\n\r\n// cancel/close without saving\r\ncontentCancelButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n    openContentForm()\r\n    reupdate()\r\n})\r\ncontentCloseButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n    openContentForm()\r\n    reupdate()\r\n})\r\n\r\n// delete this card\r\ncontentDeleteButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n    let contentID = parseInt(contentSaveButton.value)\r\n    // iterate to find match in ID and delete that one\r\n    for (let i = 0; i < contentList.length; i++) {\r\n        var oldContent = contentList[i]\r\n        if (oldContent.id == contentID) {\r\n            contentList.splice(contentList.indexOf(oldContent), 1)\r\n            let oldTile = document.getElementById('c-' + contentID)\r\n            oldTile.remove();\r\n            contentSaveButton.value = ''\r\n        }\r\n    }\r\n    // localStorage.setItem('content', JSON.stringify(contentList))\r\n    openContentForm()\r\n    reupdate()\r\n    countTiles.countTiles()\r\n    enableButtons()\r\n})\r\n\r\n// save the content\r\ncontentSaveButton.addEventListener('click', function (event) {\r\n    event.preventDefault()\r\n    let contentDetails, content, contentID, contentTitle, contentDescription, contentLink, contentGroup;\r\n    // if updating, look for content with same id value\r\n    if (createContentForm.classList.contains('update')) {\r\n        contentID = parseInt(contentSaveButton.value)\r\n        for (let i = 0; i < contentList.length; i++) {\r\n            var oldContent = contentList[i]\r\n            if (oldContent.id == contentID) {\r\n                contentList.splice(contentList.indexOf(oldContent), 1)\r\n                let oldTile = document.getElementById('c-' + contentID)\r\n                oldTile.remove();\r\n                contentSaveButton.value = ''\r\n            }\r\n        }\r\n    // otherwise, generate one\r\n    } else {\r\n        contentID = Date.now()\r\n    }\r\n\r\n    // extract values from input form\r\n    contentDetails = createContentForm.querySelectorAll('form input');\r\n    contentTitle = contentDetails[0].value\r\n    let codeArea = createContentForm.querySelector('textarea')\r\n    contentDescription = codeArea.value\r\n    // contentDescription = contentDetails[1].value \r\n    contentLink = contentDetails[1].value\r\n\r\n    let groups = createContentForm.querySelector('select[name=group]')\r\n    contentGroup = groups.value\r\n\r\n    // create new object in class\r\n    content = new Content(contentID, contentTitle, contentDescription, contentLink, contentGroup, contentList)\r\n    content.createCard(content.addContent());\r\n\r\n    // update tile count and group links\r\n    // localStorage.setItem('content', JSON.stringify(contentList))\r\n    openContentForm()\r\n    countTiles.countTiles()\r\n    countTiles.openGroupLinks()\r\n    reupdate()\r\n    enableButtons()\r\n})"],"names":["$parcel$global","globalThis","self","window","global","$parcel$export","e","n","v","Object","defineProperty","get","enumerable","$parcel$modules","$parcel$bundles","parcelRequire","name","wrapper","module","require","err","Error","code","register","id","exports","registerBundle","fn","parcelRequireName","$a0a91faf8dc47795ceb31f71a27e69a3$export$default","constructor","title","description","link","group","contentList","this","addContent","push","createCard","groupNames","document","querySelectorAll","cards","card","createElement","descriptionContainer","linkIcon","editIcon","line","setAttribute","classList","add","textContent","length","appendChild","includes","innerHTML","currentGroup","forEach","object","index","value","hljs","highlightAll","$a63e4a3d8910b340650bdfd7c57e04e0$export$countTiles","total","tileContainers","openLinkSVG","tileCount","i","remove","$a63e4a3d8910b340650bdfd7c57e04e0$export$openGroupLinks","console","log","groupLink","getAttribute","addEventListener","parentElement","url","open","$3458af9feb5a4d6d3fd11b3df9c22945$var$newContent","getElementById","$3458af9feb5a4d6d3fd11b3df9c22945$var$createContentForm","$3458af9feb5a4d6d3fd11b3df9c22945$var$overlayToggle","$3458af9feb5a4d6d3fd11b3df9c22945$var$modalBackground","$3458af9feb5a4d6d3fd11b3df9c22945$var$openContentForm","type","querySelector","style","display","reset","$3458af9feb5a4d6d3fd11b3df9c22945$var$contentSaveButton","$3458af9feb5a4d6d3fd11b3df9c22945$var$reupdate","editButton","objectId","replace","$3458af9feb5a4d6d3fd11b3df9c22945$var$contentList","content","thisContent","contentDetails","codeArea","$3458af9feb5a4d6d3fd11b3df9c22945$var$autoFillContentDetails","$3458af9feb5a4d6d3fd11b3df9c22945$var$enableButtons","groups","getElementsByClassName","deleteGroupButton","tiles","$3458af9feb5a4d6d3fd11b3df9c22945$var$contentCancelButton","$3458af9feb5a4d6d3fd11b3df9c22945$var$contentCloseButton","nextElementSibling","$3458af9feb5a4d6d3fd11b3df9c22945$var$contentDeleteButton","event","preventDefault","contentID","parseInt","oldContent","splice","indexOf","contentTitle","contentDescription","contentLink","contentGroup","contains","Date","now"],"version":3,"file":"index.HASH_REF_09b4f3b2bc1d202d9fcae7f791a60848.js.map"}