const timeToolsOverlay = document.getElementById('time')
        const timeSelector = document.getElementById('time-selector')
        const dropdown = document.getElementById('dropdown')

        timeMenuToggleOpen = false
        function toggleTimeMenu() {
            if (timeMenuToggleOpen == false) {
                timeSelector.classList = 'open'
                timeMenuToggleOpen = true
            } else if (timeMenuToggleOpen == true) {
                timeSelector.classList = 'close'
                timeMenuToggleOpen = false
            }
        }
        dropdown.addEventListener('click', toggleTimeMenu)

        const stopwatch = document.getElementById('stopwatch')
        const stopwatchSelector = document.getElementById('stopwatch-select')
        const pomodoro = document.getElementById('pomodoro')
        const pomodoroSelector = document.getElementById('pomodoro-select')

        stopwatchSelector.addEventListener('click', function () {
            timeSelector.appendChild(pomodoroSelector)
            setTimerType()
        })
        pomodoroSelector.addEventListener('click', function () {
            timeSelector.appendChild(stopwatchSelector)
            setTimerType()
        })

        function setTimerType() {
            let currentTimer = timeSelector.querySelector(':first-child')
            if (currentTimer.id == 'stopwatch-select') {
                stopwatch.classList.add('active')
                pomodoro.classList.remove('active')
            } else if (currentTimer.id == 'pomodoro-select') {
                stopwatch.classList.remove('active')
                pomodoro.classList.add('active')
            }
        }
        setTimerType()


        var minutes = document.querySelector('#stopwatch .minutes')
        // minutes = minutes.textContent = '00'
        var min = 0
        var seconds = document.querySelector('#stopwatch .seconds')
        // seconds = seconds.textContent = '00'
        var sec = 0
        var milliseconds = document.querySelector('#stopwatch .milliseconds')
        // milliseconds = milliseconds.textContent = '00'
        var milli = 0

        const stopwatchStart = document.querySelector('#stopwatch button.start-stop')
        const stopwatchReset = document.querySelector('#stopwatch button.reset')
        var stopwatchOff = false
        var intervals;
        var static = true
        stopwatchReset.addEventListener('click', function () {
            // stop the stopwatch
            // continue the stopwatch even while the user is in a different tab?
            milli = 0
            sec = 0
            min = 0
            offset = 0
            minutes.textContent = (min).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            seconds.textContent = (sec).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            milliseconds.textContent = (milli).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            // if (stopwatchOff == true) {
                stopwatchStart.textContent = 'Start'
            stopwatchReset.disabled = false
            stopwatchOff = false
            clearInterval(intervals)
            static = true
            // }

            dropdown.addEventListener('click', toggleTimeMenu)
        })
        var stopwatchOn = false;
        var start, currentTime, delta, stringify;
        var offset = 0;
        stopwatchStart.addEventListener('click', function () {
            static = false;
            
            if (stopwatchOff == true) {
                
                clearInterval(intervals)
                // stopwatchReset.disabled = false
                stopwatchStart.textContent = 'Start'
                stopwatchOff = false
                
                offset = parseInt(milli)*10
            } else if (stopwatchOff == false) {
                
                // if (stopwatchOn == false) {
                    start = Date.now()
                    // start += offset;
                    // offset = 0;
                //     stopwatchOn = true
                // }
                // var 
                // making sure there are always 2 digitshttps://stackoverflow.com/questions/8043026/how-to-format-numbers-by-prepending-0-to-single-digit-numbers
                incrementUp()
                function incrementUp() {
                    // var time = moment().toDate();  // This will return a copy of the Date that the moment uses

                    // time.setHours(0);
                    // time.setMinutes(0);
                    // time.setSeconds(0);
                    // time.setMilliseconds(0);
                    currentTime = Date.now()

                    // var delta = currentTime - start; // milliseconds elapsed since start
                    delta = currentTime - start + offset
                    stringify = (delta).toLocaleString('en-US', {minimumIntegerDigits: 3, useGrouping:false})
                    // var time = delta /1000
                    // sec = delta/1000
                    // if (delta != undefined) {
                    // if (delta.length == 4) {
                        // milli = delta
                       milli =  stringify[0] + stringify[1]
                    // }
                    
                    // }
                    
                    if (delta >= 1000) {
                        start += 1000
                        sec += 1
                    }
                    if (sec == 60) {
                        sec = 0
                        min += 1
                    }
                    // if (sec >= 5) {
                    //     start += 5000
                    // }
                    // if (sec >= 60) {
                    //     start += 60000
                    //     min += 1
                    // }
                    // if (sec >= 5) {
                        
                    // }
                    // if (delta >= 1000) {
                    //     var currentTime = Date.now()
                    //     var delta = currentTime - start; // milliseconds elapsed since start
                    // }
                    // var seconder = Math.floor(milli / 1000); // in seconds
                    // milli = moment().milliseconds();
                    // sec = moment().seconds()
                    // min = moment().minutes()
                    // milli = delta;
                    // if (milli >= 1000) {
                    //     milli -= 1000;
                    // }
                    
                    // if (milli >= 1000) {
                    //     // milli = 0
                    //     // milli = delta
                    //     milli -= 1000
                    //     // milli = 0
                    //     sec = seconder
                    // } else {
                    //     milli = delta;
                    // }
                    if (sec >= 60) {
                        // sec = 0
                    }
                    // if (milli == 1000) {
                    //     sec += 1
                    //     milli = 0
                    // } else {
                    //     milli += 10
                    // }
                    // if (sec == 60) {
                    //     sec = 0
                    //     min += 1
                    // }
                    // if (min == 60) {
                    //     // set false
                    // }
                }

                intervals = setInterval(function () {
                    minutes.textContent = (min).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                    seconds.textContent = (sec).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                    milliseconds.textContent = (milli).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})

                    incrementUp()
                }, 10); // update about every second
                // intervals = setInterval(function () {
                //     minutes.textContent = min.toString()
                //     seconds.textContent = sec.toString()
                //     milliseconds.textContent = milli.toString()
                //     incrementUp()
                // }, 10);
                stopwatchReset.disabled = false
                stopwatchStart.textContent = 'Stop'
                // disable the timer dropdown
                dropdown.removeEventListener('click', toggleTimeMenu)
                stopwatchOff = true

            }
        })

        const timePopUp = document.getElementById('time')
        const musicPopUp = document.getElementById('music')

        timePopUp.setAttribute('state', 'standby')
        musicPopUp.setAttribute('state', 'standby')

        var popUpIcons = document.querySelectorAll('.pop-up[state=standby] nav img')
        var collapseButtons = document.querySelectorAll('.pop-up nav button.collapse')
        popUpIcons.forEach(function (icon) {
            icon.addEventListener('click', popUpState)
        })
        collapseButtons.forEach(function (button) {
            button.addEventListener('click', popUpState)
        })

        // if something is running, allow for a third state!
        function popUpState() {
            if (timePopUp.getAttribute('state') == 'standby') {
                timePopUp.setAttribute('state', 'active')
            } else if (timePopUp.getAttribute('state') == 'peek') {
                timePopUp.setAttribute('state', 'active')
            } else if (timePopUp.getAttribute('state') == 'active' && static == true) {
                timePopUp.setAttribute('state', 'standby')
            } else if (timePopUp.getAttribute('state') == 'active') {
                timePopUp.setAttribute('state', 'peek')
            }
        }

        var workMin = 25,
            workSec = 0
        var workMinutes = document.querySelector('#pomodoro #work .minutes')
        var workSeconds = document.querySelector('#pomodoro #work .seconds')
        var breakMin = 5,
            breakSec = 0
        var breakMinutes = document.querySelector('#pomodoro #break .minutes')
        var breakSeconds = document.querySelector('#pomodoro #break .seconds')
        const workButtons = document.querySelector('#pomodoro #work')
        const breakButtons = document.querySelector('#pomodoro #break')
        const timer = document.querySelector('#pomodoro div#timer')
        const workAdd = document.querySelector('#pomodoro #work button.add')
        const workSubtract = document.querySelector('#pomodoro #work button.subtract')
        const breakAdd = document.querySelector('#pomodoro #break button.add')
        const breakSubtract = document.querySelector('#pomodoro #break button.subtract')
        const pomoStartStop = document.querySelector('#pomodoro button.start-stop')
        var pomoMinutes = document.querySelector('#pomodoro #timer .minutes')
        var pomoSeconds = document.querySelector('#pomodoro #timer .seconds')

        var pomoMin = workMin
        var pomoSec = workSec
        pomoMinutes.textContent = (pomoMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
        // pomoSeconds.textContent = pomoSec.toString()

        var pomoOff = false
        var pomoIntervals
        workAdd.addEventListener('click', () => pomoTime('add', 'work'))
        workSubtract.addEventListener('click', () => pomoTime('subtract', 'work'))
        breakAdd.addEventListener('click', () => pomoTime('add', 'break'))
        breakSubtract.addEventListener('click', () => pomoTime('subtract', 'break'))
        workButtons.style.display = 'flex'
        breakButtons.style.display = 'flex'
        timer.style.display = 'none'
        var timeline = document.getElementById('timeline')
        const loadSpans = document.querySelectorAll('#pomodoro div.length > div')
        const allSpans = document.querySelectorAll('#pomodoro div > div.length')
        // var timelineLength = timeline.clientWidth;
        pomoStartStop.addEventListener('click', function () {
            // reference for pomo intervals https://www.focusboosterapp.com/blog/common-misconceptions-of-the-pomodoro-technique/#:~:text=The%20average%20and%20suggested%20pomodoro,with%20a%2010%2Dminute%20break.
            if (pomoOff == true) {
                pomoMin = workMin
                pomoSec = workSec
                pomoMinutes.textContent = (pomoMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                pomoSeconds.textContent = (pomoSec).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                static = true;
                clearInterval(pomoIntervals)
                pomoStartStop.textContent = 'Start'
                dropdown.addEventListener('click', toggleTimeMenu)
                // timeline.style.display = 'flex'
                workButtons.style.display = 'flex'
                breakButtons.style.display = 'flex'
                timer.style.display = 'none'

                pomoOff = false
                loadSpans.forEach(function(span) {
                    span.style.animation = 'none'
                })
                finalLoadSpan.style.animation = 'none'

            } else if (pomoOff == false) {
                static = false;


                function incrementDown() {
                    if (pomoMin == 0 && pomoSec == 0) {
                       
                        sessions += 1

                        pomodoroTimer()

                    } else if (pomoSec == 0) {
                        pomoMin -= 1
                        pomoSec = 59
                    } else {
                        pomoSec -= 1
                    }
                }
                // timeline.style.display = 'none'
                workButtons.style.display = 'none'
                breakButtons.style.display = 'none'
                timer.style.display = 'flex'
                // incrementDown()
                pomoIntervals = setInterval(function () {
                    incrementDown()
                    pomoMinutes.textContent = (pomoMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                    pomoSeconds.textContent = (pomoSec).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
                    // 3

                }, 1000);
                pomoStartStop.textContent = 'Stop'
                dropdown.removeEventListener('click', toggleTimeMenu)
                pomoOff = true
            }
            pomodoroTimer()
        })
        
        const workSpans = document.querySelectorAll('#pomodoro div > div.length:nth-child(2n + 1)')
        
        const breakSpans = document.querySelectorAll('#pomodoro div > div.length:nth-child(2n )')
        
        function pomoTime(operator, mode) {

            if (mode == 'work') {
                if (operator == 'add' && workMin < 60) {
                    workMin += 5
                } else if (operator == 'subtract' && workMin > 5) {
                    workMin -= 5
                }
            } else if (mode == 'break') {

                if (operator == 'add' && breakMin < 20) {
                    breakMin += 5
                } else if (operator == 'subtract' && breakMin > 5) {
                    breakMin -= 5
                }
            }
            pomoMin = workMin
            // pomoSec = workSec

            pomoMinutes.textContent = (pomoMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            // pomoSeconds.textContent = pomoSec.toString()
            // console.log(pomoMinutes)
            workMinutes.textContent = (workMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            breakMinutes.textContent = (breakMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
            pomoLength()
        }
        pomoLength()
        function pomoLength() {
            
            // SETTING THE PIPELINE
            let total = workMin * 3 + breakMin * 2
            // console.log(timelineLength)
            let timelineLength = 248
            let workLength = workMin/total * timelineLength
            let breakLength = breakMin/total * timelineLength
            
            workSpans.forEach(function(span) {
                span.style.width = workLength + 'px';
                console.log(span.style.width)
            })
            
            breakSpans.forEach(function(span) {
                span.style.width = breakLength + 'px';
            })
        }
        workMinutes.textContent = (workMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
        breakMinutes.textContent = (breakMin).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})
        var phase = 'break'
        var sessions = 0
        var finalLoadSpanContainer = document.querySelector('#pomodoro div#final-load')
        var finalLoadSpan = finalLoadSpanContainer.firstChild
        function pomodoroTimer() {
            alert('called')
            if (sessions < 5) {
                console.log(phase)
                if (phase == 'work') {
                    pomoMin = workMin
                    pomoSec = workSec
                    phase = 'break'

                }

                else if (phase == 'break') {
                    pomoMin = breakMin
                    pomoSec = breakSec
                    phase = 'work'
                }

                let fullTime;


                if (phase == 'work') {
                    fullTime = workSec + workMin*60
                    
                } else if (phase == 'break') {
                    fullTime = breakSec + breakMin*60
                }
                
                // loadSpans[sessions].style.transitionDuration = fullTime + 's'
                // loadSpans[sessions].style.backgroundColor = 'grey'
                loadSpans[sessions].style.animation = 'load-spans ' + fullTime + 's ' + 'linear forwards'
                loadSpans[sessions].classList.add('active')
                console.log(phase)
                console.log(pomoMin)
                console.log(workMin)
            } else if (sessions == 5) {
                pomoMin = 30
                pomoSec = 0
                phase = 'finalbreak'
                let fullTime = 30*60

                finalLoadSpan.style.animation = 'load-spans ' + fullTime + 's ' + 'linear forwards'
                finalLoadSpan.classList.add('active')
            } else {
                clearInterval(pomoIntervals)
                pomoOff = false;
                workButtons.style.display = 'flex'
                breakButtons.style.display = 'flex'
                timer.style.display = 'none'
            }
        }